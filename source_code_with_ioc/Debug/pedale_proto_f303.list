
pedale_proto_f303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076a0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08007828  08007828  00008828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c30  08007c30  0000904c  2**0
                  CONTENTS
  4 .ARM          00000000  08007c30  08007c30  0000904c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c30  08007c30  0000904c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c30  08007c30  00008c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c34  08007c34  00008c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  20000000  08007c38  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000904c  2**0
                  CONTENTS
 10 .bss          0000260c  2000004c  2000004c  0000904c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002658  20002658  0000904c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012c44  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000244c  00000000  00000000  0001bcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001068  00000000  00000000  0001e110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ce2  00000000  00000000  0001f178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c71e  00000000  00000000  0001fe5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013bb7  00000000  00000000  0003c578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000adbb7  00000000  00000000  0005012f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fdce6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048d0  00000000  00000000  000fdd2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  001025fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000004c 	.word	0x2000004c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007810 	.word	0x08007810

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000050 	.word	0x20000050
 80001c4:	08007810 	.word	0x08007810

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	0000      	movs	r0, r0
	...

08000a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5e:	f001 fac9 	bl	8001ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a62:	f000 f89d 	bl	8000ba0 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a66:	f000 fb49 	bl	80010fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000a6a:	f000 fb19 	bl	80010a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a6e:	f000 fae7 	bl	8001040 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a72:	f000 f9df 	bl	8000e34 <MX_TIM2_Init>
  MX_DAC1_Init();
 8000a76:	f000 f9b3 	bl	8000de0 <MX_DAC1_Init>
  MX_ADC1_Init();
 8000a7a:	f000 f8d3 	bl	8000c24 <MX_ADC1_Init>
  MX_TIM15_Init();
 8000a7e:	f000 fa8d 	bl	8000f9c <MX_TIM15_Init>
  MX_ADC2_Init();
 8000a82:	f000 f941 	bl	8000d08 <MX_ADC2_Init>
  MX_TIM6_Init();
 8000a86:	f000 fa51 	bl	8000f2c <MX_TIM6_Init>

  // initialisation de l'effet
  //distortion_init();

  // démarrage des buffers et des timers
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, N);
 8000a8a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000a8e:	493a      	ldr	r1, [pc, #232]	@ (8000b78 <main+0x120>)
 8000a90:	483a      	ldr	r0, [pc, #232]	@ (8000b7c <main+0x124>)
 8000a92:	f001 fcc5 	bl	8002420 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dac_buffer, N, DAC_ALIGN_12B_R);
 8000a96:	2300      	movs	r3, #0
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000a9e:	4a38      	ldr	r2, [pc, #224]	@ (8000b80 <main+0x128>)
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4838      	ldr	r0, [pc, #224]	@ (8000b84 <main+0x12c>)
 8000aa4:	f002 fdc8 	bl	8003638 <HAL_DAC_Start_DMA>
  //HAL_TIM_Base_Start(&htim2);

  for(int i = 0; i < 360; i++)
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	e04e      	b.n	8000b4c <main+0xf4>
  {
	  cos_values[i] = cosf(i*2*PI/360);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fcda 	bl	800046c <__aeabi_i2d>
 8000ab8:	a32d      	add	r3, pc, #180	@ (adr r3, 8000b70 <main+0x118>)
 8000aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000abe:	f7ff fd3f 	bl	8000540 <__aeabi_dmul>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	4610      	mov	r0, r2
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f04f 0200 	mov.w	r2, #0
 8000ace:	4b2e      	ldr	r3, [pc, #184]	@ (8000b88 <main+0x130>)
 8000ad0:	f7ff fe60 	bl	8000794 <__aeabi_ddiv>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	4610      	mov	r0, r2
 8000ada:	4619      	mov	r1, r3
 8000adc:	f7ff ff6a 	bl	80009b4 <__aeabi_d2f>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	ee00 3a10 	vmov	s0, r3
 8000ae6:	f006 f915 	bl	8006d14 <cosf>
 8000aea:	eef0 7a40 	vmov.f32	s15, s0
 8000aee:	4a27      	ldr	r2, [pc, #156]	@ (8000b8c <main+0x134>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	4413      	add	r3, r2
 8000af6:	edc3 7a00 	vstr	s15, [r3]
	  sin_values[i] = sinf(i*2*PI/360);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fcb4 	bl	800046c <__aeabi_i2d>
 8000b04:	a31a      	add	r3, pc, #104	@ (adr r3, 8000b70 <main+0x118>)
 8000b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b0a:	f7ff fd19 	bl	8000540 <__aeabi_dmul>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	460b      	mov	r3, r1
 8000b12:	4610      	mov	r0, r2
 8000b14:	4619      	mov	r1, r3
 8000b16:	f04f 0200 	mov.w	r2, #0
 8000b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000b88 <main+0x130>)
 8000b1c:	f7ff fe3a 	bl	8000794 <__aeabi_ddiv>
 8000b20:	4602      	mov	r2, r0
 8000b22:	460b      	mov	r3, r1
 8000b24:	4610      	mov	r0, r2
 8000b26:	4619      	mov	r1, r3
 8000b28:	f7ff ff44 	bl	80009b4 <__aeabi_d2f>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	ee00 3a10 	vmov	s0, r3
 8000b32:	f006 f933 	bl	8006d9c <sinf>
 8000b36:	eef0 7a40 	vmov.f32	s15, s0
 8000b3a:	4a15      	ldr	r2, [pc, #84]	@ (8000b90 <main+0x138>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	4413      	add	r3, r2
 8000b42:	edc3 7a00 	vstr	s15, [r3]
  for(int i = 0; i < 360; i++)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000b52:	dbac      	blt.n	8000aae <main+0x56>
  }

  HAL_TIM_Base_Start_IT(&htim15);
 8000b54:	480f      	ldr	r0, [pc, #60]	@ (8000b94 <main+0x13c>)
 8000b56:	f004 fd73 	bl	8005640 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000b5a:	2104      	movs	r1, #4
 8000b5c:	480e      	ldr	r0, [pc, #56]	@ (8000b98 <main+0x140>)
 8000b5e:	f004 fe2d 	bl	80057bc <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000b62:	480e      	ldr	r0, [pc, #56]	@ (8000b9c <main+0x144>)
 8000b64:	f004 fd6c 	bl	8005640 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <main+0x110>
 8000b6c:	f3af 8000 	nop.w
 8000b70:	c083126f 	.word	0xc083126f
 8000b74:	400921ca 	.word	0x400921ca
 8000b78:	20000354 	.word	0x20000354
 8000b7c:	20000068 	.word	0x20000068
 8000b80:	20000b24 	.word	0x20000b24
 8000b84:	20000190 	.word	0x20000190
 8000b88:	40768000 	.word	0x40768000
 8000b8c:	20001acc 	.word	0x20001acc
 8000b90:	2000206c 	.word	0x2000206c
 8000b94:	20000280 	.word	0x20000280
 8000b98:	200001e8 	.word	0x200001e8
 8000b9c:	20000234 	.word	0x20000234

08000ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b090      	sub	sp, #64	@ 0x40
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	f107 0318 	add.w	r3, r7, #24
 8000baa:	2228      	movs	r2, #40	@ 0x28
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f006 f883 	bl	8006cba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bca:	2310      	movs	r3, #16
 8000bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000bd6:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bdc:	f107 0318 	add.w	r3, r7, #24
 8000be0:	4618      	mov	r0, r3
 8000be2:	f003 fa77 	bl	80040d4 <HAL_RCC_OscConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000bec:	f000 fedc 	bl	80019a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bfc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2102      	movs	r1, #2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f004 faa0 	bl	8005150 <HAL_RCC_ClockConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000c16:	f000 fec7 	bl	80019a8 <Error_Handler>
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	3740      	adds	r7, #64	@ 0x40
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	@ 0x28
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
 8000c44:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c46:	4b2f      	ldr	r3, [pc, #188]	@ (8000d04 <MX_ADC1_Init+0xe0>)
 8000c48:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c4e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d04 <MX_ADC1_Init+0xe0>)
 8000c50:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000c54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c56:	4b2b      	ldr	r3, [pc, #172]	@ (8000d04 <MX_ADC1_Init+0xe0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c5c:	4b29      	ldr	r3, [pc, #164]	@ (8000d04 <MX_ADC1_Init+0xe0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c62:	4b28      	ldr	r3, [pc, #160]	@ (8000d04 <MX_ADC1_Init+0xe0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c68:	4b26      	ldr	r3, [pc, #152]	@ (8000d04 <MX_ADC1_Init+0xe0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000c70:	4b24      	ldr	r3, [pc, #144]	@ (8000d04 <MX_ADC1_Init+0xe0>)
 8000c72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T15_TRGO;
 8000c78:	4b22      	ldr	r3, [pc, #136]	@ (8000d04 <MX_ADC1_Init+0xe0>)
 8000c7a:	f44f 7260 	mov.w	r2, #896	@ 0x380
 8000c7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c80:	4b20      	ldr	r3, [pc, #128]	@ (8000d04 <MX_ADC1_Init+0xe0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c86:	4b1f      	ldr	r3, [pc, #124]	@ (8000d04 <MX_ADC1_Init+0xe0>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d04 <MX_ADC1_Init+0xe0>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c94:	4b1b      	ldr	r3, [pc, #108]	@ (8000d04 <MX_ADC1_Init+0xe0>)
 8000c96:	2204      	movs	r2, #4
 8000c98:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <MX_ADC1_Init+0xe0>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ca0:	4b18      	ldr	r3, [pc, #96]	@ (8000d04 <MX_ADC1_Init+0xe0>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ca6:	4817      	ldr	r0, [pc, #92]	@ (8000d04 <MX_ADC1_Init+0xe0>)
 8000ca8:	f001 fa28 	bl	80020fc <HAL_ADC_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000cb2:	f000 fe79 	bl	80019a8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4810      	ldr	r0, [pc, #64]	@ (8000d04 <MX_ADC1_Init+0xe0>)
 8000cc2:	f002 f967 	bl	8002f94 <HAL_ADCEx_MultiModeConfigChannel>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ccc:	f000 fe6c 	bl	80019a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	@ (8000d04 <MX_ADC1_Init+0xe0>)
 8000cee:	f001 fe93 	bl	8002a18 <HAL_ADC_ConfigChannel>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000cf8:	f000 fe56 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  //ADC_config = sConfig;
  /* USER CODE END ADC1_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	3728      	adds	r7, #40	@ 0x28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000068 	.word	0x20000068

08000d08 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d0e:	463b      	mov	r3, r7
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
 8000d1c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd8 <MX_ADC2_Init+0xd0>)
 8000d20:	4a2e      	ldr	r2, [pc, #184]	@ (8000ddc <MX_ADC2_Init+0xd4>)
 8000d22:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d24:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd8 <MX_ADC2_Init+0xd0>)
 8000d26:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000d2a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd8 <MX_ADC2_Init+0xd0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d32:	4b29      	ldr	r3, [pc, #164]	@ (8000dd8 <MX_ADC2_Init+0xd0>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d38:	4b27      	ldr	r3, [pc, #156]	@ (8000dd8 <MX_ADC2_Init+0xd0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d3e:	4b26      	ldr	r3, [pc, #152]	@ (8000dd8 <MX_ADC2_Init+0xd0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d46:	4b24      	ldr	r3, [pc, #144]	@ (8000dd8 <MX_ADC2_Init+0xd0>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d4c:	4b22      	ldr	r3, [pc, #136]	@ (8000dd8 <MX_ADC2_Init+0xd0>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d52:	4b21      	ldr	r3, [pc, #132]	@ (8000dd8 <MX_ADC2_Init+0xd0>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8000d58:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd8 <MX_ADC2_Init+0xd0>)
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd8 <MX_ADC2_Init+0xd0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d66:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd8 <MX_ADC2_Init+0xd0>)
 8000d68:	2204      	movs	r2, #4
 8000d6a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd8 <MX_ADC2_Init+0xd0>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d72:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <MX_ADC2_Init+0xd0>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d78:	4817      	ldr	r0, [pc, #92]	@ (8000dd8 <MX_ADC2_Init+0xd0>)
 8000d7a:	f001 f9bf 	bl	80020fc <HAL_ADC_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000d84:	f000 fe10 	bl	80019a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d88:	2304      	movs	r3, #4
 8000d8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000d94:	2307      	movs	r3, #7
 8000d96:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000da0:	463b      	mov	r3, r7
 8000da2:	4619      	mov	r1, r3
 8000da4:	480c      	ldr	r0, [pc, #48]	@ (8000dd8 <MX_ADC2_Init+0xd0>)
 8000da6:	f001 fe37 	bl	8002a18 <HAL_ADC_ConfigChannel>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000db0:	f000 fdfa 	bl	80019a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000db4:	2303      	movs	r3, #3
 8000db6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000db8:	2302      	movs	r3, #2
 8000dba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4805      	ldr	r0, [pc, #20]	@ (8000dd8 <MX_ADC2_Init+0xd0>)
 8000dc2:	f001 fe29 	bl	8002a18 <HAL_ADC_ConfigChannel>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000dcc:	f000 fdec 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200000b8 	.word	0x200000b8
 8000ddc:	50000100 	.word	0x50000100

08000de0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000df0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e2c <MX_DAC1_Init+0x4c>)
 8000df2:	4a0f      	ldr	r2, [pc, #60]	@ (8000e30 <MX_DAC1_Init+0x50>)
 8000df4:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000df6:	480d      	ldr	r0, [pc, #52]	@ (8000e2c <MX_DAC1_Init+0x4c>)
 8000df8:	f002 fbd3 	bl	80035a2 <HAL_DAC_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000e02:	f000 fdd1 	bl	80019a8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T15_TRGO;
 8000e06:	231c      	movs	r3, #28
 8000e08:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2200      	movs	r2, #0
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	@ (8000e2c <MX_DAC1_Init+0x4c>)
 8000e16:	f002 fd25 	bl	8003864 <HAL_DAC_ConfigChannel>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000e20:	f000 fdc2 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000190 	.word	0x20000190
 8000e30:	40007400 	.word	0x40007400

08000e34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08c      	sub	sp, #48	@ 0x30
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3a:	f107 0320 	add.w	r3, r7, #32
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e60:	4b31      	ldr	r3, [pc, #196]	@ (8000f28 <MX_TIM2_Init+0xf4>)
 8000e62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e68:	4b2f      	ldr	r3, [pc, #188]	@ (8000f28 <MX_TIM2_Init+0xf4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f28 <MX_TIM2_Init+0xf4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e74:	4b2c      	ldr	r3, [pc, #176]	@ (8000f28 <MX_TIM2_Init+0xf4>)
 8000e76:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f28 <MX_TIM2_Init+0xf4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e82:	4b29      	ldr	r3, [pc, #164]	@ (8000f28 <MX_TIM2_Init+0xf4>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e88:	4827      	ldr	r0, [pc, #156]	@ (8000f28 <MX_TIM2_Init+0xf4>)
 8000e8a:	f004 fb81 	bl	8005590 <HAL_TIM_Base_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000e94:	f000 fd88 	bl	80019a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e9c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e9e:	f107 0320 	add.w	r3, r7, #32
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4820      	ldr	r0, [pc, #128]	@ (8000f28 <MX_TIM2_Init+0xf4>)
 8000ea6:	f004 ff5b 	bl	8005d60 <HAL_TIM_ConfigClockSource>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000eb0:	f000 fd7a 	bl	80019a8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000eb4:	481c      	ldr	r0, [pc, #112]	@ (8000f28 <MX_TIM2_Init+0xf4>)
 8000eb6:	f004 fc1f 	bl	80056f8 <HAL_TIM_IC_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000ec0:	f000 fd72 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4815      	ldr	r0, [pc, #84]	@ (8000f28 <MX_TIM2_Init+0xf4>)
 8000ed4:	f005 fac6 	bl	8006464 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000ede:	f000 fd63 	bl	80019a8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480b      	ldr	r0, [pc, #44]	@ (8000f28 <MX_TIM2_Init+0xf4>)
 8000efa:	f004 fe95 	bl	8005c28 <HAL_TIM_IC_ConfigChannel>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000f04:	f000 fd50 	bl	80019a8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000f08:	1d3b      	adds	r3, r7, #4
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4806      	ldr	r0, [pc, #24]	@ (8000f28 <MX_TIM2_Init+0xf4>)
 8000f10:	f004 fe8a 	bl	8005c28 <HAL_TIM_IC_ConfigChannel>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8000f1a:	f000 fd45 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	3730      	adds	r7, #48	@ 0x30
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200001e8 	.word	0x200001e8

08000f2c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f3c:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <MX_TIM6_Init+0x68>)
 8000f3e:	4a16      	ldr	r2, [pc, #88]	@ (8000f98 <MX_TIM6_Init+0x6c>)
 8000f40:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 600;
 8000f42:	4b14      	ldr	r3, [pc, #80]	@ (8000f94 <MX_TIM6_Init+0x68>)
 8000f44:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000f48:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4a:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <MX_TIM6_Init+0x68>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64000;
 8000f50:	4b10      	ldr	r3, [pc, #64]	@ (8000f94 <MX_TIM6_Init+0x68>)
 8000f52:	f44f 427a 	mov.w	r2, #64000	@ 0xfa00
 8000f56:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f58:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <MX_TIM6_Init+0x68>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f5e:	480d      	ldr	r0, [pc, #52]	@ (8000f94 <MX_TIM6_Init+0x68>)
 8000f60:	f004 fb16 	bl	8005590 <HAL_TIM_Base_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000f6a:	f000 fd1d 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f6e:	2320      	movs	r3, #32
 8000f70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4806      	ldr	r0, [pc, #24]	@ (8000f94 <MX_TIM6_Init+0x68>)
 8000f7c:	f005 fa72 	bl	8006464 <HAL_TIMEx_MasterConfigSynchronization>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000f86:	f000 fd0f 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000234 	.word	0x20000234
 8000f98:	40001000 	.word	0x40001000

08000f9c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa2:	f107 0310 	add.w	r3, r7, #16
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000fba:	4b1f      	ldr	r3, [pc, #124]	@ (8001038 <MX_TIM15_Init+0x9c>)
 8000fbc:	4a1f      	ldr	r2, [pc, #124]	@ (800103c <MX_TIM15_Init+0xa0>)
 8000fbe:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8001038 <MX_TIM15_Init+0x9c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001038 <MX_TIM15_Init+0x9c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1557;
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <MX_TIM15_Init+0x9c>)
 8000fce:	f240 6215 	movw	r2, #1557	@ 0x615
 8000fd2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd4:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <MX_TIM15_Init+0x9c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000fda:	4b17      	ldr	r3, [pc, #92]	@ (8001038 <MX_TIM15_Init+0x9c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe0:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <MX_TIM15_Init+0x9c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000fe6:	4814      	ldr	r0, [pc, #80]	@ (8001038 <MX_TIM15_Init+0x9c>)
 8000fe8:	f004 fad2 	bl	8005590 <HAL_TIM_Base_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8000ff2:	f000 fcd9 	bl	80019a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ffa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	4619      	mov	r1, r3
 8001002:	480d      	ldr	r0, [pc, #52]	@ (8001038 <MX_TIM15_Init+0x9c>)
 8001004:	f004 feac 	bl	8005d60 <HAL_TIM_ConfigClockSource>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800100e:	f000 fccb 	bl	80019a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001012:	2320      	movs	r3, #32
 8001014:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	4619      	mov	r1, r3
 800101e:	4806      	ldr	r0, [pc, #24]	@ (8001038 <MX_TIM15_Init+0x9c>)
 8001020:	f005 fa20 	bl	8006464 <HAL_TIMEx_MasterConfigSynchronization>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 800102a:	f000 fcbd 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	3720      	adds	r7, #32
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000280 	.word	0x20000280
 800103c:	40014000 	.word	0x40014000

08001040 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001044:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001046:	4a15      	ldr	r2, [pc, #84]	@ (800109c <MX_USART2_UART_Init+0x5c>)
 8001048:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800104a:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 800104c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001050:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800105e:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b0b      	ldr	r3, [pc, #44]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001076:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800107c:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001082:	4805      	ldr	r0, [pc, #20]	@ (8001098 <MX_USART2_UART_Init+0x58>)
 8001084:	f005 fa7a 	bl	800657c <HAL_UART_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800108e:	f000 fc8b 	bl	80019a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200002cc 	.word	0x200002cc
 800109c:	40004400 	.word	0x40004400

080010a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010a6:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <MX_DMA_Init+0x58>)
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	4a13      	ldr	r2, [pc, #76]	@ (80010f8 <MX_DMA_Init+0x58>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6153      	str	r3, [r2, #20]
 80010b2:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <MX_DMA_Init+0x58>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2100      	movs	r1, #0
 80010c2:	200b      	movs	r0, #11
 80010c4:	f002 fa37 	bl	8003536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010c8:	200b      	movs	r0, #11
 80010ca:	f002 fa50 	bl	800356e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	200c      	movs	r0, #12
 80010d4:	f002 fa2f 	bl	8003536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80010d8:	200c      	movs	r0, #12
 80010da:	f002 fa48 	bl	800356e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	200d      	movs	r0, #13
 80010e4:	f002 fa27 	bl	8003536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80010e8:	200d      	movs	r0, #13
 80010ea:	f002 fa40 	bl	800356e <HAL_NVIC_EnableIRQ>

}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000

080010fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001112:	4b1d      	ldr	r3, [pc, #116]	@ (8001188 <MX_GPIO_Init+0x8c>)
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	4a1c      	ldr	r2, [pc, #112]	@ (8001188 <MX_GPIO_Init+0x8c>)
 8001118:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800111c:	6153      	str	r3, [r2, #20]
 800111e:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <MX_GPIO_Init+0x8c>)
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <MX_GPIO_Init+0x8c>)
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	4a16      	ldr	r2, [pc, #88]	@ (8001188 <MX_GPIO_Init+0x8c>)
 8001130:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001134:	6153      	str	r3, [r2, #20]
 8001136:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <MX_GPIO_Init+0x8c>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <MX_GPIO_Init+0x8c>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	4a10      	ldr	r2, [pc, #64]	@ (8001188 <MX_GPIO_Init+0x8c>)
 8001148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800114c:	6153      	str	r3, [r2, #20]
 800114e:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <MX_GPIO_Init+0x8c>)
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST1_GPIO_Port, TEST1_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	2120      	movs	r1, #32
 800115e:	480b      	ldr	r0, [pc, #44]	@ (800118c <MX_GPIO_Init+0x90>)
 8001160:	f002 ff86 	bl	8004070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST1_Pin */
  GPIO_InitStruct.Pin = TEST1_Pin;
 8001164:	2320      	movs	r3, #32
 8001166:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TEST1_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	4619      	mov	r1, r3
 800117a:	4804      	ldr	r0, [pc, #16]	@ (800118c <MX_GPIO_Init+0x90>)
 800117c:	f002 fe06 	bl	8003d8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001180:	bf00      	nop
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40021000 	.word	0x40021000
 800118c:	48000400 	.word	0x48000400

08001190 <distortion_processBuffer>:

/* USER CODE BEGIN 4 */

// -------------------------------------------------------------------------------------------------------------------*/
//disto
void distortion_processBuffer(uint32_t* inputData, uint32_t* outputData){
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	@ 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]

	// si la disto est activée
	if(Disto.disto_mode)
 800119a:	4b39      	ldr	r3, [pc, #228]	@ (8001280 <distortion_processBuffer+0xf0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d068      	beq.n	8001274 <distortion_processBuffer+0xe4>
		//float clipping = Disto.clipping;

		//int16_t high_threshold = 100.0f; //10000.0f - ((clipping/100) * Disto.clipping_coef);
		//int16_t high_threshold = 100 - capacite_pF;
		//int16_t low_threshold = - high_threshold; //1950.0f; // 2900.0f pour amp500mV
		int16_t min_threshold = 20;
 80011a2:	2314      	movs	r3, #20
 80011a4:	833b      	strh	r3, [r7, #24]
		int16_t max_threshold = 50 + (4096 - pot_values[1])*200/4096;//seuil max entre 50 et 250
 80011a6:	4b37      	ldr	r3, [pc, #220]	@ (8001284 <distortion_processBuffer+0xf4>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f06f 02c7 	mvn.w	r2, #199	@ 0xc7
 80011ae:	fb02 f303 	mul.w	r3, r2, r3
 80011b2:	f503 2348 	add.w	r3, r3, #819200	@ 0xc8000
 80011b6:	0b1b      	lsrs	r3, r3, #12
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	3332      	adds	r3, #50	@ 0x32
 80011bc:	b29b      	uxth	r3, r3
 80011be:	82fb      	strh	r3, [r7, #22]
		int16_t high_threshold = max_threshold - capacite_pF*(max_threshold-min_threshold)/100;
 80011c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80011c4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001288 <distortion_processBuffer+0xf8>)
 80011cc:	6812      	ldr	r2, [r2, #0]
 80011ce:	fb02 f303 	mul.w	r3, r2, r3
 80011d2:	4a2e      	ldr	r2, [pc, #184]	@ (800128c <distortion_processBuffer+0xfc>)
 80011d4:	fb82 1203 	smull	r1, r2, r2, r3
 80011d8:	1152      	asrs	r2, r2, #5
 80011da:	17db      	asrs	r3, r3, #31
 80011dc:	1a9b      	subs	r3, r3, r2
 80011de:	b29a      	uxth	r2, r3
 80011e0:	8afb      	ldrh	r3, [r7, #22]
 80011e2:	4413      	add	r3, r2
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	82bb      	strh	r3, [r7, #20]
		int16_t low_threshold = - high_threshold; //1950.0f; // 2900.0f pour amp500mV
 80011e8:	8abb      	ldrh	r3, [r7, #20]
 80011ea:	425b      	negs	r3, r3
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	827b      	strh	r3, [r7, #18]

		for(int i = 0; i < N; i++)
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	e03a      	b.n	800126c <distortion_processBuffer+0xdc>
		{
			// get current sample
			int32_t sample = (int32_t)inputData[i];
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	60fb      	str	r3, [r7, #12]

			int32_t AC_signal = sample - OFFSET_SIGNAL;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	f2a3 73bc 	subw	r3, r3, #1980	@ 0x7bc
 8001208:	60bb      	str	r3, [r7, #8]

			//on applique le gains
			int16_t AC_signal_amplified = (int16_t)((float)AC_signal * (Disto.gain / 100.0f));
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001214:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <distortion_processBuffer+0xf0>)
 8001216:	edd3 6a02 	vldr	s13, [r3, #8]
 800121a:	ed9f 6a1d 	vldr	s12, [pc, #116]	@ 8001290 <distortion_processBuffer+0x100>
 800121e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001226:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800122a:	ee17 3a90 	vmov	r3, s15
 800122e:	837b      	strh	r3, [r7, #26]

			 // clipping
			 if (AC_signal_amplified > high_threshold)
 8001230:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001234:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001238:	429a      	cmp	r2, r3
 800123a:	dd02      	ble.n	8001242 <distortion_processBuffer+0xb2>
			 {
				 AC_signal_amplified = high_threshold;
 800123c:	8abb      	ldrh	r3, [r7, #20]
 800123e:	837b      	strh	r3, [r7, #26]
 8001240:	e007      	b.n	8001252 <distortion_processBuffer+0xc2>
			  }
			  else if (AC_signal_amplified < low_threshold) //
 8001242:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001246:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800124a:	429a      	cmp	r2, r3
 800124c:	da01      	bge.n	8001252 <distortion_processBuffer+0xc2>
			  {
				  AC_signal_amplified = low_threshold;
 800124e:	8a7b      	ldrh	r3, [r7, #18]
 8001250:	837b      	strh	r3, [r7, #26]
			  }

			// send to output
			outputData[i] = (int32_t)AC_signal_amplified + OFFSET_SIGNAL;
 8001252:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001256:	f203 71bc 	addw	r1, r3, #1980	@ 0x7bc
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	4413      	add	r3, r2
 8001262:	460a      	mov	r2, r1
 8001264:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < N; i++)
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3301      	adds	r3, #1
 800126a:	61fb      	str	r3, [r7, #28]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001272:	dbc0      	blt.n	80011f6 <distortion_processBuffer+0x66>
		}
	}
}
 8001274:	bf00      	nop
 8001276:	3724      	adds	r7, #36	@ 0x24
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	20000000 	.word	0x20000000
 8001284:	200012f4 	.word	0x200012f4
 8001288:	2000261c 	.word	0x2000261c
 800128c:	51eb851f 	.word	0x51eb851f
 8001290:	42c80000 	.word	0x42c80000

08001294 <directloopback_processBuffer>:

void directloopback_processBuffer(uint32_t* inputData, uint32_t* outputData){
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
		for(int i = 0; i < N; i++)
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	e00c      	b.n	80012be <directloopback_processBuffer+0x2a>
		{
			outputData[i] = inputData[i];
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	441a      	add	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	6839      	ldr	r1, [r7, #0]
 80012b2:	440b      	add	r3, r1
 80012b4:	6812      	ldr	r2, [r2, #0]
 80012b6:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < N; i++)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3301      	adds	r3, #1
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80012c4:	dbee      	blt.n	80012a4 <directloopback_processBuffer+0x10>
		}
}
 80012c6:	bf00      	nop
 80012c8:	bf00      	nop
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <tremolo_processBuffer>:
	}
}*/

//tremolo --------------------------------------------------------------------------------
void tremolo_processBuffer(uint32_t* inputData, uint32_t* outputData)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
	if(Tremolo.tremolo_mode)
 80012de:	4b53      	ldr	r3, [pc, #332]	@ (800142c <tremolo_processBuffer+0x158>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 809c 	beq.w	8001420 <tremolo_processBuffer+0x14c>
	{
		//float phase = 0; // à mettre dans la structure
		float lfoFreq = 1 + (4095.0f - pot_values[1])*100.0f/4096.0f;//Tremolo.rate;
 80012e8:	4b51      	ldr	r3, [pc, #324]	@ (8001430 <tremolo_processBuffer+0x15c>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012f4:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001434 <tremolo_processBuffer+0x160>
 80012f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012fc:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001438 <tremolo_processBuffer+0x164>
 8001300:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001304:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 800143c <tremolo_processBuffer+0x168>
 8001308:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800130c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001310:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001314:	edc7 7a03 	vstr	s15, [r7, #12]
		float lfoDepth = 0.4f + (100.0f-capacite_pF)/200.0f;//(Tremolo.depth/100.0f);
 8001318:	4b49      	ldr	r3, [pc, #292]	@ (8001440 <tremolo_processBuffer+0x16c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	ee07 3a90 	vmov	s15, r3
 8001320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001324:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8001438 <tremolo_processBuffer+0x164>
 8001328:	ee37 7a67 	vsub.f32	s14, s14, s15
 800132c:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8001444 <tremolo_processBuffer+0x170>
 8001330:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001334:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8001448 <tremolo_processBuffer+0x174>
 8001338:	ee77 7a87 	vadd.f32	s15, s15, s14
 800133c:	edc7 7a05 	vstr	s15, [r7, #20]
		if(lfoDepth<0.5f)
 8001340:	edd7 7a05 	vldr	s15, [r7, #20]
 8001344:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001348:	eef4 7ac7 	vcmpe.f32	s15, s14
 800134c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001350:	d502      	bpl.n	8001358 <tremolo_processBuffer+0x84>
			lfoDepth = 0.5f;
 8001352:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8001356:	617b      	str	r3, [r7, #20]
		//static float phase = 0.0f;
		//float before_sample;
		float sample;//, cosvalue;
		//cosfrequency = lfoFreq;
		for(int i = 0; i < N ; i++) //offset, offset+halfN
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	e05c      	b.n	8001418 <tremolo_processBuffer+0x144>
			//counter_cos = fmodf(counter_cos + cosfrequency*0.0000002270f, 6.28f);
			//cosvalue = cosf(counter_cos);
			//float sample = inputData[i];

			//cosvalue = cos_values[counter_cos];
			if(internal_counter_cos >= (int)(1050/lfoFreq))//21 need to be the center, slowest is
 800135e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800144c <tremolo_processBuffer+0x178>
 8001362:	ed97 7a03 	vldr	s14, [r7, #12]
 8001366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800136a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800136e:	ee17 2a90 	vmov	r2, s15
 8001372:	4b37      	ldr	r3, [pc, #220]	@ (8001450 <tremolo_processBuffer+0x17c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	dc07      	bgt.n	800138a <tremolo_processBuffer+0xb6>
			{
				counter_cos++;
 800137a:	4b36      	ldr	r3, [pc, #216]	@ (8001454 <tremolo_processBuffer+0x180>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	3301      	adds	r3, #1
 8001380:	4a34      	ldr	r2, [pc, #208]	@ (8001454 <tremolo_processBuffer+0x180>)
 8001382:	6013      	str	r3, [r2, #0]
				internal_counter_cos = 0;
 8001384:	4b32      	ldr	r3, [pc, #200]	@ (8001450 <tremolo_processBuffer+0x17c>)
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
			}
			internal_counter_cos++;
 800138a:	4b31      	ldr	r3, [pc, #196]	@ (8001450 <tremolo_processBuffer+0x17c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	3301      	adds	r3, #1
 8001390:	4a2f      	ldr	r2, [pc, #188]	@ (8001450 <tremolo_processBuffer+0x17c>)
 8001392:	6013      	str	r3, [r2, #0]

			//la variable a tendance à passer à une valeur très grande
			if(counter_cos == 360)
 8001394:	4b2f      	ldr	r3, [pc, #188]	@ (8001454 <tremolo_processBuffer+0x180>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 800139c:	d102      	bne.n	80013a4 <tremolo_processBuffer+0xd0>
				counter_cos = 0;
 800139e:	4b2d      	ldr	r3, [pc, #180]	@ (8001454 <tremolo_processBuffer+0x180>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]

			sample = ((float)inputData[i] - (float)OFFSET_SIGNAL);
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	4413      	add	r3, r2
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	ee07 3a90 	vmov	s15, r3
 80013b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013b6:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001458 <tremolo_processBuffer+0x184>
 80013ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013be:	edc7 7a02 	vstr	s15, [r7, #8]
			sample *= ((1.0f-lfoDepth) + lfoDepth * cos_values[counter_cos]);
 80013c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80013ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013ce:	4b21      	ldr	r3, [pc, #132]	@ (8001454 <tremolo_processBuffer+0x180>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a22      	ldr	r2, [pc, #136]	@ (800145c <tremolo_processBuffer+0x188>)
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	edd3 6a00 	vldr	s13, [r3]
 80013dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80013e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80013ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f0:	edc7 7a02 	vstr	s15, [r7, #8]
			//outputData[i] = 50*cosvalue + 1000;//
			outputData[i] = (uint32_t)(sample + OFFSET_SIGNAL);//(uint32_t)(500*cosvalue + 1000);
 80013f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80013f8:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001458 <tremolo_processBuffer+0x184>
 80013fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	4413      	add	r3, r2
 8001408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800140c:	ee17 2a90 	vmov	r2, s15
 8001410:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < N ; i++) //offset, offset+halfN
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	3301      	adds	r3, #1
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800141e:	db9e      	blt.n	800135e <tremolo_processBuffer+0x8a>
			//t =  fmodf(t + (lfoFreq / ((float)fe)), 3.14f);

		}

	}
}
 8001420:	bf00      	nop
 8001422:	371c      	adds	r7, #28
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	20000028 	.word	0x20000028
 8001430:	200012f4 	.word	0x200012f4
 8001434:	457ff000 	.word	0x457ff000
 8001438:	42c80000 	.word	0x42c80000
 800143c:	45800000 	.word	0x45800000
 8001440:	2000261c 	.word	0x2000261c
 8001444:	43480000 	.word	0x43480000
 8001448:	3ecccccd 	.word	0x3ecccccd
 800144c:	44834000 	.word	0x44834000
 8001450:	20001ac8 	.word	0x20001ac8
 8001454:	20001ac4 	.word	0x20001ac4
 8001458:	44f78000 	.word	0x44f78000
 800145c:	20001acc 	.word	0x20001acc

08001460 <new_bandpass>:
static float currentCutoff = 440.0f; // fréquence de coupure du filtre
static float qFactor = 2.3f; // facteur de qualité du filtre


void new_bandpass()
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
    //int omega_deg = 360.0f*PI * currentCutoff / 44100.0f;//simplif du 2 dans 360/2Pi * 2.0f
    float omega = 2.0f*(float)PI*currentCutoff / 44100.0f;
 8001466:	4b27      	ldr	r3, [pc, #156]	@ (8001504 <new_bandpass+0xa4>)
 8001468:	edd3 7a00 	vldr	s15, [r3]
 800146c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001508 <new_bandpass+0xa8>
 8001470:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001474:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800150c <new_bandpass+0xac>
 8001478:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800147c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cosomega = (float)cosf((float)omega); //arm_cos_f32
 8001480:	ed97 0a03 	vldr	s0, [r7, #12]
 8001484:	f005 fc46 	bl	8006d14 <cosf>
 8001488:	ed87 0a02 	vstr	s0, [r7, #8]
    //Le mieux serait d'utiliser la matrice de cos pour le calculer

   // float cosomega = cos_values[360*omega/(2*PI)] //arm_cos_f32

    //float alpha = sin_values[omega_deg] / (2.0f * qFactor); //arm_sin_f32
	float alpha = (float)sinf((float)omega) / (2.0f * qFactor);
 800148c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001490:	f005 fc84 	bl	8006d9c <sinf>
 8001494:	eef0 6a40 	vmov.f32	s13, s0
 8001498:	4b1d      	ldr	r3, [pc, #116]	@ (8001510 <new_bandpass+0xb0>)
 800149a:	edd3 7a00 	vldr	s15, [r3]
 800149e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80014a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014a6:	edc7 7a01 	vstr	s15, [r7, #4]

    bp_b0 = alpha;
 80014aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001514 <new_bandpass+0xb4>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6013      	str	r3, [r2, #0]
    bp_b1 = 0;
 80014b0:	4b19      	ldr	r3, [pc, #100]	@ (8001518 <new_bandpass+0xb8>)
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
    bp_b2 = -alpha;
 80014b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80014bc:	eef1 7a67 	vneg.f32	s15, s15
 80014c0:	4b16      	ldr	r3, [pc, #88]	@ (800151c <new_bandpass+0xbc>)
 80014c2:	edc3 7a00 	vstr	s15, [r3]
    bp_a0 = 1 + alpha;
 80014c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80014ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014d2:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <new_bandpass+0xc0>)
 80014d4:	edc3 7a00 	vstr	s15, [r3]
    bp_a1 = -2 * cosomega;
 80014d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80014dc:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80014e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001524 <new_bandpass+0xc4>)
 80014e6:	edc3 7a00 	vstr	s15, [r3]
    bp_a2 = 1 - alpha;
 80014ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80014ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80014f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <new_bandpass+0xc8>)
 80014f8:	edc3 7a00 	vstr	s15, [r3]
}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000038 	.word	0x20000038
 8001508:	40c90e56 	.word	0x40c90e56
 800150c:	472c4400 	.word	0x472c4400
 8001510:	2000003c 	.word	0x2000003c
 8001514:	20002634 	.word	0x20002634
 8001518:	20002638 	.word	0x20002638
 800151c:	2000263c 	.word	0x2000263c
 8001520:	20002628 	.word	0x20002628
 8001524:	2000262c 	.word	0x2000262c
 8001528:	20002630 	.word	0x20002630

0800152c <apply_bandpass>:

int16_t apply_bandpass(int16_t inSample)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	80fb      	strh	r3, [r7, #6]
    float x0 = (float)inSample;
 8001536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001542:	edc7 7a03 	vstr	s15, [r7, #12]
    float result =
        (bp_b0 / bp_a0) * x0 +
 8001546:	4b32      	ldr	r3, [pc, #200]	@ (8001610 <apply_bandpass+0xe4>)
 8001548:	edd3 6a00 	vldr	s13, [r3]
 800154c:	4b31      	ldr	r3, [pc, #196]	@ (8001614 <apply_bandpass+0xe8>)
 800154e:	edd3 7a00 	vldr	s15, [r3]
 8001552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001556:	edd7 7a03 	vldr	s15, [r7, #12]
 800155a:	ee27 7a27 	vmul.f32	s14, s14, s15
        (bp_b1 / bp_a0) * bp_x1 +
 800155e:	4b2e      	ldr	r3, [pc, #184]	@ (8001618 <apply_bandpass+0xec>)
 8001560:	ed93 6a00 	vldr	s12, [r3]
 8001564:	4b2b      	ldr	r3, [pc, #172]	@ (8001614 <apply_bandpass+0xe8>)
 8001566:	edd3 7a00 	vldr	s15, [r3]
 800156a:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800156e:	4b2b      	ldr	r3, [pc, #172]	@ (800161c <apply_bandpass+0xf0>)
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (bp_b0 / bp_a0) * x0 +
 8001578:	ee37 7a27 	vadd.f32	s14, s14, s15
        (bp_b2 / bp_a0) * bp_x2 -
 800157c:	4b28      	ldr	r3, [pc, #160]	@ (8001620 <apply_bandpass+0xf4>)
 800157e:	ed93 6a00 	vldr	s12, [r3]
 8001582:	4b24      	ldr	r3, [pc, #144]	@ (8001614 <apply_bandpass+0xe8>)
 8001584:	edd3 7a00 	vldr	s15, [r3]
 8001588:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800158c:	4b25      	ldr	r3, [pc, #148]	@ (8001624 <apply_bandpass+0xf8>)
 800158e:	edd3 7a00 	vldr	s15, [r3]
 8001592:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (bp_b1 / bp_a0) * bp_x1 +
 8001596:	ee37 7a27 	vadd.f32	s14, s14, s15
        (bp_a1 / bp_a0) * bp_y1 -
 800159a:	4b23      	ldr	r3, [pc, #140]	@ (8001628 <apply_bandpass+0xfc>)
 800159c:	ed93 6a00 	vldr	s12, [r3]
 80015a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001614 <apply_bandpass+0xe8>)
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80015aa:	4b20      	ldr	r3, [pc, #128]	@ (800162c <apply_bandpass+0x100>)
 80015ac:	edd3 7a00 	vldr	s15, [r3]
 80015b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
        (bp_b2 / bp_a0) * bp_x2 -
 80015b4:	ee37 7a67 	vsub.f32	s14, s14, s15
        (bp_a2 / bp_a0) * bp_y2;
 80015b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001630 <apply_bandpass+0x104>)
 80015ba:	ed93 6a00 	vldr	s12, [r3]
 80015be:	4b15      	ldr	r3, [pc, #84]	@ (8001614 <apply_bandpass+0xe8>)
 80015c0:	edd3 7a00 	vldr	s15, [r3]
 80015c4:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80015c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001634 <apply_bandpass+0x108>)
 80015ca:	edd3 7a00 	vldr	s15, [r3]
 80015ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float result =
 80015d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015d6:	edc7 7a02 	vstr	s15, [r7, #8]

    // shift x1 to x2, sample to x1
    // shift y1 to y2, result to y1
    // simulate delay!!
    bp_x2 = bp_x1;
 80015da:	4b10      	ldr	r3, [pc, #64]	@ (800161c <apply_bandpass+0xf0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a11      	ldr	r2, [pc, #68]	@ (8001624 <apply_bandpass+0xf8>)
 80015e0:	6013      	str	r3, [r2, #0]
    bp_x1 = x0;
 80015e2:	4a0e      	ldr	r2, [pc, #56]	@ (800161c <apply_bandpass+0xf0>)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6013      	str	r3, [r2, #0]
    bp_y2 = bp_y1;
 80015e8:	4b10      	ldr	r3, [pc, #64]	@ (800162c <apply_bandpass+0x100>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a11      	ldr	r2, [pc, #68]	@ (8001634 <apply_bandpass+0x108>)
 80015ee:	6013      	str	r3, [r2, #0]
    bp_y1 = result;
 80015f0:	4a0e      	ldr	r2, [pc, #56]	@ (800162c <apply_bandpass+0x100>)
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	6013      	str	r3, [r2, #0]

    return (int16_t)result;
 80015f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80015fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015fe:	ee17 3a90 	vmov	r3, s15
 8001602:	b21b      	sxth	r3, r3
}
 8001604:	4618      	mov	r0, r3
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	20002634 	.word	0x20002634
 8001614:	20002628 	.word	0x20002628
 8001618:	20002638 	.word	0x20002638
 800161c:	20002640 	.word	0x20002640
 8001620:	2000263c 	.word	0x2000263c
 8001624:	20002644 	.word	0x20002644
 8001628:	2000262c 	.word	0x2000262c
 800162c:	20002648 	.word	0x20002648
 8001630:	20002630 	.word	0x20002630
 8001634:	2000264c 	.word	0x2000264c

08001638 <wahwah_processBuffer>:

void wahwah_processBuffer(uint32_t* inputData, uint32_t* outputData)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
	if(Wahwah.wahwah_mode)
 8001642:	4b35      	ldr	r3, [pc, #212]	@ (8001718 <wahwah_processBuffer+0xe0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d061      	beq.n	800170e <wahwah_processBuffer+0xd6>
	{
		//static float phase = 0;
		//float lfoFreq = Wahwah.rate;
		//float lfoDepth = Wahwah.depth/100.0f;
		float G = (float)(4096 - pot_values[1])*5.0f/4096.0f;//gain entre 0 et 5
 800164a:	4b34      	ldr	r3, [pc, #208]	@ (800171c <wahwah_processBuffer+0xe4>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8001652:	ee07 3a90 	vmov	s15, r3
 8001656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800165a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800165e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001662:	eddf 6a2f 	vldr	s13, [pc, #188]	@ 8001720 <wahwah_processBuffer+0xe8>
 8001666:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800166a:	edc7 7a04 	vstr	s15, [r7, #16]

		for(int i = 0; i < N; i++)
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	e048      	b.n	8001706 <wahwah_processBuffer+0xce>
			// get triangle lfo sample
			//float lfoSample = phase < 0.5 ? phase * 4 - 1 : 3 - 4 * phase;

			// modulate bandpass cutoff
			//currentCutoff = (float)((lfoSample * lfoDepth * centreFreq) + centreFreq);
			currentCutoff = (float)(Wahwah.minFreq + (Wahwah.maxFreq - Wahwah.minFreq)*capacite_pF / 100.0f);//T
 8001674:	4b28      	ldr	r3, [pc, #160]	@ (8001718 <wahwah_processBuffer+0xe0>)
 8001676:	ed93 7a03 	vldr	s14, [r3, #12]
 800167a:	4b27      	ldr	r3, [pc, #156]	@ (8001718 <wahwah_processBuffer+0xe0>)
 800167c:	edd3 6a04 	vldr	s13, [r3, #16]
 8001680:	4b25      	ldr	r3, [pc, #148]	@ (8001718 <wahwah_processBuffer+0xe0>)
 8001682:	edd3 7a03 	vldr	s15, [r3, #12]
 8001686:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800168a:	4b26      	ldr	r3, [pc, #152]	@ (8001724 <wahwah_processBuffer+0xec>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	ee07 3a90 	vmov	s15, r3
 8001692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001696:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800169a:	ed9f 6a23 	vldr	s12, [pc, #140]	@ 8001728 <wahwah_processBuffer+0xf0>
 800169e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80016a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a6:	4b21      	ldr	r3, [pc, #132]	@ (800172c <wahwah_processBuffer+0xf4>)
 80016a8:	edc3 7a00 	vstr	s15, [r3]

			// update bandpass filter
			new_bandpass();
 80016ac:	f7ff fed8 	bl	8001460 <new_bandpass>

			// get current sample
			int16_t sample = (int16_t) (inputData[i] - OFFSET_SIGNAL);
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	4413      	add	r3, r2
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	f2a3 73bc 	subw	r3, r3, #1980	@ 0x7bc
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	81fb      	strh	r3, [r7, #14]

			// apply bandpass filter to current sample
			sample = apply_bandpass(sample);
 80016c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff2f 	bl	800152c <apply_bandpass>
 80016ce:	4603      	mov	r3, r0
 80016d0:	81fb      	strh	r3, [r7, #14]

			// send to output
			outputData[i] = (uint32_t) ((float)sample*G + OFFSET_SIGNAL);
 80016d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016d6:	ee07 3a90 	vmov	s15, r3
 80016da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016de:	edd7 7a04 	vldr	s15, [r7, #16]
 80016e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001730 <wahwah_processBuffer+0xf8>
 80016ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	4413      	add	r3, r2
 80016f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016fa:	ee17 2a90 	vmov	r2, s15
 80016fe:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < N; i++)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	3301      	adds	r3, #1
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800170c:	dbb2      	blt.n	8001674 <wahwah_processBuffer+0x3c>

		}
	}
}
 800170e:	bf00      	nop
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000010 	.word	0x20000010
 800171c:	200012f4 	.word	0x200012f4
 8001720:	45800000 	.word	0x45800000
 8001724:	2000261c 	.word	0x2000261c
 8001728:	42c80000 	.word	0x42c80000
 800172c:	20000038 	.word	0x20000038
 8001730:	44f78000 	.word	0x44f78000

08001734 <HAL_ADC_ConvCpltCallback>:

}*/

// le buffer plein
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	if(hadc == &hadc1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a2a      	ldr	r2, [pc, #168]	@ (80017e8 <HAL_ADC_ConvCpltCallback+0xb4>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d14c      	bne.n	80017de <HAL_ADC_ConvCpltCallback+0xaa>
	{
		HAL_GPIO_TogglePin(TEST1_GPIO_Port, TEST1_Pin);
 8001744:	2120      	movs	r1, #32
 8001746:	4829      	ldr	r0, [pc, #164]	@ (80017ec <HAL_ADC_ConvCpltCallback+0xb8>)
 8001748:	f002 fcaa 	bl	80040a0 <HAL_GPIO_TogglePin>
		//distortion_processBuffer(adc_buffer, dac_buffer);
		//wahwah_processBuffer(adc_buffer, dac_buffer);//ATTENTION, bloque le compteur pour le conditionneur
		//tremolo_processBuffer(adc_buffer, dac_buffer);
		//directloopback_processBuffer(adc_buffer, dac_buffer);

		if( pot_values[0] >= 3750)//
 800174c:	4b28      	ldr	r3, [pc, #160]	@ (80017f0 <HAL_ADC_ConvCpltCallback+0xbc>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f640 62a5 	movw	r2, #3749	@ 0xea5
 8001754:	4293      	cmp	r3, r2
 8001756:	d904      	bls.n	8001762 <HAL_ADC_ConvCpltCallback+0x2e>
			/*for( int n=0; n<N;n++)
			{
				 dac_buffer[n] = adc_buffer[n];

			}*/
			directloopback_processBuffer(adc_buffer, dac_buffer);
 8001758:	4926      	ldr	r1, [pc, #152]	@ (80017f4 <HAL_ADC_ConvCpltCallback+0xc0>)
 800175a:	4827      	ldr	r0, [pc, #156]	@ (80017f8 <HAL_ADC_ConvCpltCallback+0xc4>)
 800175c:	f7ff fd9a 	bl	8001294 <directloopback_processBuffer>
			pot_values[0] = HAL_ADC_GetValue(&hadc2);

		pot_selector = !pot_selector;
	}*/

}
 8001760:	e03d      	b.n	80017de <HAL_ADC_ConvCpltCallback+0xaa>
		else if(3750 > pot_values[0] && pot_values[0] >= 3295)
 8001762:	4b23      	ldr	r3, [pc, #140]	@ (80017f0 <HAL_ADC_ConvCpltCallback+0xbc>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f640 62a5 	movw	r2, #3749	@ 0xea5
 800176a:	4293      	cmp	r3, r2
 800176c:	d80a      	bhi.n	8001784 <HAL_ADC_ConvCpltCallback+0x50>
 800176e:	4b20      	ldr	r3, [pc, #128]	@ (80017f0 <HAL_ADC_ConvCpltCallback+0xbc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f640 42de 	movw	r2, #3294	@ 0xcde
 8001776:	4293      	cmp	r3, r2
 8001778:	d904      	bls.n	8001784 <HAL_ADC_ConvCpltCallback+0x50>
			distortion_processBuffer(adc_buffer, dac_buffer);
 800177a:	491e      	ldr	r1, [pc, #120]	@ (80017f4 <HAL_ADC_ConvCpltCallback+0xc0>)
 800177c:	481e      	ldr	r0, [pc, #120]	@ (80017f8 <HAL_ADC_ConvCpltCallback+0xc4>)
 800177e:	f7ff fd07 	bl	8001190 <distortion_processBuffer>
 8001782:	e02c      	b.n	80017de <HAL_ADC_ConvCpltCallback+0xaa>
		else if(3295 > pot_values[0] && pot_values[0] >= 2470)
 8001784:	4b1a      	ldr	r3, [pc, #104]	@ (80017f0 <HAL_ADC_ConvCpltCallback+0xbc>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f640 42de 	movw	r2, #3294	@ 0xcde
 800178c:	4293      	cmp	r3, r2
 800178e:	d80a      	bhi.n	80017a6 <HAL_ADC_ConvCpltCallback+0x72>
 8001790:	4b17      	ldr	r3, [pc, #92]	@ (80017f0 <HAL_ADC_ConvCpltCallback+0xbc>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f640 12a5 	movw	r2, #2469	@ 0x9a5
 8001798:	4293      	cmp	r3, r2
 800179a:	d904      	bls.n	80017a6 <HAL_ADC_ConvCpltCallback+0x72>
			tremolo_processBuffer(adc_buffer, dac_buffer);
 800179c:	4915      	ldr	r1, [pc, #84]	@ (80017f4 <HAL_ADC_ConvCpltCallback+0xc0>)
 800179e:	4816      	ldr	r0, [pc, #88]	@ (80017f8 <HAL_ADC_ConvCpltCallback+0xc4>)
 80017a0:	f7ff fd98 	bl	80012d4 <tremolo_processBuffer>
 80017a4:	e01b      	b.n	80017de <HAL_ADC_ConvCpltCallback+0xaa>
		else if(2470 >= pot_values[0] && pot_values[0] >= 1700)
 80017a6:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <HAL_ADC_ConvCpltCallback+0xbc>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f640 12a6 	movw	r2, #2470	@ 0x9a6
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d80a      	bhi.n	80017c8 <HAL_ADC_ConvCpltCallback+0x94>
 80017b2:	4b0f      	ldr	r3, [pc, #60]	@ (80017f0 <HAL_ADC_ConvCpltCallback+0xbc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d904      	bls.n	80017c8 <HAL_ADC_ConvCpltCallback+0x94>
			wahwah_processBuffer(adc_buffer, dac_buffer);
 80017be:	490d      	ldr	r1, [pc, #52]	@ (80017f4 <HAL_ADC_ConvCpltCallback+0xc0>)
 80017c0:	480d      	ldr	r0, [pc, #52]	@ (80017f8 <HAL_ADC_ConvCpltCallback+0xc4>)
 80017c2:	f7ff ff39 	bl	8001638 <wahwah_processBuffer>
 80017c6:	e00a      	b.n	80017de <HAL_ADC_ConvCpltCallback+0xaa>
		else if(1700 > pot_values[0])
 80017c8:	4b09      	ldr	r3, [pc, #36]	@ (80017f0 <HAL_ADC_ConvCpltCallback+0xbc>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d804      	bhi.n	80017de <HAL_ADC_ConvCpltCallback+0xaa>
			directloopback_processBuffer(adc_buffer, dac_buffer);
 80017d4:	4907      	ldr	r1, [pc, #28]	@ (80017f4 <HAL_ADC_ConvCpltCallback+0xc0>)
 80017d6:	4808      	ldr	r0, [pc, #32]	@ (80017f8 <HAL_ADC_ConvCpltCallback+0xc4>)
 80017d8:	f7ff fd5c 	bl	8001294 <directloopback_processBuffer>
}
 80017dc:	e7ff      	b.n	80017de <HAL_ADC_ConvCpltCallback+0xaa>
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000068 	.word	0x20000068
 80017ec:	48000400 	.word	0x48000400
 80017f0:	200012f4 	.word	0x200012f4
 80017f4:	20000b24 	.word	0x20000b24
 80017f8:	20000354 	.word	0x20000354
 80017fc:	00000000 	.word	0x00000000

08001800 <calculate_capacity>:

int calculate_capacity(int period) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
    // Calcul de la capacité pF en fonction de la période ms
	//int temp_capa = 0.000975619084 * period - 28.122;
	int temp_capa = 0.000975619084 * period - 49;
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7fe fe2f 	bl	800046c <__aeabi_i2d>
 800180e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001878 <calculate_capacity+0x78>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	f7fe fe94 	bl	8000540 <__aeabi_dmul>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <calculate_capacity+0x70>)
 8001826:	f7fe fcd3 	bl	80001d0 <__aeabi_dsub>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4610      	mov	r0, r2
 8001830:	4619      	mov	r1, r3
 8001832:	f7ff f897 	bl	8000964 <__aeabi_d2iz>
 8001836:	4603      	mov	r3, r0
 8001838:	60fb      	str	r3, [r7, #12]
	if(temp_capa<0)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2b00      	cmp	r3, #0
 800183e:	da01      	bge.n	8001844 <calculate_capacity+0x44>
		temp_capa = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
	temp_capa = temp_capa*100 / 240;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2264      	movs	r2, #100	@ 0x64
 8001848:	fb02 f303 	mul.w	r3, r2, r3
 800184c:	4a09      	ldr	r2, [pc, #36]	@ (8001874 <calculate_capacity+0x74>)
 800184e:	fb82 1203 	smull	r1, r2, r2, r3
 8001852:	441a      	add	r2, r3
 8001854:	11d2      	asrs	r2, r2, #7
 8001856:	17db      	asrs	r3, r3, #31
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	60fb      	str	r3, [r7, #12]
	if(temp_capa>100)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2b64      	cmp	r3, #100	@ 0x64
 8001860:	dd01      	ble.n	8001866 <calculate_capacity+0x66>
			temp_capa = 100;//On mets entre 0 et 100 ici
 8001862:	2364      	movs	r3, #100	@ 0x64
 8001864:	60fb      	str	r3, [r7, #12]
    return temp_capa ;
 8001866:	68fb      	ldr	r3, [r7, #12]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40488000 	.word	0x40488000
 8001874:	88888889 	.word	0x88888889
 8001878:	0791af8f 	.word	0x0791af8f
 800187c:	3f4ff816 	.word	0x3f4ff816

08001880 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a30      	ldr	r2, [pc, #192]	@ (800194c <HAL_TIM_IC_CaptureCallback+0xcc>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d159      	bne.n	8001944 <HAL_TIM_IC_CaptureCallback+0xc4>
	{
		if(i){
 8001890:	4b2f      	ldr	r3, [pc, #188]	@ (8001950 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00a      	beq.n	80018b0 <HAL_TIM_IC_CaptureCallback+0x30>
			last_clock = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800189a:	2104      	movs	r1, #4
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f004 fb29 	bl	8005ef4 <HAL_TIM_ReadCapturedValue>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4a2b      	ldr	r2, [pc, #172]	@ (8001954 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80018a6:	6013      	str	r3, [r2, #0]
			i=0;
 80018a8:	4b29      	ldr	r3, [pc, #164]	@ (8001950 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
 80018ae:	e029      	b.n	8001904 <HAL_TIM_IC_CaptureCallback+0x84>
		}
		else if(!i){
 80018b0:	4b27      	ldr	r3, [pc, #156]	@ (8001950 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d124      	bne.n	8001904 <HAL_TIM_IC_CaptureCallback+0x84>
			current_clock =	HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80018ba:	2104      	movs	r1, #4
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f004 fb19 	bl	8005ef4 <HAL_TIM_ReadCapturedValue>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4a24      	ldr	r2, [pc, #144]	@ (8001958 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80018c6:	6013      	str	r3, [r2, #0]
			difference = current_clock - last_clock;
 80018c8:	4b23      	ldr	r3, [pc, #140]	@ (8001958 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b21      	ldr	r3, [pc, #132]	@ (8001954 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b21      	ldr	r3, [pc, #132]	@ (800195c <HAL_TIM_IC_CaptureCallback+0xdc>)
 80018d6:	601a      	str	r2, [r3, #0]
			if(difference != 0)
 80018d8:	4b20      	ldr	r3, [pc, #128]	@ (800195c <HAL_TIM_IC_CaptureCallback+0xdc>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d030      	beq.n	8001942 <HAL_TIM_IC_CaptureCallback+0xc2>
				frequence = 32000000/difference;
 80018e0:	4b1e      	ldr	r3, [pc, #120]	@ (800195c <HAL_TIM_IC_CaptureCallback+0xdc>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a1e      	ldr	r2, [pc, #120]	@ (8001960 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80018e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80018ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001964 <HAL_TIM_IC_CaptureCallback+0xe4>)
 80018ec:	6013      	str	r3, [r2, #0]
			else
				return;
			periode_ns = difference*32;
 80018ee:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <HAL_TIM_IC_CaptureCallback+0xdc>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	015b      	lsls	r3, r3, #5
 80018f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001968 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80018f6:	6013      	str	r3, [r2, #0]
			i=1;
 80018f8:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <HAL_TIM_IC_CaptureCallback+0xd0>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]
			calcul_open = 1;
 80018fe:	4b1b      	ldr	r3, [pc, #108]	@ (800196c <HAL_TIM_IC_CaptureCallback+0xec>)
 8001900:	2201      	movs	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
		}
		if (calcul_open){
 8001904:	4b19      	ldr	r3, [pc, #100]	@ (800196c <HAL_TIM_IC_CaptureCallback+0xec>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d01a      	beq.n	8001944 <HAL_TIM_IC_CaptureCallback+0xc4>
			int temp_capa;
			temp_capa = calculate_capacity(periode_ns);
 800190e:	4b16      	ldr	r3, [pc, #88]	@ (8001968 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff ff74 	bl	8001800 <calculate_capacity>
 8001918:	60f8      	str	r0, [r7, #12]
			if(temp_capa < 500 && temp_capa > -100)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001920:	da07      	bge.n	8001932 <HAL_TIM_IC_CaptureCallback+0xb2>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f113 0f63 	cmn.w	r3, #99	@ 0x63
 8001928:	db03      	blt.n	8001932 <HAL_TIM_IC_CaptureCallback+0xb2>
				capacite_pF = temp_capa;
 800192a:	4a11      	ldr	r2, [pc, #68]	@ (8001970 <HAL_TIM_IC_CaptureCallback+0xf0>)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	e003      	b.n	800193a <HAL_TIM_IC_CaptureCallback+0xba>
			else
			{
				HAL_GPIO_TogglePin(TEST1_GPIO_Port, TEST1_Pin);
 8001932:	2120      	movs	r1, #32
 8001934:	480f      	ldr	r0, [pc, #60]	@ (8001974 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001936:	f002 fbb3 	bl	80040a0 <HAL_GPIO_TogglePin>
			}
			calcul_open = 0;
 800193a:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <HAL_TIM_IC_CaptureCallback+0xec>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	e000      	b.n	8001944 <HAL_TIM_IC_CaptureCallback+0xc4>
				return;
 8001942:	bf00      	nop
		}
	}
}
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200001e8 	.word	0x200001e8
 8001950:	20002614 	.word	0x20002614
 8001954:	2000260c 	.word	0x2000260c
 8001958:	20002610 	.word	0x20002610
 800195c:	20002618 	.word	0x20002618
 8001960:	01e84800 	.word	0x01e84800
 8001964:	20002620 	.word	0x20002620
 8001968:	20002624 	.word	0x20002624
 800196c:	20002615 	.word	0x20002615
 8001970:	2000261c 	.word	0x2000261c
 8001974:	48000400 	.word	0x48000400

08001978 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a06      	ldr	r2, [pc, #24]	@ (800199c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d104      	bne.n	8001992 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		//HAL_ADC_Start_IT(&hadc2);
		  HAL_ADC_Start_DMA(&hadc2, pot_values, 2);
 8001988:	2202      	movs	r2, #2
 800198a:	4905      	ldr	r1, [pc, #20]	@ (80019a0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800198c:	4805      	ldr	r0, [pc, #20]	@ (80019a4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800198e:	f000 fd47 	bl	8002420 <HAL_ADC_Start_DMA>
	}
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000234 	.word	0x20000234
 80019a0:	200012f4 	.word	0x200012f4
 80019a4:	200000b8 	.word	0x200000b8

080019a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ac:	b672      	cpsid	i
}
 80019ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <Error_Handler+0x8>

080019b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ba:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <HAL_MspInit+0x44>)
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	4a0e      	ldr	r2, [pc, #56]	@ (80019f8 <HAL_MspInit+0x44>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6193      	str	r3, [r2, #24]
 80019c6:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <HAL_MspInit+0x44>)
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d2:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <HAL_MspInit+0x44>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	4a08      	ldr	r2, [pc, #32]	@ (80019f8 <HAL_MspInit+0x44>)
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019dc:	61d3      	str	r3, [r2, #28]
 80019de:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_MspInit+0x44>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000

080019fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08c      	sub	sp, #48	@ 0x30
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 031c 	add.w	r3, r7, #28
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a1c:	d15e      	bne.n	8001adc <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a1e:	4b63      	ldr	r3, [pc, #396]	@ (8001bac <HAL_ADC_MspInit+0x1b0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	3301      	adds	r3, #1
 8001a24:	4a61      	ldr	r2, [pc, #388]	@ (8001bac <HAL_ADC_MspInit+0x1b0>)
 8001a26:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a28:	4b60      	ldr	r3, [pc, #384]	@ (8001bac <HAL_ADC_MspInit+0x1b0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d10b      	bne.n	8001a48 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a30:	4b5f      	ldr	r3, [pc, #380]	@ (8001bb0 <HAL_ADC_MspInit+0x1b4>)
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	4a5e      	ldr	r2, [pc, #376]	@ (8001bb0 <HAL_ADC_MspInit+0x1b4>)
 8001a36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a3a:	6153      	str	r3, [r2, #20]
 8001a3c:	4b5c      	ldr	r3, [pc, #368]	@ (8001bb0 <HAL_ADC_MspInit+0x1b4>)
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a44:	61bb      	str	r3, [r7, #24]
 8001a46:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a48:	4b59      	ldr	r3, [pc, #356]	@ (8001bb0 <HAL_ADC_MspInit+0x1b4>)
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	4a58      	ldr	r2, [pc, #352]	@ (8001bb0 <HAL_ADC_MspInit+0x1b4>)
 8001a4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a52:	6153      	str	r3, [r2, #20]
 8001a54:	4b56      	ldr	r3, [pc, #344]	@ (8001bb0 <HAL_ADC_MspInit+0x1b4>)
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = JACK_I_Pin;
 8001a60:	2302      	movs	r3, #2
 8001a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a64:	2303      	movs	r3, #3
 8001a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(JACK_I_GPIO_Port, &GPIO_InitStruct);
 8001a6c:	f107 031c 	add.w	r3, r7, #28
 8001a70:	4619      	mov	r1, r3
 8001a72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a76:	f002 f989 	bl	8003d8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a7a:	4b4e      	ldr	r3, [pc, #312]	@ (8001bb4 <HAL_ADC_MspInit+0x1b8>)
 8001a7c:	4a4e      	ldr	r2, [pc, #312]	@ (8001bb8 <HAL_ADC_MspInit+0x1bc>)
 8001a7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a80:	4b4c      	ldr	r3, [pc, #304]	@ (8001bb4 <HAL_ADC_MspInit+0x1b8>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a86:	4b4b      	ldr	r3, [pc, #300]	@ (8001bb4 <HAL_ADC_MspInit+0x1b8>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a8c:	4b49      	ldr	r3, [pc, #292]	@ (8001bb4 <HAL_ADC_MspInit+0x1b8>)
 8001a8e:	2280      	movs	r2, #128	@ 0x80
 8001a90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a92:	4b48      	ldr	r3, [pc, #288]	@ (8001bb4 <HAL_ADC_MspInit+0x1b8>)
 8001a94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a9a:	4b46      	ldr	r3, [pc, #280]	@ (8001bb4 <HAL_ADC_MspInit+0x1b8>)
 8001a9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001aa0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001aa2:	4b44      	ldr	r3, [pc, #272]	@ (8001bb4 <HAL_ADC_MspInit+0x1b8>)
 8001aa4:	2220      	movs	r2, #32
 8001aa6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001aa8:	4b42      	ldr	r3, [pc, #264]	@ (8001bb4 <HAL_ADC_MspInit+0x1b8>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001aae:	4841      	ldr	r0, [pc, #260]	@ (8001bb4 <HAL_ADC_MspInit+0x1b8>)
 8001ab0:	f001 ffd4 	bl	8003a5c <HAL_DMA_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8001aba:	f7ff ff75 	bl	80019a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a3c      	ldr	r2, [pc, #240]	@ (8001bb4 <HAL_ADC_MspInit+0x1b8>)
 8001ac2:	639a      	str	r2, [r3, #56]	@ 0x38
 8001ac4:	4a3b      	ldr	r2, [pc, #236]	@ (8001bb4 <HAL_ADC_MspInit+0x1b8>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	2012      	movs	r0, #18
 8001ad0:	f001 fd31 	bl	8003536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001ad4:	2012      	movs	r0, #18
 8001ad6:	f001 fd4a 	bl	800356e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001ada:	e062      	b.n	8001ba2 <HAL_ADC_MspInit+0x1a6>
  else if(hadc->Instance==ADC2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a36      	ldr	r2, [pc, #216]	@ (8001bbc <HAL_ADC_MspInit+0x1c0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d15d      	bne.n	8001ba2 <HAL_ADC_MspInit+0x1a6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001ae6:	4b31      	ldr	r3, [pc, #196]	@ (8001bac <HAL_ADC_MspInit+0x1b0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	3301      	adds	r3, #1
 8001aec:	4a2f      	ldr	r2, [pc, #188]	@ (8001bac <HAL_ADC_MspInit+0x1b0>)
 8001aee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001af0:	4b2e      	ldr	r3, [pc, #184]	@ (8001bac <HAL_ADC_MspInit+0x1b0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d10b      	bne.n	8001b10 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001af8:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb0 <HAL_ADC_MspInit+0x1b4>)
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	4a2c      	ldr	r2, [pc, #176]	@ (8001bb0 <HAL_ADC_MspInit+0x1b4>)
 8001afe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b02:	6153      	str	r3, [r2, #20]
 8001b04:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb0 <HAL_ADC_MspInit+0x1b4>)
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b10:	4b27      	ldr	r3, [pc, #156]	@ (8001bb0 <HAL_ADC_MspInit+0x1b4>)
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	4a26      	ldr	r2, [pc, #152]	@ (8001bb0 <HAL_ADC_MspInit+0x1b4>)
 8001b16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b1a:	6153      	str	r3, [r2, #20]
 8001b1c:	4b24      	ldr	r3, [pc, #144]	@ (8001bb0 <HAL_ADC_MspInit+0x1b4>)
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = POTD_Pin|POTG_Pin;
 8001b28:	23c0      	movs	r3, #192	@ 0xc0
 8001b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b3e:	f002 f925 	bl	8003d8c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001b42:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc0 <HAL_ADC_MspInit+0x1c4>)
 8001b44:	4a1f      	ldr	r2, [pc, #124]	@ (8001bc4 <HAL_ADC_MspInit+0x1c8>)
 8001b46:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b48:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc0 <HAL_ADC_MspInit+0x1c4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc0 <HAL_ADC_MspInit+0x1c4>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001b54:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc0 <HAL_ADC_MspInit+0x1c4>)
 8001b56:	2280      	movs	r2, #128	@ 0x80
 8001b58:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b5a:	4b19      	ldr	r3, [pc, #100]	@ (8001bc0 <HAL_ADC_MspInit+0x1c4>)
 8001b5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b60:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b62:	4b17      	ldr	r3, [pc, #92]	@ (8001bc0 <HAL_ADC_MspInit+0x1c4>)
 8001b64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b68:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001b6a:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <HAL_ADC_MspInit+0x1c4>)
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001b70:	4b13      	ldr	r3, [pc, #76]	@ (8001bc0 <HAL_ADC_MspInit+0x1c4>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001b76:	4812      	ldr	r0, [pc, #72]	@ (8001bc0 <HAL_ADC_MspInit+0x1c4>)
 8001b78:	f001 ff70 	bl	8003a5c <HAL_DMA_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_ADC_MspInit+0x18a>
      Error_Handler();
 8001b82:	f7ff ff11 	bl	80019a8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc0 <HAL_ADC_MspInit+0x1c4>)
 8001b8a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b8c:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc0 <HAL_ADC_MspInit+0x1c4>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	2012      	movs	r0, #18
 8001b98:	f001 fccd 	bl	8003536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b9c:	2012      	movs	r0, #18
 8001b9e:	f001 fce6 	bl	800356e <HAL_NVIC_EnableIRQ>
}
 8001ba2:	bf00      	nop
 8001ba4:	3730      	adds	r7, #48	@ 0x30
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20002650 	.word	0x20002650
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	20000108 	.word	0x20000108
 8001bb8:	40020008 	.word	0x40020008
 8001bbc:	50000100 	.word	0x50000100
 8001bc0:	2000014c 	.word	0x2000014c
 8001bc4:	4002001c 	.word	0x4002001c

08001bc8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	@ 0x28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a30      	ldr	r2, [pc, #192]	@ (8001ca8 <HAL_DAC_MspInit+0xe0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d15a      	bne.n	8001ca0 <HAL_DAC_MspInit+0xd8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001bea:	4b30      	ldr	r3, [pc, #192]	@ (8001cac <HAL_DAC_MspInit+0xe4>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	4a2f      	ldr	r2, [pc, #188]	@ (8001cac <HAL_DAC_MspInit+0xe4>)
 8001bf0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001bf4:	61d3      	str	r3, [r2, #28]
 8001bf6:	4b2d      	ldr	r3, [pc, #180]	@ (8001cac <HAL_DAC_MspInit+0xe4>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	4b2a      	ldr	r3, [pc, #168]	@ (8001cac <HAL_DAC_MspInit+0xe4>)
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	4a29      	ldr	r2, [pc, #164]	@ (8001cac <HAL_DAC_MspInit+0xe4>)
 8001c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c0c:	6153      	str	r3, [r2, #20]
 8001c0e:	4b27      	ldr	r3, [pc, #156]	@ (8001cac <HAL_DAC_MspInit+0xe4>)
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = JACK_O_Pin;
 8001c1a:	2310      	movs	r3, #16
 8001c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(JACK_O_GPIO_Port, &GPIO_InitStruct);
 8001c26:	f107 0314 	add.w	r3, r7, #20
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c30:	f002 f8ac 	bl	8003d8c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8001c34:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb0 <HAL_DAC_MspInit+0xe8>)
 8001c36:	4a1f      	ldr	r2, [pc, #124]	@ (8001cb4 <HAL_DAC_MspInit+0xec>)
 8001c38:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb0 <HAL_DAC_MspInit+0xe8>)
 8001c3c:	2210      	movs	r2, #16
 8001c3e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c40:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <HAL_DAC_MspInit+0xe8>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001c46:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <HAL_DAC_MspInit+0xe8>)
 8001c48:	2280      	movs	r2, #128	@ 0x80
 8001c4a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c4c:	4b18      	ldr	r3, [pc, #96]	@ (8001cb0 <HAL_DAC_MspInit+0xe8>)
 8001c4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c52:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c54:	4b16      	ldr	r3, [pc, #88]	@ (8001cb0 <HAL_DAC_MspInit+0xe8>)
 8001c56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c5a:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001c5c:	4b14      	ldr	r3, [pc, #80]	@ (8001cb0 <HAL_DAC_MspInit+0xe8>)
 8001c5e:	2220      	movs	r2, #32
 8001c60:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001c62:	4b13      	ldr	r3, [pc, #76]	@ (8001cb0 <HAL_DAC_MspInit+0xe8>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001c68:	4811      	ldr	r0, [pc, #68]	@ (8001cb0 <HAL_DAC_MspInit+0xe8>)
 8001c6a:	f001 fef7 	bl	8003a5c <HAL_DMA_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8001c74:	f7ff fe98 	bl	80019a8 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8001c78:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb8 <HAL_DAC_MspInit+0xf0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0e      	ldr	r2, [pc, #56]	@ (8001cb8 <HAL_DAC_MspInit+0xf0>)
 8001c7e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c82:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <HAL_DAC_MspInit+0xe8>)
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	4a09      	ldr	r2, [pc, #36]	@ (8001cb0 <HAL_DAC_MspInit+0xe8>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	2036      	movs	r0, #54	@ 0x36
 8001c96:	f001 fc4e 	bl	8003536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8001c9a:	2036      	movs	r0, #54	@ 0x36
 8001c9c:	f001 fc67 	bl	800356e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001ca0:	bf00      	nop
 8001ca2:	3728      	adds	r7, #40	@ 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40007400 	.word	0x40007400
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	200001a4 	.word	0x200001a4
 8001cb4:	40020030 	.word	0x40020030
 8001cb8:	40010000 	.word	0x40010000

08001cbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08c      	sub	sp, #48	@ 0x30
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cdc:	d14d      	bne.n	8001d7a <HAL_TIM_Base_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cde:	4b42      	ldr	r3, [pc, #264]	@ (8001de8 <HAL_TIM_Base_MspInit+0x12c>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	4a41      	ldr	r2, [pc, #260]	@ (8001de8 <HAL_TIM_Base_MspInit+0x12c>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	61d3      	str	r3, [r2, #28]
 8001cea:	4b3f      	ldr	r3, [pc, #252]	@ (8001de8 <HAL_TIM_Base_MspInit+0x12c>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	61bb      	str	r3, [r7, #24]
 8001cf4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf6:	4b3c      	ldr	r3, [pc, #240]	@ (8001de8 <HAL_TIM_Base_MspInit+0x12c>)
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	4a3b      	ldr	r2, [pc, #236]	@ (8001de8 <HAL_TIM_Base_MspInit+0x12c>)
 8001cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d00:	6153      	str	r3, [r2, #20]
 8001d02:	4b39      	ldr	r3, [pc, #228]	@ (8001de8 <HAL_TIM_Base_MspInit+0x12c>)
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0a:	617b      	str	r3, [r7, #20]
 8001d0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0e:	4b36      	ldr	r3, [pc, #216]	@ (8001de8 <HAL_TIM_Base_MspInit+0x12c>)
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	4a35      	ldr	r2, [pc, #212]	@ (8001de8 <HAL_TIM_Base_MspInit+0x12c>)
 8001d14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d18:	6153      	str	r3, [r2, #20]
 8001d1a:	4b33      	ldr	r3, [pc, #204]	@ (8001de8 <HAL_TIM_Base_MspInit+0x12c>)
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = CONDITIONNEUR_Pin;
 8001d26:	2301      	movs	r3, #1
 8001d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	2300      	movs	r3, #0
 8001d34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d36:	2301      	movs	r3, #1
 8001d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(CONDITIONNEUR_GPIO_Port, &GPIO_InitStruct);
 8001d3a:	f107 031c 	add.w	r3, r7, #28
 8001d3e:	4619      	mov	r1, r3
 8001d40:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d44:	f002 f822 	bl	8003d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d48:	2308      	movs	r3, #8
 8001d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	2300      	movs	r3, #0
 8001d56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5c:	f107 031c 	add.w	r3, r7, #28
 8001d60:	4619      	mov	r1, r3
 8001d62:	4822      	ldr	r0, [pc, #136]	@ (8001dec <HAL_TIM_Base_MspInit+0x130>)
 8001d64:	f002 f812 	bl	8003d8c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	201c      	movs	r0, #28
 8001d6e:	f001 fbe2 	bl	8003536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d72:	201c      	movs	r0, #28
 8001d74:	f001 fbfb 	bl	800356e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001d78:	e032      	b.n	8001de0 <HAL_TIM_Base_MspInit+0x124>
  else if(htim_base->Instance==TIM6)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8001df0 <HAL_TIM_Base_MspInit+0x134>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d114      	bne.n	8001dae <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d84:	4b18      	ldr	r3, [pc, #96]	@ (8001de8 <HAL_TIM_Base_MspInit+0x12c>)
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	4a17      	ldr	r2, [pc, #92]	@ (8001de8 <HAL_TIM_Base_MspInit+0x12c>)
 8001d8a:	f043 0310 	orr.w	r3, r3, #16
 8001d8e:	61d3      	str	r3, [r2, #28]
 8001d90:	4b15      	ldr	r3, [pc, #84]	@ (8001de8 <HAL_TIM_Base_MspInit+0x12c>)
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	f003 0310 	and.w	r3, r3, #16
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2100      	movs	r1, #0
 8001da0:	2036      	movs	r0, #54	@ 0x36
 8001da2:	f001 fbc8 	bl	8003536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8001da6:	2036      	movs	r0, #54	@ 0x36
 8001da8:	f001 fbe1 	bl	800356e <HAL_NVIC_EnableIRQ>
}
 8001dac:	e018      	b.n	8001de0 <HAL_TIM_Base_MspInit+0x124>
  else if(htim_base->Instance==TIM15)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a10      	ldr	r2, [pc, #64]	@ (8001df4 <HAL_TIM_Base_MspInit+0x138>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d113      	bne.n	8001de0 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001db8:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <HAL_TIM_Base_MspInit+0x12c>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001de8 <HAL_TIM_Base_MspInit+0x12c>)
 8001dbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dc2:	6193      	str	r3, [r2, #24]
 8001dc4:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <HAL_TIM_Base_MspInit+0x12c>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	2018      	movs	r0, #24
 8001dd6:	f001 fbae 	bl	8003536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001dda:	2018      	movs	r0, #24
 8001ddc:	f001 fbc7 	bl	800356e <HAL_NVIC_EnableIRQ>
}
 8001de0:	bf00      	nop
 8001de2:	3730      	adds	r7, #48	@ 0x30
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000
 8001dec:	48000400 	.word	0x48000400
 8001df0:	40001000 	.word	0x40001000
 8001df4:	40014000 	.word	0x40014000

08001df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	@ 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a18      	ldr	r2, [pc, #96]	@ (8001e78 <HAL_UART_MspInit+0x80>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d129      	bne.n	8001e6e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e1a:	4b18      	ldr	r3, [pc, #96]	@ (8001e7c <HAL_UART_MspInit+0x84>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	4a17      	ldr	r2, [pc, #92]	@ (8001e7c <HAL_UART_MspInit+0x84>)
 8001e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e24:	61d3      	str	r3, [r2, #28]
 8001e26:	4b15      	ldr	r3, [pc, #84]	@ (8001e7c <HAL_UART_MspInit+0x84>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	4b12      	ldr	r3, [pc, #72]	@ (8001e7c <HAL_UART_MspInit+0x84>)
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	4a11      	ldr	r2, [pc, #68]	@ (8001e7c <HAL_UART_MspInit+0x84>)
 8001e38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e3c:	6153      	str	r3, [r2, #20]
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e7c <HAL_UART_MspInit+0x84>)
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001e4a:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e5c:	2307      	movs	r3, #7
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	4619      	mov	r1, r3
 8001e66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e6a:	f001 ff8f 	bl	8003d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e6e:	bf00      	nop
 8001e70:	3728      	adds	r7, #40	@ 0x28
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40004400 	.word	0x40004400
 8001e7c:	40021000 	.word	0x40021000

08001e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e84:	bf00      	nop
 8001e86:	e7fd      	b.n	8001e84 <NMI_Handler+0x4>

08001e88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e8c:	bf00      	nop
 8001e8e:	e7fd      	b.n	8001e8c <HardFault_Handler+0x4>

08001e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e94:	bf00      	nop
 8001e96:	e7fd      	b.n	8001e94 <MemManage_Handler+0x4>

08001e98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e9c:	bf00      	nop
 8001e9e:	e7fd      	b.n	8001e9c <BusFault_Handler+0x4>

08001ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea4:	bf00      	nop
 8001ea6:	e7fd      	b.n	8001ea4 <UsageFault_Handler+0x4>

08001ea8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ed6:	f000 f8d3 	bl	8002080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ee4:	4802      	ldr	r0, [pc, #8]	@ (8001ef0 <DMA1_Channel1_IRQHandler+0x10>)
 8001ee6:	f001 fe5f 	bl	8003ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000108 	.word	0x20000108

08001ef4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001ef8:	4802      	ldr	r0, [pc, #8]	@ (8001f04 <DMA1_Channel2_IRQHandler+0x10>)
 8001efa:	f001 fe55 	bl	8003ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2000014c 	.word	0x2000014c

08001f08 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001f0c:	4802      	ldr	r0, [pc, #8]	@ (8001f18 <DMA1_Channel3_IRQHandler+0x10>)
 8001f0e:	f001 fe4b 	bl	8003ba8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200001a4 	.word	0x200001a4

08001f1c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f20:	4803      	ldr	r0, [pc, #12]	@ (8001f30 <ADC1_2_IRQHandler+0x14>)
 8001f22:	f000 fb57 	bl	80025d4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001f26:	4803      	ldr	r0, [pc, #12]	@ (8001f34 <ADC1_2_IRQHandler+0x18>)
 8001f28:	f000 fb54 	bl	80025d4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20000068 	.word	0x20000068
 8001f34:	200000b8 	.word	0x200000b8

08001f38 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001f3c:	4802      	ldr	r0, [pc, #8]	@ (8001f48 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001f3e:	f003 fd71 	bl	8005a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000280 	.word	0x20000280

08001f4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f50:	4802      	ldr	r0, [pc, #8]	@ (8001f5c <TIM2_IRQHandler+0x10>)
 8001f52:	f003 fd67 	bl	8005a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200001e8 	.word	0x200001e8

08001f60 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f64:	4803      	ldr	r0, [pc, #12]	@ (8001f74 <TIM6_DAC1_IRQHandler+0x14>)
 8001f66:	f003 fd5d 	bl	8005a24 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8001f6a:	4803      	ldr	r0, [pc, #12]	@ (8001f78 <TIM6_DAC1_IRQHandler+0x18>)
 8001f6c:	f001 fc20 	bl	80037b0 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000234 	.word	0x20000234
 8001f78:	20000190 	.word	0x20000190

08001f7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f80:	4b06      	ldr	r3, [pc, #24]	@ (8001f9c <SystemInit+0x20>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f86:	4a05      	ldr	r2, [pc, #20]	@ (8001f9c <SystemInit+0x20>)
 8001f88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fd8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fa4:	f7ff ffea 	bl	8001f7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa8:	480c      	ldr	r0, [pc, #48]	@ (8001fdc <LoopForever+0x6>)
  ldr r1, =_edata
 8001faa:	490d      	ldr	r1, [pc, #52]	@ (8001fe0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fac:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe4 <LoopForever+0xe>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb0:	e002      	b.n	8001fb8 <LoopCopyDataInit>

08001fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb6:	3304      	adds	r3, #4

08001fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fbc:	d3f9      	bcc.n	8001fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fc0:	4c0a      	ldr	r4, [pc, #40]	@ (8001fec <LoopForever+0x16>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc4:	e001      	b.n	8001fca <LoopFillZerobss>

08001fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc8:	3204      	adds	r2, #4

08001fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fcc:	d3fb      	bcc.n	8001fc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fce:	f004 fe7d 	bl	8006ccc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fd2:	f7fe fd41 	bl	8000a58 <main>

08001fd6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fd6:	e7fe      	b.n	8001fd6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fd8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe0:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8001fe4:	08007c38 	.word	0x08007c38
  ldr r2, =_sbss
 8001fe8:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8001fec:	20002658 	.word	0x20002658

08001ff0 <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ff0:	e7fe      	b.n	8001ff0 <CAN_RX0_IRQHandler>
	...

08001ff4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ff8:	4b08      	ldr	r3, [pc, #32]	@ (800201c <HAL_Init+0x28>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a07      	ldr	r2, [pc, #28]	@ (800201c <HAL_Init+0x28>)
 8001ffe:	f043 0310 	orr.w	r3, r3, #16
 8002002:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002004:	2003      	movs	r0, #3
 8002006:	f001 fa8b 	bl	8003520 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800200a:	2000      	movs	r0, #0
 800200c:	f000 f808 	bl	8002020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002010:	f7ff fcd0 	bl	80019b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	40022000 	.word	0x40022000

08002020 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002028:	4b12      	ldr	r3, [pc, #72]	@ (8002074 <HAL_InitTick+0x54>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b12      	ldr	r3, [pc, #72]	@ (8002078 <HAL_InitTick+0x58>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	4619      	mov	r1, r3
 8002032:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002036:	fbb3 f3f1 	udiv	r3, r3, r1
 800203a:	fbb2 f3f3 	udiv	r3, r2, r3
 800203e:	4618      	mov	r0, r3
 8002040:	f001 faa3 	bl	800358a <HAL_SYSTICK_Config>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e00e      	b.n	800206c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b0f      	cmp	r3, #15
 8002052:	d80a      	bhi.n	800206a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002054:	2200      	movs	r2, #0
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	f04f 30ff 	mov.w	r0, #4294967295
 800205c:	f001 fa6b 	bl	8003536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002060:	4a06      	ldr	r2, [pc, #24]	@ (800207c <HAL_InitTick+0x5c>)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
 8002068:	e000      	b.n	800206c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000040 	.word	0x20000040
 8002078:	20000048 	.word	0x20000048
 800207c:	20000044 	.word	0x20000044

08002080 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002084:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <HAL_IncTick+0x20>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	461a      	mov	r2, r3
 800208a:	4b06      	ldr	r3, [pc, #24]	@ (80020a4 <HAL_IncTick+0x24>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4413      	add	r3, r2
 8002090:	4a04      	ldr	r2, [pc, #16]	@ (80020a4 <HAL_IncTick+0x24>)
 8002092:	6013      	str	r3, [r2, #0]
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20000048 	.word	0x20000048
 80020a4:	20002654 	.word	0x20002654

080020a8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return uwTick;  
 80020ac:	4b03      	ldr	r3, [pc, #12]	@ (80020bc <HAL_GetTick+0x14>)
 80020ae:	681b      	ldr	r3, [r3, #0]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20002654 	.word	0x20002654

080020c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b09a      	sub	sp, #104	@ 0x68
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800210a:	2300      	movs	r3, #0
 800210c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e172      	b.n	8002402 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	2b00      	cmp	r3, #0
 800212c:	d176      	bne.n	800221c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	2b00      	cmp	r3, #0
 8002134:	d152      	bne.n	80021dc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff fc53 	bl	80019fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d13b      	bne.n	80021dc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f001 f8a5 	bl	80032b4 <ADC_Disable>
 800216a:	4603      	mov	r3, r0
 800216c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	f003 0310 	and.w	r3, r3, #16
 8002178:	2b00      	cmp	r3, #0
 800217a:	d12f      	bne.n	80021dc <HAL_ADC_Init+0xe0>
 800217c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002180:	2b00      	cmp	r3, #0
 8002182:	d12b      	bne.n	80021dc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002188:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800218c:	f023 0302 	bic.w	r3, r3, #2
 8002190:	f043 0202 	orr.w	r2, r3, #2
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021a6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80021b6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021b8:	4b94      	ldr	r3, [pc, #592]	@ (800240c <HAL_ADC_Init+0x310>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a94      	ldr	r2, [pc, #592]	@ (8002410 <HAL_ADC_Init+0x314>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	0c9a      	lsrs	r2, r3, #18
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021ce:	e002      	b.n	80021d6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1f9      	bne.n	80021d0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d007      	beq.n	80021fa <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80021f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021f8:	d110      	bne.n	800221c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	f023 0312 	bic.w	r3, r3, #18
 8002202:	f043 0210 	orr.w	r2, r3, #16
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220e:	f043 0201 	orr.w	r2, r3, #1
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2b00      	cmp	r3, #0
 8002226:	f040 80df 	bne.w	80023e8 <HAL_ADC_Init+0x2ec>
 800222a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800222e:	2b00      	cmp	r3, #0
 8002230:	f040 80da 	bne.w	80023e8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800223e:	2b00      	cmp	r3, #0
 8002240:	f040 80d2 	bne.w	80023e8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002248:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800224c:	f043 0202 	orr.w	r2, r3, #2
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002254:	4b6f      	ldr	r3, [pc, #444]	@ (8002414 <HAL_ADC_Init+0x318>)
 8002256:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002260:	d102      	bne.n	8002268 <HAL_ADC_Init+0x16c>
 8002262:	4b6d      	ldr	r3, [pc, #436]	@ (8002418 <HAL_ADC_Init+0x31c>)
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	e002      	b.n	800226e <HAL_ADC_Init+0x172>
 8002268:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800226c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	2b01      	cmp	r3, #1
 800227a:	d108      	bne.n	800228e <HAL_ADC_Init+0x192>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_ADC_Init+0x192>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <HAL_ADC_Init+0x194>
 800228e:	2300      	movs	r3, #0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d11c      	bne.n	80022ce <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002294:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002296:	2b00      	cmp	r3, #0
 8002298:	d010      	beq.n	80022bc <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d107      	bne.n	80022b6 <HAL_ADC_Init+0x1ba>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_ADC_Init+0x1ba>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <HAL_ADC_Init+0x1bc>
 80022b6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d108      	bne.n	80022ce <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80022bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	431a      	orrs	r2, r3
 80022ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022cc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	7e5b      	ldrb	r3, [r3, #25]
 80022d2:	035b      	lsls	r3, r3, #13
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80022d8:	2a01      	cmp	r2, #1
 80022da:	d002      	beq.n	80022e2 <HAL_ADC_Init+0x1e6>
 80022dc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022e0:	e000      	b.n	80022e4 <HAL_ADC_Init+0x1e8>
 80022e2:	2200      	movs	r2, #0
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80022f4:	4313      	orrs	r3, r2
 80022f6:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d11b      	bne.n	800233a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	7e5b      	ldrb	r3, [r3, #25]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d109      	bne.n	800231e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230e:	3b01      	subs	r3, #1
 8002310:	045a      	lsls	r2, r3, #17
 8002312:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002314:	4313      	orrs	r3, r2
 8002316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800231a:	663b      	str	r3, [r7, #96]	@ 0x60
 800231c:	e00d      	b.n	800233a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002326:	f043 0220 	orr.w	r2, r3, #32
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002332:	f043 0201 	orr.w	r2, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233e:	2b01      	cmp	r3, #1
 8002340:	d007      	beq.n	8002352 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234a:	4313      	orrs	r3, r2
 800234c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800234e:	4313      	orrs	r3, r2
 8002350:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b00      	cmp	r3, #0
 800235e:	d114      	bne.n	800238a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6812      	ldr	r2, [r2, #0]
 800236a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800236e:	f023 0302 	bic.w	r3, r3, #2
 8002372:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	7e1b      	ldrb	r3, [r3, #24]
 8002378:	039a      	lsls	r2, r3, #14
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4313      	orrs	r3, r2
 8002384:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002386:	4313      	orrs	r3, r2
 8002388:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	4b22      	ldr	r3, [pc, #136]	@ (800241c <HAL_ADC_Init+0x320>)
 8002392:	4013      	ands	r3, r2
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800239a:	430b      	orrs	r3, r1
 800239c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d10c      	bne.n	80023c0 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ac:	f023 010f 	bic.w	r1, r3, #15
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	1e5a      	subs	r2, r3, #1
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80023be:	e007      	b.n	80023d0 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 020f 	bic.w	r2, r2, #15
 80023ce:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023da:	f023 0303 	bic.w	r3, r3, #3
 80023de:	f043 0201 	orr.w	r2, r3, #1
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80023e6:	e00a      	b.n	80023fe <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ec:	f023 0312 	bic.w	r3, r3, #18
 80023f0:	f043 0210 	orr.w	r2, r3, #16
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80023f8:	2301      	movs	r3, #1
 80023fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80023fe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002402:	4618      	mov	r0, r3
 8002404:	3768      	adds	r7, #104	@ 0x68
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000040 	.word	0x20000040
 8002410:	431bde83 	.word	0x431bde83
 8002414:	50000300 	.word	0x50000300
 8002418:	50000100 	.word	0x50000100
 800241c:	fff0c007 	.word	0xfff0c007

08002420 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	2b00      	cmp	r3, #0
 800243c:	f040 80b9 	bne.w	80025b2 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_ADC_Start_DMA+0x2e>
 800244a:	2302      	movs	r3, #2
 800244c:	e0b4      	b.n	80025b8 <HAL_ADC_Start_DMA+0x198>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002456:	4b5a      	ldr	r3, [pc, #360]	@ (80025c0 <HAL_ADC_Start_DMA+0x1a0>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	2b00      	cmp	r3, #0
 8002460:	f040 80a0 	bne.w	80025a4 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 fec1 	bl	80031ec <ADC_Enable>
 800246a:	4603      	mov	r3, r0
 800246c:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800246e:	7dfb      	ldrb	r3, [r7, #23]
 8002470:	2b00      	cmp	r3, #0
 8002472:	f040 8092 	bne.w	800259a <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800247e:	f023 0301 	bic.w	r3, r3, #1
 8002482:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800248a:	4b4d      	ldr	r3, [pc, #308]	@ (80025c0 <HAL_ADC_Start_DMA+0x1a0>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	2b00      	cmp	r3, #0
 8002494:	d004      	beq.n	80024a0 <HAL_ADC_Start_DMA+0x80>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800249e:	d115      	bne.n	80024cc <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d027      	beq.n	800250a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024c2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80024ca:	e01e      	b.n	800250a <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024e0:	d004      	beq.n	80024ec <HAL_ADC_Start_DMA+0xcc>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a37      	ldr	r2, [pc, #220]	@ (80025c4 <HAL_ADC_Start_DMA+0x1a4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d10e      	bne.n	800250a <HAL_ADC_Start_DMA+0xea>
 80024ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d007      	beq.n	800250a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002502:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002512:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002516:	d106      	bne.n	8002526 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251c:	f023 0206 	bic.w	r2, r3, #6
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	645a      	str	r2, [r3, #68]	@ 0x44
 8002524:	e002      	b.n	800252c <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002538:	4a23      	ldr	r2, [pc, #140]	@ (80025c8 <HAL_ADC_Start_DMA+0x1a8>)
 800253a:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002540:	4a22      	ldr	r2, [pc, #136]	@ (80025cc <HAL_ADC_Start_DMA+0x1ac>)
 8002542:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002548:	4a21      	ldr	r2, [pc, #132]	@ (80025d0 <HAL_ADC_Start_DMA+0x1b0>)
 800254a:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	221c      	movs	r2, #28
 8002552:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685a      	ldr	r2, [r3, #4]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0210 	orr.w	r2, r2, #16
 8002562:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0201 	orr.w	r2, r2, #1
 8002572:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	3340      	adds	r3, #64	@ 0x40
 800257e:	4619      	mov	r1, r3
 8002580:	68ba      	ldr	r2, [r7, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f001 fab1 	bl	8003aea <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0204 	orr.w	r2, r2, #4
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	e00d      	b.n	80025b6 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80025a2:	e008      	b.n	80025b6 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80025b0:	e001      	b.n	80025b6 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025b2:	2302      	movs	r3, #2
 80025b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80025b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	50000300 	.word	0x50000300
 80025c4:	50000100 	.word	0x50000100
 80025c8:	08003121 	.word	0x08003121
 80025cc:	0800319b 	.word	0x0800319b
 80025d0:	080031b7 	.word	0x080031b7

080025d4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80025dc:	2300      	movs	r3, #0
 80025de:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d004      	beq.n	800260c <HAL_ADC_IRQHandler+0x38>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d109      	bne.n	8002620 <HAL_ADC_IRQHandler+0x4c>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002612:	2b00      	cmp	r3, #0
 8002614:	d076      	beq.n	8002704 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d071      	beq.n	8002704 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	2b00      	cmp	r3, #0
 800262a:	d105      	bne.n	8002638 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002630:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8002638:	4b82      	ldr	r3, [pc, #520]	@ (8002844 <HAL_ADC_IRQHandler+0x270>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 031f 	and.w	r3, r3, #31
 8002640:	2b00      	cmp	r3, #0
 8002642:	d010      	beq.n	8002666 <HAL_ADC_IRQHandler+0x92>
 8002644:	4b7f      	ldr	r3, [pc, #508]	@ (8002844 <HAL_ADC_IRQHandler+0x270>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 031f 	and.w	r3, r3, #31
 800264c:	2b05      	cmp	r3, #5
 800264e:	d00a      	beq.n	8002666 <HAL_ADC_IRQHandler+0x92>
 8002650:	4b7c      	ldr	r3, [pc, #496]	@ (8002844 <HAL_ADC_IRQHandler+0x270>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 031f 	and.w	r3, r3, #31
 8002658:	2b09      	cmp	r3, #9
 800265a:	d004      	beq.n	8002666 <HAL_ADC_IRQHandler+0x92>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002664:	d104      	bne.n	8002670 <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	61bb      	str	r3, [r7, #24]
 800266e:	e003      	b.n	8002678 <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002670:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002682:	2b00      	cmp	r3, #0
 8002684:	d137      	bne.n	80026f6 <HAL_ADC_IRQHandler+0x122>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 800268c:	2b00      	cmp	r3, #0
 800268e:	d132      	bne.n	80026f6 <HAL_ADC_IRQHandler+0x122>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d02d      	beq.n	80026f6 <HAL_ADC_IRQHandler+0x122>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d11a      	bne.n	80026de <HAL_ADC_IRQHandler+0x10a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 020c 	bic.w	r2, r2, #12
 80026b6:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	641a      	str	r2, [r3, #64]	@ 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d112      	bne.n	80026f6 <HAL_ADC_IRQHandler+0x122>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d4:	f043 0201 	orr.w	r2, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	641a      	str	r2, [r3, #64]	@ 0x40
 80026dc:	e00b      	b.n	80026f6 <HAL_ADC_IRQHandler+0x122>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	f043 0210 	orr.w	r2, r3, #16
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	641a      	str	r2, [r3, #64]	@ 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ee:	f043 0201 	orr.w	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff f81c 	bl	8001734 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	220c      	movs	r2, #12
 8002702:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f003 0320 	and.w	r3, r3, #32
 800270a:	2b00      	cmp	r3, #0
 800270c:	d004      	beq.n	8002718 <HAL_ADC_IRQHandler+0x144>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f003 0320 	and.w	r3, r3, #32
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10b      	bne.n	8002730 <HAL_ADC_IRQHandler+0x15c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 80a5 	beq.w	800286e <HAL_ADC_IRQHandler+0x29a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 809f 	beq.w	800286e <HAL_ADC_IRQHandler+0x29a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	641a      	str	r2, [r3, #64]	@ 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800273c:	4b41      	ldr	r3, [pc, #260]	@ (8002844 <HAL_ADC_IRQHandler+0x270>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	2b00      	cmp	r3, #0
 8002746:	d010      	beq.n	800276a <HAL_ADC_IRQHandler+0x196>
 8002748:	4b3e      	ldr	r3, [pc, #248]	@ (8002844 <HAL_ADC_IRQHandler+0x270>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	2b05      	cmp	r3, #5
 8002752:	d00a      	beq.n	800276a <HAL_ADC_IRQHandler+0x196>
 8002754:	4b3b      	ldr	r3, [pc, #236]	@ (8002844 <HAL_ADC_IRQHandler+0x270>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	2b09      	cmp	r3, #9
 800275e:	d004      	beq.n	800276a <HAL_ADC_IRQHandler+0x196>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002768:	d104      	bne.n	8002774 <HAL_ADC_IRQHandler+0x1a0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	e003      	b.n	800277c <HAL_ADC_IRQHandler+0x1a8>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002774:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002782:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d16a      	bne.n	8002860 <HAL_ADC_IRQHandler+0x28c>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00b      	beq.n	80027ac <HAL_ADC_IRQHandler+0x1d8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d15e      	bne.n	8002860 <HAL_ADC_IRQHandler+0x28c>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d159      	bne.n	8002860 <HAL_ADC_IRQHandler+0x28c>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d054      	beq.n	8002860 <HAL_ADC_IRQHandler+0x28c>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80027b6:	4b23      	ldr	r3, [pc, #140]	@ (8002844 <HAL_ADC_IRQHandler+0x270>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 031f 	and.w	r3, r3, #31
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d010      	beq.n	80027e4 <HAL_ADC_IRQHandler+0x210>
 80027c2:	4b20      	ldr	r3, [pc, #128]	@ (8002844 <HAL_ADC_IRQHandler+0x270>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 031f 	and.w	r3, r3, #31
 80027ca:	2b06      	cmp	r3, #6
 80027cc:	d00a      	beq.n	80027e4 <HAL_ADC_IRQHandler+0x210>
 80027ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002844 <HAL_ADC_IRQHandler+0x270>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	2b07      	cmp	r3, #7
 80027d8:	d004      	beq.n	80027e4 <HAL_ADC_IRQHandler+0x210>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027e2:	d104      	bne.n	80027ee <HAL_ADC_IRQHandler+0x21a>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	e003      	b.n	80027f6 <HAL_ADC_IRQHandler+0x222>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80027ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d12f      	bne.n	8002860 <HAL_ADC_IRQHandler+0x28c>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d11c      	bne.n	8002848 <HAL_ADC_IRQHandler+0x274>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800281c:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	641a      	str	r2, [r3, #64]	@ 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002832:	2b00      	cmp	r3, #0
 8002834:	d114      	bne.n	8002860 <HAL_ADC_IRQHandler+0x28c>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	f043 0201 	orr.w	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	641a      	str	r2, [r3, #64]	@ 0x40
 8002842:	e00d      	b.n	8002860 <HAL_ADC_IRQHandler+0x28c>
 8002844:	50000300 	.word	0x50000300
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284c:	f043 0210 	orr.w	r2, r3, #16
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	641a      	str	r2, [r3, #64]	@ 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002858:	f043 0201 	orr.w	r2, r3, #1
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f8b1 	bl	80029c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2260      	movs	r2, #96	@ 0x60
 800286c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002874:	2b00      	cmp	r3, #0
 8002876:	d011      	beq.n	800289c <HAL_ADC_IRQHandler+0x2c8>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00c      	beq.n	800289c <HAL_ADC_IRQHandler+0x2c8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002886:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7ff fc20 	bl	80020d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2280      	movs	r2, #128	@ 0x80
 800289a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d012      	beq.n	80028cc <HAL_ADC_IRQHandler+0x2f8>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00d      	beq.n	80028cc <HAL_ADC_IRQHandler+0x2f8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f897 	bl	80029f0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028ca:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d012      	beq.n	80028fc <HAL_ADC_IRQHandler+0x328>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00d      	beq.n	80028fc <HAL_ADC_IRQHandler+0x328>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 f889 	bl	8002a04 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028fa:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f003 0310 	and.w	r3, r3, #16
 8002902:	2b00      	cmp	r3, #0
 8002904:	d03b      	beq.n	800297e <HAL_ADC_IRQHandler+0x3aa>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b00      	cmp	r3, #0
 800290e:	d036      	beq.n	800297e <HAL_ADC_IRQHandler+0x3aa>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002914:	2b01      	cmp	r3, #1
 8002916:	d102      	bne.n	800291e <HAL_ADC_IRQHandler+0x34a>
    {
      overrun_error = 1U;
 8002918:	2301      	movs	r3, #1
 800291a:	61fb      	str	r3, [r7, #28]
 800291c:	e019      	b.n	8002952 <HAL_ADC_IRQHandler+0x37e>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800291e:	4b29      	ldr	r3, [pc, #164]	@ (80029c4 <HAL_ADC_IRQHandler+0x3f0>)
 8002920:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 031f 	and.w	r3, r3, #31
 800292a:	2b00      	cmp	r3, #0
 800292c:	d109      	bne.n	8002942 <HAL_ADC_IRQHandler+0x36e>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b01      	cmp	r3, #1
 800293a:	d10a      	bne.n	8002952 <HAL_ADC_IRQHandler+0x37e>
        {
          overrun_error = 1U;  
 800293c:	2301      	movs	r3, #1
 800293e:	61fb      	str	r3, [r7, #28]
 8002940:	e007      	b.n	8002952 <HAL_ADC_IRQHandler+0x37e>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_ADC_IRQHandler+0x37e>
        {
          overrun_error = 1U;  
 800294e:	2301      	movs	r3, #1
 8002950:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d10e      	bne.n	8002976 <HAL_ADC_IRQHandler+0x3a2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002968:	f043 0202 	orr.w	r2, r3, #2
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7ff fbb9 	bl	80020e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2210      	movs	r2, #16
 800297c:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002984:	2b00      	cmp	r3, #0
 8002986:	d018      	beq.n	80029ba <HAL_ADC_IRQHandler+0x3e6>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800298e:	2b00      	cmp	r3, #0
 8002990:	d013      	beq.n	80029ba <HAL_ADC_IRQHandler+0x3e6>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a2:	f043 0208 	orr.w	r2, r3, #8
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029b2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f811 	bl	80029dc <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80029ba:	bf00      	nop
 80029bc:	3720      	adds	r7, #32
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	50000300 	.word	0x50000300

080029c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b09b      	sub	sp, #108	@ 0x6c
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x22>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e2a1      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x566>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f040 8285 	bne.w	8002f5c <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d81c      	bhi.n	8002a94 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	231f      	movs	r3, #31
 8002a70:	4093      	lsls	r3, r2
 8002a72:	43db      	mvns	r3, r3
 8002a74:	4019      	ands	r1, r3
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	6818      	ldr	r0, [r3, #0]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4413      	add	r3, r2
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	fa00 f203 	lsl.w	r2, r0, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a92:	e063      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b09      	cmp	r3, #9
 8002a9a:	d81e      	bhi.n	8002ada <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4413      	add	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	3b1e      	subs	r3, #30
 8002ab0:	221f      	movs	r2, #31
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	4019      	ands	r1, r3
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	4413      	add	r3, r2
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	3b1e      	subs	r3, #30
 8002acc:	fa00 f203 	lsl.w	r2, r0, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ad8:	e040      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b0e      	cmp	r3, #14
 8002ae0:	d81e      	bhi.n	8002b20 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	4413      	add	r3, r2
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	3b3c      	subs	r3, #60	@ 0x3c
 8002af6:	221f      	movs	r2, #31
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	4019      	ands	r1, r3
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	3b3c      	subs	r3, #60	@ 0x3c
 8002b12:	fa00 f203 	lsl.w	r2, r0, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b1e:	e01d      	b.n	8002b5c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	4413      	add	r3, r2
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	3b5a      	subs	r3, #90	@ 0x5a
 8002b34:	221f      	movs	r2, #31
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	4019      	ands	r1, r3
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	6818      	ldr	r0, [r3, #0]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	4413      	add	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	3b5a      	subs	r3, #90	@ 0x5a
 8002b50:	fa00 f203 	lsl.w	r2, r0, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f040 80e5 	bne.w	8002d36 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b09      	cmp	r3, #9
 8002b72:	d91c      	bls.n	8002bae <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6999      	ldr	r1, [r3, #24]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	4413      	add	r3, r2
 8002b84:	3b1e      	subs	r3, #30
 8002b86:	2207      	movs	r2, #7
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	4019      	ands	r1, r3
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	6898      	ldr	r0, [r3, #8]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3b1e      	subs	r3, #30
 8002ba0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	619a      	str	r2, [r3, #24]
 8002bac:	e019      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6959      	ldr	r1, [r3, #20]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	2207      	movs	r2, #7
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	4019      	ands	r1, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	6898      	ldr	r0, [r3, #8]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	fa00 f203 	lsl.w	r2, r0, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	695a      	ldr	r2, [r3, #20]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	08db      	lsrs	r3, r3, #3
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d84f      	bhi.n	8002ca4 <HAL_ADC_ConfigChannel+0x28c>
 8002c04:	a201      	add	r2, pc, #4	@ (adr r2, 8002c0c <HAL_ADC_ConfigChannel+0x1f4>)
 8002c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0a:	bf00      	nop
 8002c0c:	08002c1d 	.word	0x08002c1d
 8002c10:	08002c3f 	.word	0x08002c3f
 8002c14:	08002c61 	.word	0x08002c61
 8002c18:	08002c83 	.word	0x08002c83
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002c22:	4b9c      	ldr	r3, [pc, #624]	@ (8002e94 <HAL_ADC_ConfigChannel+0x47c>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	6812      	ldr	r2, [r2, #0]
 8002c2a:	0691      	lsls	r1, r2, #26
 8002c2c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002c3a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002c3c:	e07b      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002c44:	4b93      	ldr	r3, [pc, #588]	@ (8002e94 <HAL_ADC_ConfigChannel+0x47c>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	6812      	ldr	r2, [r2, #0]
 8002c4c:	0691      	lsls	r1, r2, #26
 8002c4e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002c50:	430a      	orrs	r2, r1
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002c5c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002c5e:	e06a      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002c66:	4b8b      	ldr	r3, [pc, #556]	@ (8002e94 <HAL_ADC_ConfigChannel+0x47c>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	0691      	lsls	r1, r2, #26
 8002c70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002c72:	430a      	orrs	r2, r1
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002c7e:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002c80:	e059      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002c88:	4b82      	ldr	r3, [pc, #520]	@ (8002e94 <HAL_ADC_ConfigChannel+0x47c>)
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	0691      	lsls	r1, r2, #26
 8002c92:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002c94:	430a      	orrs	r2, r1
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002ca0:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002ca2:	e048      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002caa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	069b      	lsls	r3, r3, #26
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d107      	bne.n	8002cc8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002cc6:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	069b      	lsls	r3, r3, #26
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d107      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002cea:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cf2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	069b      	lsls	r3, r3, #26
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d107      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002d0e:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d16:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	069b      	lsls	r3, r3, #26
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d107      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002d32:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002d34:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d108      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x33e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d101      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x33e>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x340>
 8002d56:	2300      	movs	r3, #0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f040 810a 	bne.w	8002f72 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d00f      	beq.n	8002d86 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2201      	movs	r2, #1
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43da      	mvns	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	400a      	ands	r2, r1
 8002d80:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002d84:	e049      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2201      	movs	r2, #1
 8002d94:	409a      	lsls	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b09      	cmp	r3, #9
 8002da6:	d91c      	bls.n	8002de2 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6999      	ldr	r1, [r3, #24]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	4613      	mov	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4413      	add	r3, r2
 8002db8:	3b1b      	subs	r3, #27
 8002dba:	2207      	movs	r2, #7
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	4019      	ands	r1, r3
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	6898      	ldr	r0, [r3, #8]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3b1b      	subs	r3, #27
 8002dd4:	fa00 f203 	lsl.w	r2, r0, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	619a      	str	r2, [r3, #24]
 8002de0:	e01b      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6959      	ldr	r1, [r3, #20]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	4613      	mov	r3, r2
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4413      	add	r3, r2
 8002df4:	2207      	movs	r2, #7
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	4019      	ands	r1, r3
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	6898      	ldr	r0, [r3, #8]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	1c5a      	adds	r2, r3, #1
 8002e08:	4613      	mov	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	4413      	add	r3, r2
 8002e0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8002e98 <HAL_ADC_ConfigChannel+0x480>)
 8002e1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b10      	cmp	r3, #16
 8002e24:	d105      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002e26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d015      	beq.n	8002e5e <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002e36:	2b11      	cmp	r3, #17
 8002e38:	d105      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002e3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00b      	beq.n	8002e5e <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002e4a:	2b12      	cmp	r3, #18
 8002e4c:	f040 8091 	bne.w	8002f72 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002e50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f040 808a 	bne.w	8002f72 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e66:	d102      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x456>
 8002e68:	4b0c      	ldr	r3, [pc, #48]	@ (8002e9c <HAL_ADC_ConfigChannel+0x484>)
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	e002      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x45c>
 8002e6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e72:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d10e      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x488>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d107      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x488>
 8002e90:	2301      	movs	r3, #1
 8002e92:	e006      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0x48a>
 8002e94:	83fff000 	.word	0x83fff000
 8002e98:	50000300 	.word	0x50000300
 8002e9c:	50000100 	.word	0x50000100
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d150      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002ea6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d010      	beq.n	8002ece <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d107      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x4b0>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x4b0>
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e000      	b.n	8002eca <HAL_ADC_ConfigChannel+0x4b2>
 8002ec8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d13c      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b10      	cmp	r3, #16
 8002ed4:	d11d      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x4fa>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ede:	d118      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002ee0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002ee8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002eea:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002eec:	4b27      	ldr	r3, [pc, #156]	@ (8002f8c <HAL_ADC_ConfigChannel+0x574>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a27      	ldr	r2, [pc, #156]	@ (8002f90 <HAL_ADC_ConfigChannel+0x578>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	0c9a      	lsrs	r2, r3, #18
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f02:	e002      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1f9      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f10:	e02e      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b11      	cmp	r3, #17
 8002f18:	d10b      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x51a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f22:	d106      	bne.n	8002f32 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002f24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002f2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f2e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f30:	e01e      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b12      	cmp	r3, #18
 8002f38:	d11a      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002f3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002f42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f44:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f46:	e013      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4c:	f043 0220 	orr.w	r2, r3, #32
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002f5a:	e00a      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f60:	f043 0220 	orr.w	r2, r3, #32
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002f6e:	e000      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002f70:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002f7a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	376c      	adds	r7, #108	@ 0x6c
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	20000040 	.word	0x20000040
 8002f90:	431bde83 	.word	0x431bde83

08002f94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b099      	sub	sp, #100	@ 0x64
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fac:	d102      	bne.n	8002fb4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002fae:	4b5a      	ldr	r3, [pc, #360]	@ (8003118 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	e002      	b.n	8002fba <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8002fb4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002fb8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e0a2      	b.n	800310a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e09b      	b.n	800310a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d17f      	bne.n	80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d179      	bne.n	80030e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ff4:	4b49      	ldr	r3, [pc, #292]	@ (800311c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8002ff6:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d040      	beq.n	8003082 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003000:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	6859      	ldr	r1, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003012:	035b      	lsls	r3, r3, #13
 8003014:	430b      	orrs	r3, r1
 8003016:	431a      	orrs	r2, r3
 8003018:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800301a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	2b01      	cmp	r3, #1
 8003028:	d108      	bne.n	800303c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 800303c:	2300      	movs	r3, #0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d15c      	bne.n	80030fc <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	2b01      	cmp	r3, #1
 800304c:	d107      	bne.n	800305e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800305a:	2301      	movs	r3, #1
 800305c:	e000      	b.n	8003060 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800305e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003060:	2b00      	cmp	r3, #0
 8003062:	d14b      	bne.n	80030fc <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003064:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800306c:	f023 030f 	bic.w	r3, r3, #15
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	6811      	ldr	r1, [r2, #0]
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	6892      	ldr	r2, [r2, #8]
 8003078:	430a      	orrs	r2, r1
 800307a:	431a      	orrs	r2, r3
 800307c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800307e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003080:	e03c      	b.n	80030fc <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003082:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800308a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800308c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	2b01      	cmp	r3, #1
 800309a:	d108      	bne.n	80030ae <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80030ae:	2300      	movs	r3, #0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d123      	bne.n	80030fc <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d107      	bne.n	80030d0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80030d0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d112      	bne.n	80030fc <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80030d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80030de:	f023 030f 	bic.w	r3, r3, #15
 80030e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80030e4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80030e6:	e009      	b.n	80030fc <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ec:	f043 0220 	orr.w	r2, r3, #32
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80030fa:	e000      	b.n	80030fe <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80030fc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003106:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 800310a:	4618      	mov	r0, r3
 800310c:	3764      	adds	r7, #100	@ 0x64
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	50000100 	.word	0x50000100
 800311c:	50000300 	.word	0x50000300

08003120 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003132:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003136:	2b00      	cmp	r3, #0
 8003138:	d126      	bne.n	8003188 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003150:	2b00      	cmp	r3, #0
 8003152:	d115      	bne.n	8003180 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003158:	2b00      	cmp	r3, #0
 800315a:	d111      	bne.n	8003180 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003160:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d105      	bne.n	8003180 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	f043 0201 	orr.w	r2, r3, #1
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f7fe fad7 	bl	8001734 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003186:	e004      	b.n	8003192 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	4798      	blx	r3
}
 8003192:	bf00      	nop
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b084      	sub	sp, #16
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	f7fe ff89 	bl	80020c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80031ae:	bf00      	nop
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d4:	f043 0204 	orr.w	r2, r3, #4
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f7fe ff83 	bl	80020e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031e2:	bf00      	nop
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	2b01      	cmp	r3, #1
 8003204:	d108      	bne.n	8003218 <ADC_Enable+0x2c>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <ADC_Enable+0x2c>
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <ADC_Enable+0x2e>
 8003218:	2300      	movs	r3, #0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d143      	bne.n	80032a6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	4b22      	ldr	r3, [pc, #136]	@ (80032b0 <ADC_Enable+0xc4>)
 8003226:	4013      	ands	r3, r2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00d      	beq.n	8003248 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003230:	f043 0210 	orr.w	r2, r3, #16
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323c:	f043 0201 	orr.w	r2, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e02f      	b.n	80032a8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003258:	f7fe ff26 	bl	80020a8 <HAL_GetTick>
 800325c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800325e:	e01b      	b.n	8003298 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003260:	f7fe ff22 	bl	80020a8 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d914      	bls.n	8003298 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b01      	cmp	r3, #1
 800327a:	d00d      	beq.n	8003298 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	f043 0210 	orr.w	r2, r3, #16
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328c:	f043 0201 	orr.w	r2, r3, #1
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e007      	b.n	80032a8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d1dc      	bne.n	8003260 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	8000003f 	.word	0x8000003f

080032b4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d108      	bne.n	80032e0 <ADC_Disable+0x2c>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <ADC_Disable+0x2c>
 80032dc:	2301      	movs	r3, #1
 80032de:	e000      	b.n	80032e2 <ADC_Disable+0x2e>
 80032e0:	2300      	movs	r3, #0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d047      	beq.n	8003376 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 030d 	and.w	r3, r3, #13
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d10f      	bne.n	8003314 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0202 	orr.w	r2, r2, #2
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2203      	movs	r2, #3
 800330a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800330c:	f7fe fecc 	bl	80020a8 <HAL_GetTick>
 8003310:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003312:	e029      	b.n	8003368 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	f043 0210 	orr.w	r2, r3, #16
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003324:	f043 0201 	orr.w	r2, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e023      	b.n	8003378 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003330:	f7fe feba 	bl	80020a8 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d914      	bls.n	8003368 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b01      	cmp	r3, #1
 800334a:	d10d      	bne.n	8003368 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003350:	f043 0210 	orr.w	r2, r3, #16
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800335c:	f043 0201 	orr.w	r2, r3, #1
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e007      	b.n	8003378 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b01      	cmp	r3, #1
 8003374:	d0dc      	beq.n	8003330 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003390:	4b0c      	ldr	r3, [pc, #48]	@ (80033c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003396:	68ba      	ldr	r2, [r7, #8]
 8003398:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800339c:	4013      	ands	r3, r2
 800339e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033b2:	4a04      	ldr	r2, [pc, #16]	@ (80033c4 <__NVIC_SetPriorityGrouping+0x44>)
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	60d3      	str	r3, [r2, #12]
}
 80033b8:	bf00      	nop
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	e000ed00 	.word	0xe000ed00

080033c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033cc:	4b04      	ldr	r3, [pc, #16]	@ (80033e0 <__NVIC_GetPriorityGrouping+0x18>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	0a1b      	lsrs	r3, r3, #8
 80033d2:	f003 0307 	and.w	r3, r3, #7
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	e000ed00 	.word	0xe000ed00

080033e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	db0b      	blt.n	800340e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	f003 021f 	and.w	r2, r3, #31
 80033fc:	4907      	ldr	r1, [pc, #28]	@ (800341c <__NVIC_EnableIRQ+0x38>)
 80033fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003402:	095b      	lsrs	r3, r3, #5
 8003404:	2001      	movs	r0, #1
 8003406:	fa00 f202 	lsl.w	r2, r0, r2
 800340a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	e000e100 	.word	0xe000e100

08003420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	6039      	str	r1, [r7, #0]
 800342a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800342c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003430:	2b00      	cmp	r3, #0
 8003432:	db0a      	blt.n	800344a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	b2da      	uxtb	r2, r3
 8003438:	490c      	ldr	r1, [pc, #48]	@ (800346c <__NVIC_SetPriority+0x4c>)
 800343a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343e:	0112      	lsls	r2, r2, #4
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	440b      	add	r3, r1
 8003444:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003448:	e00a      	b.n	8003460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	4908      	ldr	r1, [pc, #32]	@ (8003470 <__NVIC_SetPriority+0x50>)
 8003450:	79fb      	ldrb	r3, [r7, #7]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	3b04      	subs	r3, #4
 8003458:	0112      	lsls	r2, r2, #4
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	440b      	add	r3, r1
 800345e:	761a      	strb	r2, [r3, #24]
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	e000e100 	.word	0xe000e100
 8003470:	e000ed00 	.word	0xe000ed00

08003474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003474:	b480      	push	{r7}
 8003476:	b089      	sub	sp, #36	@ 0x24
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f1c3 0307 	rsb	r3, r3, #7
 800348e:	2b04      	cmp	r3, #4
 8003490:	bf28      	it	cs
 8003492:	2304      	movcs	r3, #4
 8003494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	3304      	adds	r3, #4
 800349a:	2b06      	cmp	r3, #6
 800349c:	d902      	bls.n	80034a4 <NVIC_EncodePriority+0x30>
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3b03      	subs	r3, #3
 80034a2:	e000      	b.n	80034a6 <NVIC_EncodePriority+0x32>
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034a8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43da      	mvns	r2, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	401a      	ands	r2, r3
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034bc:	f04f 31ff 	mov.w	r1, #4294967295
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	fa01 f303 	lsl.w	r3, r1, r3
 80034c6:	43d9      	mvns	r1, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034cc:	4313      	orrs	r3, r2
         );
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3724      	adds	r7, #36	@ 0x24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034ec:	d301      	bcc.n	80034f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034ee:	2301      	movs	r3, #1
 80034f0:	e00f      	b.n	8003512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034f2:	4a0a      	ldr	r2, [pc, #40]	@ (800351c <SysTick_Config+0x40>)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034fa:	210f      	movs	r1, #15
 80034fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003500:	f7ff ff8e 	bl	8003420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003504:	4b05      	ldr	r3, [pc, #20]	@ (800351c <SysTick_Config+0x40>)
 8003506:	2200      	movs	r2, #0
 8003508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800350a:	4b04      	ldr	r3, [pc, #16]	@ (800351c <SysTick_Config+0x40>)
 800350c:	2207      	movs	r2, #7
 800350e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	e000e010 	.word	0xe000e010

08003520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7ff ff29 	bl	8003380 <__NVIC_SetPriorityGrouping>
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b086      	sub	sp, #24
 800353a:	af00      	add	r7, sp, #0
 800353c:	4603      	mov	r3, r0
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
 8003542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003548:	f7ff ff3e 	bl	80033c8 <__NVIC_GetPriorityGrouping>
 800354c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	6978      	ldr	r0, [r7, #20]
 8003554:	f7ff ff8e 	bl	8003474 <NVIC_EncodePriority>
 8003558:	4602      	mov	r2, r0
 800355a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355e:	4611      	mov	r1, r2
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff ff5d 	bl	8003420 <__NVIC_SetPriority>
}
 8003566:	bf00      	nop
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b082      	sub	sp, #8
 8003572:	af00      	add	r7, sp, #0
 8003574:	4603      	mov	r3, r0
 8003576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff ff31 	bl	80033e4 <__NVIC_EnableIRQ>
}
 8003582:	bf00      	nop
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b082      	sub	sp, #8
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff ffa2 	bl	80034dc <SysTick_Config>
 8003598:	4603      	mov	r3, r0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e014      	b.n	80035de <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	791b      	ldrb	r3, [r3, #4]
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d105      	bne.n	80035ca <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7fe faff 	bl	8001bc8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2202      	movs	r2, #2
 80035ce:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
	...

08003638 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	795b      	ldrb	r3, [r3, #5]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <HAL_DAC_Start_DMA+0x1e>
 8003652:	2302      	movs	r3, #2
 8003654:	e09b      	b.n	800378e <HAL_DAC_Start_DMA+0x156>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2202      	movs	r2, #2
 8003660:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d12f      	bne.n	80036c8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	4a4a      	ldr	r2, [pc, #296]	@ (8003798 <HAL_DAC_Start_DMA+0x160>)
 800366e:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	4a49      	ldr	r2, [pc, #292]	@ (800379c <HAL_DAC_Start_DMA+0x164>)
 8003676:	62da      	str	r2, [r3, #44]	@ 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	4a48      	ldr	r2, [pc, #288]	@ (80037a0 <HAL_DAC_Start_DMA+0x168>)
 800367e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800368e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	2b08      	cmp	r3, #8
 8003694:	d013      	beq.n	80036be <HAL_DAC_Start_DMA+0x86>
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	2b08      	cmp	r3, #8
 800369a:	d845      	bhi.n	8003728 <HAL_DAC_Start_DMA+0xf0>
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_DAC_Start_DMA+0x72>
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d005      	beq.n	80036b4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80036a8:	e03e      	b.n	8003728 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3308      	adds	r3, #8
 80036b0:	617b      	str	r3, [r7, #20]
        break;
 80036b2:	e03c      	b.n	800372e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	330c      	adds	r3, #12
 80036ba:	617b      	str	r3, [r7, #20]
        break;
 80036bc:	e037      	b.n	800372e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3310      	adds	r3, #16
 80036c4:	617b      	str	r3, [r7, #20]
        break;
 80036c6:	e032      	b.n	800372e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	4a35      	ldr	r2, [pc, #212]	@ (80037a4 <HAL_DAC_Start_DMA+0x16c>)
 80036ce:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4a34      	ldr	r2, [pc, #208]	@ (80037a8 <HAL_DAC_Start_DMA+0x170>)
 80036d6:	62da      	str	r2, [r3, #44]	@ 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	4a33      	ldr	r2, [pc, #204]	@ (80037ac <HAL_DAC_Start_DMA+0x174>)
 80036de:	631a      	str	r2, [r3, #48]	@ 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80036ee:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d013      	beq.n	800371e <HAL_DAC_Start_DMA+0xe6>
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d817      	bhi.n	800372c <HAL_DAC_Start_DMA+0xf4>
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_DAC_Start_DMA+0xd2>
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	2b04      	cmp	r3, #4
 8003706:	d005      	beq.n	8003714 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8003708:	e010      	b.n	800372c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	3314      	adds	r3, #20
 8003710:	617b      	str	r3, [r7, #20]
        break;
 8003712:	e00c      	b.n	800372e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3318      	adds	r3, #24
 800371a:	617b      	str	r3, [r7, #20]
        break;
 800371c:	e007      	b.n	800372e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	331c      	adds	r3, #28
 8003724:	617b      	str	r3, [r7, #20]
        break;
 8003726:	e002      	b.n	800372e <HAL_DAC_Start_DMA+0xf6>
        break;
 8003728:	bf00      	nop
 800372a:	e000      	b.n	800372e <HAL_DAC_Start_DMA+0xf6>
        break;
 800372c:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10f      	bne.n	8003754 <HAL_DAC_Start_DMA+0x11c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003742:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6898      	ldr	r0, [r3, #8]
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	f000 f9cc 	bl	8003aea <HAL_DMA_Start_IT>
 8003752:	e00e      	b.n	8003772 <HAL_DAC_Start_DMA+0x13a>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8003762:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	68d8      	ldr	r0, [r3, #12]
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	f000 f9bc 	bl	8003aea <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6819      	ldr	r1, [r3, #0]
 800377e:	2201      	movs	r2, #1
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	409a      	lsls	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	08003985 	.word	0x08003985
 800379c:	080039a7 	.word	0x080039a7
 80037a0:	080039c3 	.word	0x080039c3
 80037a4:	080039f1 	.word	0x080039f1
 80037a8:	08003a13 	.word	0x08003a13
 80037ac:	08003a2f 	.word	0x08003a2f

080037b0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037c6:	d120      	bne.n	800380a <HAL_DAC_IRQHandler+0x5a>
  { 
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037d6:	d118      	bne.n	800380a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2204      	movs	r2, #4
 80037dc:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f043 0201 	orr.w	r2, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	611a      	str	r2, [r3, #16]
          
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037f2:	635a      	str	r2, [r3, #52]	@ 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003802:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff ff0c 	bl	8003622 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif
    }
  }
  
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003814:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003818:	d120      	bne.n	800385c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003820:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003824:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003828:	d118      	bne.n	800385c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2204      	movs	r2, #4
 800382e:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	f043 0202 	orr.w	r2, r3, #2
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003844:	635a      	str	r2, [r3, #52]	@ 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003854:	601a      	str	r2, [r3, #0]
   
      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f88a 	bl	8003970 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif
    }
  }
}
 800385c:	bf00      	nop
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003864:	b480      	push	{r7}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	2300      	movs	r3, #0
 8003876:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	795b      	ldrb	r3, [r3, #5]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_DAC_ConfigChannel+0x20>
 8003880:	2302      	movs	r3, #2
 8003882:	e04e      	b.n	8003922 <HAL_DAC_ConfigChannel+0xbe>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2201      	movs	r2, #1
 8003888:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2202      	movs	r2, #2
 800388e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a24      	ldr	r2, [pc, #144]	@ (8003930 <HAL_DAC_ConfigChannel+0xcc>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d112      	bne.n	80038c8 <HAL_DAC_ConfigChannel+0x64>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10f      	bne.n	80038c8 <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80038a8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	43db      	mvns	r3, r3
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	4013      	ands	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
 80038c6:	e00e      	b.n	80038e6 <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 80038c8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43db      	mvns	r3, r3
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4013      	ands	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6819      	ldr	r1, [r3, #0]
 8003902:	22c0      	movs	r2, #192	@ 0xc0
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43da      	mvns	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	400a      	ands	r2, r1
 8003912:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2201      	movs	r2, #1
 8003918:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40007400 	.word	0x40007400

08003934 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003990:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f7ff fe27 	bl	80035e6 <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2201      	movs	r2, #1
 800399c:	711a      	strb	r2, [r3, #4]
}
 800399e:	bf00      	nop
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b2:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f7ff fe20 	bl	80035fa <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 80039ba:	bf00      	nop
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ce:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	f043 0204 	orr.w	r2, r3, #4
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f7ff fe16 	bl	800360e <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2201      	movs	r2, #1
 80039e6:	711a      	strb	r2, [r3, #4]
}
 80039e8:	bf00      	nop
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fc:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f7ff ff98 	bl	8003934 <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	711a      	strb	r2, [r3, #4]
}
 8003a0a:	bf00      	nop
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b084      	sub	sp, #16
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1e:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f7ff ff91 	bl	8003948 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8003a26:	bf00      	nop
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b084      	sub	sp, #16
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3a:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	f043 0204 	orr.w	r2, r3, #4
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f7ff ff87 	bl	800395c <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2201      	movs	r2, #1
 8003a52:	711a      	strb	r2, [r3, #4]
}
 8003a54:	bf00      	nop
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e037      	b.n	8003ae2 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2202      	movs	r2, #2
 8003a76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003a88:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003a8c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003a96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f941 	bl	8003d4c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b086      	sub	sp, #24
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
 8003af6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d101      	bne.n	8003b0a <HAL_DMA_Start_IT+0x20>
 8003b06:	2302      	movs	r3, #2
 8003b08:	e04a      	b.n	8003ba0 <HAL_DMA_Start_IT+0xb6>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d13a      	bne.n	8003b92 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0201 	bic.w	r2, r2, #1
 8003b38:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	68b9      	ldr	r1, [r7, #8]
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f8d4 	bl	8003cee <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d008      	beq.n	8003b60 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f042 020e 	orr.w	r2, r2, #14
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e00f      	b.n	8003b80 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 020a 	orr.w	r2, r2, #10
 8003b6e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 0204 	bic.w	r2, r2, #4
 8003b7e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	e005      	b.n	8003b9e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d024      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x72>
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d01f      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0320 	and.w	r3, r3, #32
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d107      	bne.n	8003bf8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0204 	bic.w	r2, r2, #4
 8003bf6:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c00:	2104      	movs	r1, #4
 8003c02:	fa01 f202 	lsl.w	r2, r1, r2
 8003c06:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d06a      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003c18:	e065      	b.n	8003ce6 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	2202      	movs	r2, #2
 8003c20:	409a      	lsls	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4013      	ands	r3, r2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d02c      	beq.n	8003c84 <HAL_DMA_IRQHandler+0xdc>
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d027      	beq.n	8003c84 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0320 	and.w	r3, r3, #32
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10b      	bne.n	8003c5a <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 020a 	bic.w	r2, r2, #10
 8003c50:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c62:	2102      	movs	r1, #2
 8003c64:	fa01 f202 	lsl.w	r2, r1, r2
 8003c68:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d035      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003c82:	e030      	b.n	8003ce6 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c88:	2208      	movs	r2, #8
 8003c8a:	409a      	lsls	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d028      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x13e>
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d023      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 020e 	bic.w	r2, r2, #14
 8003cac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cbc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d004      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	4798      	blx	r3
    }
  }
}
 8003ce4:	e7ff      	b.n	8003ce6 <HAL_DMA_IRQHandler+0x13e>
 8003ce6:	bf00      	nop
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b085      	sub	sp, #20
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
 8003cfa:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d04:	2101      	movs	r1, #1
 8003d06:	fa01 f202 	lsl.w	r2, r1, r2
 8003d0a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b10      	cmp	r3, #16
 8003d1a:	d108      	bne.n	8003d2e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d2c:	e007      	b.n	8003d3e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	60da      	str	r2, [r3, #12]
}
 8003d3e:	bf00      	nop
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
	...

08003d4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4b09      	ldr	r3, [pc, #36]	@ (8003d80 <DMA_CalcBaseAndBitshift+0x34>)
 8003d5c:	4413      	add	r3, r2
 8003d5e:	4a09      	ldr	r2, [pc, #36]	@ (8003d84 <DMA_CalcBaseAndBitshift+0x38>)
 8003d60:	fba2 2303 	umull	r2, r3, r2, r3
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	009a      	lsls	r2, r3, #2
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a06      	ldr	r2, [pc, #24]	@ (8003d88 <DMA_CalcBaseAndBitshift+0x3c>)
 8003d70:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	bffdfff8 	.word	0xbffdfff8
 8003d84:	cccccccd 	.word	0xcccccccd
 8003d88:	40020000 	.word	0x40020000

08003d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d9a:	e14e      	b.n	800403a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	2101      	movs	r1, #1
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	fa01 f303 	lsl.w	r3, r1, r3
 8003da8:	4013      	ands	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 8140 	beq.w	8004034 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 0303 	and.w	r3, r3, #3
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d005      	beq.n	8003dcc <HAL_GPIO_Init+0x40>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 0303 	and.w	r3, r3, #3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d130      	bne.n	8003e2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	2203      	movs	r2, #3
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	4013      	ands	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e02:	2201      	movs	r2, #1
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	091b      	lsrs	r3, r3, #4
 8003e18:	f003 0201 	and.w	r2, r3, #1
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	2b03      	cmp	r3, #3
 8003e38:	d017      	beq.n	8003e6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	2203      	movs	r2, #3
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d123      	bne.n	8003ebe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	08da      	lsrs	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3208      	adds	r2, #8
 8003e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	220f      	movs	r2, #15
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	43db      	mvns	r3, r3
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4013      	ands	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	08da      	lsrs	r2, r3, #3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3208      	adds	r2, #8
 8003eb8:	6939      	ldr	r1, [r7, #16]
 8003eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	2203      	movs	r2, #3
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f003 0203 	and.w	r2, r3, #3
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 809a 	beq.w	8004034 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f00:	4b55      	ldr	r3, [pc, #340]	@ (8004058 <HAL_GPIO_Init+0x2cc>)
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	4a54      	ldr	r2, [pc, #336]	@ (8004058 <HAL_GPIO_Init+0x2cc>)
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	6193      	str	r3, [r2, #24]
 8003f0c:	4b52      	ldr	r3, [pc, #328]	@ (8004058 <HAL_GPIO_Init+0x2cc>)
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f18:	4a50      	ldr	r2, [pc, #320]	@ (800405c <HAL_GPIO_Init+0x2d0>)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	089b      	lsrs	r3, r3, #2
 8003f1e:	3302      	adds	r3, #2
 8003f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f003 0303 	and.w	r3, r3, #3
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	220f      	movs	r2, #15
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	43db      	mvns	r3, r3
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f42:	d013      	beq.n	8003f6c <HAL_GPIO_Init+0x1e0>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a46      	ldr	r2, [pc, #280]	@ (8004060 <HAL_GPIO_Init+0x2d4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00d      	beq.n	8003f68 <HAL_GPIO_Init+0x1dc>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a45      	ldr	r2, [pc, #276]	@ (8004064 <HAL_GPIO_Init+0x2d8>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d007      	beq.n	8003f64 <HAL_GPIO_Init+0x1d8>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a44      	ldr	r2, [pc, #272]	@ (8004068 <HAL_GPIO_Init+0x2dc>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d101      	bne.n	8003f60 <HAL_GPIO_Init+0x1d4>
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e006      	b.n	8003f6e <HAL_GPIO_Init+0x1e2>
 8003f60:	2305      	movs	r3, #5
 8003f62:	e004      	b.n	8003f6e <HAL_GPIO_Init+0x1e2>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e002      	b.n	8003f6e <HAL_GPIO_Init+0x1e2>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <HAL_GPIO_Init+0x1e2>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	f002 0203 	and.w	r2, r2, #3
 8003f74:	0092      	lsls	r2, r2, #2
 8003f76:	4093      	lsls	r3, r2
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f7e:	4937      	ldr	r1, [pc, #220]	@ (800405c <HAL_GPIO_Init+0x2d0>)
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	089b      	lsrs	r3, r3, #2
 8003f84:	3302      	adds	r3, #2
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f8c:	4b37      	ldr	r3, [pc, #220]	@ (800406c <HAL_GPIO_Init+0x2e0>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	43db      	mvns	r3, r3
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003fb0:	4a2e      	ldr	r2, [pc, #184]	@ (800406c <HAL_GPIO_Init+0x2e0>)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fb6:	4b2d      	ldr	r3, [pc, #180]	@ (800406c <HAL_GPIO_Init+0x2e0>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003fda:	4a24      	ldr	r2, [pc, #144]	@ (800406c <HAL_GPIO_Init+0x2e0>)
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fe0:	4b22      	ldr	r3, [pc, #136]	@ (800406c <HAL_GPIO_Init+0x2e0>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4013      	ands	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004004:	4a19      	ldr	r2, [pc, #100]	@ (800406c <HAL_GPIO_Init+0x2e0>)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800400a:	4b18      	ldr	r3, [pc, #96]	@ (800406c <HAL_GPIO_Init+0x2e0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	43db      	mvns	r3, r3
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4013      	ands	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800402e:	4a0f      	ldr	r2, [pc, #60]	@ (800406c <HAL_GPIO_Init+0x2e0>)
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	3301      	adds	r3, #1
 8004038:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	fa22 f303 	lsr.w	r3, r2, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	f47f aea9 	bne.w	8003d9c <HAL_GPIO_Init+0x10>
  }
}
 800404a:	bf00      	nop
 800404c:	bf00      	nop
 800404e:	371c      	adds	r7, #28
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	40021000 	.word	0x40021000
 800405c:	40010000 	.word	0x40010000
 8004060:	48000400 	.word	0x48000400
 8004064:	48000800 	.word	0x48000800
 8004068:	48000c00 	.word	0x48000c00
 800406c:	40010400 	.word	0x40010400

08004070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	807b      	strh	r3, [r7, #2]
 800407c:	4613      	mov	r3, r2
 800407e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004080:	787b      	ldrb	r3, [r7, #1]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004086:	887a      	ldrh	r2, [r7, #2]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800408c:	e002      	b.n	8004094 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800408e:	887a      	ldrh	r2, [r7, #2]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040b2:	887a      	ldrh	r2, [r7, #2]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4013      	ands	r3, r2
 80040b8:	041a      	lsls	r2, r3, #16
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	43d9      	mvns	r1, r3
 80040be:	887b      	ldrh	r3, [r7, #2]
 80040c0:	400b      	ands	r3, r1
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	619a      	str	r2, [r3, #24]
}
 80040c8:	bf00      	nop
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80040da:	af00      	add	r7, sp, #0
 80040dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040e4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d102      	bne.n	80040fa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f001 b823 	b.w	8005140 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 817d 	beq.w	800440a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004110:	4bbc      	ldr	r3, [pc, #752]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f003 030c 	and.w	r3, r3, #12
 8004118:	2b04      	cmp	r3, #4
 800411a:	d00c      	beq.n	8004136 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800411c:	4bb9      	ldr	r3, [pc, #740]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f003 030c 	and.w	r3, r3, #12
 8004124:	2b08      	cmp	r3, #8
 8004126:	d15c      	bne.n	80041e2 <HAL_RCC_OscConfig+0x10e>
 8004128:	4bb6      	ldr	r3, [pc, #728]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004130:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004134:	d155      	bne.n	80041e2 <HAL_RCC_OscConfig+0x10e>
 8004136:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800413a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8004142:	fa93 f3a3 	rbit	r3, r3
 8004146:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800414a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800414e:	fab3 f383 	clz	r3, r3
 8004152:	b2db      	uxtb	r3, r3
 8004154:	095b      	lsrs	r3, r3, #5
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f043 0301 	orr.w	r3, r3, #1
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b01      	cmp	r3, #1
 8004160:	d102      	bne.n	8004168 <HAL_RCC_OscConfig+0x94>
 8004162:	4ba8      	ldr	r3, [pc, #672]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	e015      	b.n	8004194 <HAL_RCC_OscConfig+0xc0>
 8004168:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800416c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004170:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8004174:	fa93 f3a3 	rbit	r3, r3
 8004178:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800417c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004180:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004184:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8004188:	fa93 f3a3 	rbit	r3, r3
 800418c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8004190:	4b9c      	ldr	r3, [pc, #624]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 8004192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004194:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004198:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800419c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80041a0:	fa92 f2a2 	rbit	r2, r2
 80041a4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80041a8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80041ac:	fab2 f282 	clz	r2, r2
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	f042 0220 	orr.w	r2, r2, #32
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	f002 021f 	and.w	r2, r2, #31
 80041bc:	2101      	movs	r1, #1
 80041be:	fa01 f202 	lsl.w	r2, r1, r2
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 811f 	beq.w	8004408 <HAL_RCC_OscConfig+0x334>
 80041ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f040 8116 	bne.w	8004408 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	f000 bfaf 	b.w	8005140 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80041e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041f2:	d106      	bne.n	8004202 <HAL_RCC_OscConfig+0x12e>
 80041f4:	4b83      	ldr	r3, [pc, #524]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a82      	ldr	r2, [pc, #520]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 80041fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	e036      	b.n	8004270 <HAL_RCC_OscConfig+0x19c>
 8004202:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004206:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10c      	bne.n	800422c <HAL_RCC_OscConfig+0x158>
 8004212:	4b7c      	ldr	r3, [pc, #496]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a7b      	ldr	r2, [pc, #492]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 8004218:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	4b79      	ldr	r3, [pc, #484]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a78      	ldr	r2, [pc, #480]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 8004224:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	e021      	b.n	8004270 <HAL_RCC_OscConfig+0x19c>
 800422c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004230:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800423c:	d10c      	bne.n	8004258 <HAL_RCC_OscConfig+0x184>
 800423e:	4b71      	ldr	r3, [pc, #452]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a70      	ldr	r2, [pc, #448]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 8004244:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	4b6e      	ldr	r3, [pc, #440]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a6d      	ldr	r2, [pc, #436]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	e00b      	b.n	8004270 <HAL_RCC_OscConfig+0x19c>
 8004258:	4b6a      	ldr	r3, [pc, #424]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a69      	ldr	r2, [pc, #420]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 800425e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	4b67      	ldr	r3, [pc, #412]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a66      	ldr	r2, [pc, #408]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 800426a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800426e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004270:	4b64      	ldr	r3, [pc, #400]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 8004272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004274:	f023 020f 	bic.w	r2, r3, #15
 8004278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800427c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	495f      	ldr	r1, [pc, #380]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 8004286:	4313      	orrs	r3, r2
 8004288:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800428a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800428e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d059      	beq.n	800434e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429a:	f7fd ff05 	bl	80020a8 <HAL_GetTick>
 800429e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a2:	e00a      	b.n	80042ba <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042a4:	f7fd ff00 	bl	80020a8 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b64      	cmp	r3, #100	@ 0x64
 80042b2:	d902      	bls.n	80042ba <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	f000 bf43 	b.w	8005140 <HAL_RCC_OscConfig+0x106c>
 80042ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042be:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80042c6:	fa93 f3a3 	rbit	r3, r3
 80042ca:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80042ce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d2:	fab3 f383 	clz	r3, r3
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	f043 0301 	orr.w	r3, r3, #1
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d102      	bne.n	80042ec <HAL_RCC_OscConfig+0x218>
 80042e6:	4b47      	ldr	r3, [pc, #284]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	e015      	b.n	8004318 <HAL_RCC_OscConfig+0x244>
 80042ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042f0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80042f8:	fa93 f3a3 	rbit	r3, r3
 80042fc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004300:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004304:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004308:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800430c:	fa93 f3a3 	rbit	r3, r3
 8004310:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8004314:	4b3b      	ldr	r3, [pc, #236]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 8004316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004318:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800431c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8004320:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004324:	fa92 f2a2 	rbit	r2, r2
 8004328:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800432c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8004330:	fab2 f282 	clz	r2, r2
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	f042 0220 	orr.w	r2, r2, #32
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	f002 021f 	and.w	r2, r2, #31
 8004340:	2101      	movs	r1, #1
 8004342:	fa01 f202 	lsl.w	r2, r1, r2
 8004346:	4013      	ands	r3, r2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0ab      	beq.n	80042a4 <HAL_RCC_OscConfig+0x1d0>
 800434c:	e05d      	b.n	800440a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434e:	f7fd feab 	bl	80020a8 <HAL_GetTick>
 8004352:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004356:	e00a      	b.n	800436e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004358:	f7fd fea6 	bl	80020a8 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b64      	cmp	r3, #100	@ 0x64
 8004366:	d902      	bls.n	800436e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	f000 bee9 	b.w	8005140 <HAL_RCC_OscConfig+0x106c>
 800436e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004372:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004376:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800437a:	fa93 f3a3 	rbit	r3, r3
 800437e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8004382:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004386:	fab3 f383 	clz	r3, r3
 800438a:	b2db      	uxtb	r3, r3
 800438c:	095b      	lsrs	r3, r3, #5
 800438e:	b2db      	uxtb	r3, r3
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b01      	cmp	r3, #1
 8004398:	d102      	bne.n	80043a0 <HAL_RCC_OscConfig+0x2cc>
 800439a:	4b1a      	ldr	r3, [pc, #104]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	e015      	b.n	80043cc <HAL_RCC_OscConfig+0x2f8>
 80043a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80043a4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80043ac:	fa93 f3a3 	rbit	r3, r3
 80043b0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80043b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80043b8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80043bc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80043c0:	fa93 f3a3 	rbit	r3, r3
 80043c4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80043c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004404 <HAL_RCC_OscConfig+0x330>)
 80043ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043cc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80043d0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80043d4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80043d8:	fa92 f2a2 	rbit	r2, r2
 80043dc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80043e0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80043e4:	fab2 f282 	clz	r2, r2
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	f042 0220 	orr.w	r2, r2, #32
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	f002 021f 	and.w	r2, r2, #31
 80043f4:	2101      	movs	r1, #1
 80043f6:	fa01 f202 	lsl.w	r2, r1, r2
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1ab      	bne.n	8004358 <HAL_RCC_OscConfig+0x284>
 8004400:	e003      	b.n	800440a <HAL_RCC_OscConfig+0x336>
 8004402:	bf00      	nop
 8004404:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800440a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800440e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 817d 	beq.w	800471a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004420:	4ba6      	ldr	r3, [pc, #664]	@ (80046bc <HAL_RCC_OscConfig+0x5e8>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 030c 	and.w	r3, r3, #12
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00b      	beq.n	8004444 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800442c:	4ba3      	ldr	r3, [pc, #652]	@ (80046bc <HAL_RCC_OscConfig+0x5e8>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 030c 	and.w	r3, r3, #12
 8004434:	2b08      	cmp	r3, #8
 8004436:	d172      	bne.n	800451e <HAL_RCC_OscConfig+0x44a>
 8004438:	4ba0      	ldr	r3, [pc, #640]	@ (80046bc <HAL_RCC_OscConfig+0x5e8>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d16c      	bne.n	800451e <HAL_RCC_OscConfig+0x44a>
 8004444:	2302      	movs	r3, #2
 8004446:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800444e:	fa93 f3a3 	rbit	r3, r3
 8004452:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8004456:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800445a:	fab3 f383 	clz	r3, r3
 800445e:	b2db      	uxtb	r3, r3
 8004460:	095b      	lsrs	r3, r3, #5
 8004462:	b2db      	uxtb	r3, r3
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b01      	cmp	r3, #1
 800446c:	d102      	bne.n	8004474 <HAL_RCC_OscConfig+0x3a0>
 800446e:	4b93      	ldr	r3, [pc, #588]	@ (80046bc <HAL_RCC_OscConfig+0x5e8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	e013      	b.n	800449c <HAL_RCC_OscConfig+0x3c8>
 8004474:	2302      	movs	r3, #2
 8004476:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800447e:	fa93 f3a3 	rbit	r3, r3
 8004482:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004486:	2302      	movs	r3, #2
 8004488:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800448c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004490:	fa93 f3a3 	rbit	r3, r3
 8004494:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004498:	4b88      	ldr	r3, [pc, #544]	@ (80046bc <HAL_RCC_OscConfig+0x5e8>)
 800449a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449c:	2202      	movs	r2, #2
 800449e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80044a2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80044a6:	fa92 f2a2 	rbit	r2, r2
 80044aa:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80044ae:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80044b2:	fab2 f282 	clz	r2, r2
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	f042 0220 	orr.w	r2, r2, #32
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	f002 021f 	and.w	r2, r2, #31
 80044c2:	2101      	movs	r1, #1
 80044c4:	fa01 f202 	lsl.w	r2, r1, r2
 80044c8:	4013      	ands	r3, r2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <HAL_RCC_OscConfig+0x410>
 80044ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d002      	beq.n	80044e4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	f000 be2e 	b.w	8005140 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e4:	4b75      	ldr	r3, [pc, #468]	@ (80046bc <HAL_RCC_OscConfig+0x5e8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044f0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	21f8      	movs	r1, #248	@ 0xf8
 80044fa:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fe:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004502:	fa91 f1a1 	rbit	r1, r1
 8004506:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800450a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800450e:	fab1 f181 	clz	r1, r1
 8004512:	b2c9      	uxtb	r1, r1
 8004514:	408b      	lsls	r3, r1
 8004516:	4969      	ldr	r1, [pc, #420]	@ (80046bc <HAL_RCC_OscConfig+0x5e8>)
 8004518:	4313      	orrs	r3, r2
 800451a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800451c:	e0fd      	b.n	800471a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800451e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004522:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 8088 	beq.w	8004640 <HAL_RCC_OscConfig+0x56c>
 8004530:	2301      	movs	r3, #1
 8004532:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004536:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800453a:	fa93 f3a3 	rbit	r3, r3
 800453e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8004542:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004546:	fab3 f383 	clz	r3, r3
 800454a:	b2db      	uxtb	r3, r3
 800454c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004550:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	461a      	mov	r2, r3
 8004558:	2301      	movs	r3, #1
 800455a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455c:	f7fd fda4 	bl	80020a8 <HAL_GetTick>
 8004560:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004564:	e00a      	b.n	800457c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004566:	f7fd fd9f 	bl	80020a8 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d902      	bls.n	800457c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	f000 bde2 	b.w	8005140 <HAL_RCC_OscConfig+0x106c>
 800457c:	2302      	movs	r3, #2
 800457e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004582:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004586:	fa93 f3a3 	rbit	r3, r3
 800458a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800458e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004592:	fab3 f383 	clz	r3, r3
 8004596:	b2db      	uxtb	r3, r3
 8004598:	095b      	lsrs	r3, r3, #5
 800459a:	b2db      	uxtb	r3, r3
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d102      	bne.n	80045ac <HAL_RCC_OscConfig+0x4d8>
 80045a6:	4b45      	ldr	r3, [pc, #276]	@ (80046bc <HAL_RCC_OscConfig+0x5e8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	e013      	b.n	80045d4 <HAL_RCC_OscConfig+0x500>
 80045ac:	2302      	movs	r3, #2
 80045ae:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80045b6:	fa93 f3a3 	rbit	r3, r3
 80045ba:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80045be:	2302      	movs	r3, #2
 80045c0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80045c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80045c8:	fa93 f3a3 	rbit	r3, r3
 80045cc:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80045d0:	4b3a      	ldr	r3, [pc, #232]	@ (80046bc <HAL_RCC_OscConfig+0x5e8>)
 80045d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d4:	2202      	movs	r2, #2
 80045d6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80045da:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80045de:	fa92 f2a2 	rbit	r2, r2
 80045e2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80045e6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80045ea:	fab2 f282 	clz	r2, r2
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	f042 0220 	orr.w	r2, r2, #32
 80045f4:	b2d2      	uxtb	r2, r2
 80045f6:	f002 021f 	and.w	r2, r2, #31
 80045fa:	2101      	movs	r1, #1
 80045fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004600:	4013      	ands	r3, r2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0af      	beq.n	8004566 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004606:	4b2d      	ldr	r3, [pc, #180]	@ (80046bc <HAL_RCC_OscConfig+0x5e8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800460e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004612:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	21f8      	movs	r1, #248	@ 0xf8
 800461c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004620:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004624:	fa91 f1a1 	rbit	r1, r1
 8004628:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800462c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8004630:	fab1 f181 	clz	r1, r1
 8004634:	b2c9      	uxtb	r1, r1
 8004636:	408b      	lsls	r3, r1
 8004638:	4920      	ldr	r1, [pc, #128]	@ (80046bc <HAL_RCC_OscConfig+0x5e8>)
 800463a:	4313      	orrs	r3, r2
 800463c:	600b      	str	r3, [r1, #0]
 800463e:	e06c      	b.n	800471a <HAL_RCC_OscConfig+0x646>
 8004640:	2301      	movs	r3, #1
 8004642:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004646:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800464a:	fa93 f3a3 	rbit	r3, r3
 800464e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8004652:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004656:	fab3 f383 	clz	r3, r3
 800465a:	b2db      	uxtb	r3, r3
 800465c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004660:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	461a      	mov	r2, r3
 8004668:	2300      	movs	r3, #0
 800466a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466c:	f7fd fd1c 	bl	80020a8 <HAL_GetTick>
 8004670:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004674:	e00a      	b.n	800468c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004676:	f7fd fd17 	bl	80020a8 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d902      	bls.n	800468c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	f000 bd5a 	b.w	8005140 <HAL_RCC_OscConfig+0x106c>
 800468c:	2302      	movs	r3, #2
 800468e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004692:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004696:	fa93 f3a3 	rbit	r3, r3
 800469a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800469e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a2:	fab3 f383 	clz	r3, r3
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	095b      	lsrs	r3, r3, #5
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d104      	bne.n	80046c0 <HAL_RCC_OscConfig+0x5ec>
 80046b6:	4b01      	ldr	r3, [pc, #4]	@ (80046bc <HAL_RCC_OscConfig+0x5e8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	e015      	b.n	80046e8 <HAL_RCC_OscConfig+0x614>
 80046bc:	40021000 	.word	0x40021000
 80046c0:	2302      	movs	r3, #2
 80046c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80046ca:	fa93 f3a3 	rbit	r3, r3
 80046ce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80046d2:	2302      	movs	r3, #2
 80046d4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80046d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80046dc:	fa93 f3a3 	rbit	r3, r3
 80046e0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80046e4:	4bc8      	ldr	r3, [pc, #800]	@ (8004a08 <HAL_RCC_OscConfig+0x934>)
 80046e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e8:	2202      	movs	r2, #2
 80046ea:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80046ee:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80046f2:	fa92 f2a2 	rbit	r2, r2
 80046f6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80046fa:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80046fe:	fab2 f282 	clz	r2, r2
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	f042 0220 	orr.w	r2, r2, #32
 8004708:	b2d2      	uxtb	r2, r2
 800470a:	f002 021f 	and.w	r2, r2, #31
 800470e:	2101      	movs	r1, #1
 8004710:	fa01 f202 	lsl.w	r2, r1, r2
 8004714:	4013      	ands	r3, r2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1ad      	bne.n	8004676 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800471a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800471e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 8110 	beq.w	8004950 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004734:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d079      	beq.n	8004834 <HAL_RCC_OscConfig+0x760>
 8004740:	2301      	movs	r3, #1
 8004742:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004746:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800474a:	fa93 f3a3 	rbit	r3, r3
 800474e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8004752:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004756:	fab3 f383 	clz	r3, r3
 800475a:	b2db      	uxtb	r3, r3
 800475c:	461a      	mov	r2, r3
 800475e:	4bab      	ldr	r3, [pc, #684]	@ (8004a0c <HAL_RCC_OscConfig+0x938>)
 8004760:	4413      	add	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	461a      	mov	r2, r3
 8004766:	2301      	movs	r3, #1
 8004768:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800476a:	f7fd fc9d 	bl	80020a8 <HAL_GetTick>
 800476e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004772:	e00a      	b.n	800478a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004774:	f7fd fc98 	bl	80020a8 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d902      	bls.n	800478a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	f000 bcdb 	b.w	8005140 <HAL_RCC_OscConfig+0x106c>
 800478a:	2302      	movs	r3, #2
 800478c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004790:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004794:	fa93 f3a3 	rbit	r3, r3
 8004798:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800479c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80047a4:	2202      	movs	r2, #2
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ac:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	fa93 f2a3 	rbit	r2, r3
 80047b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047c8:	2202      	movs	r2, #2
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	fa93 f2a3 	rbit	r2, r3
 80047da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80047e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047e4:	4b88      	ldr	r3, [pc, #544]	@ (8004a08 <HAL_RCC_OscConfig+0x934>)
 80047e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80047f0:	2102      	movs	r1, #2
 80047f2:	6019      	str	r1, [r3, #0]
 80047f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047f8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	fa93 f1a3 	rbit	r1, r3
 8004802:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004806:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800480a:	6019      	str	r1, [r3, #0]
  return result;
 800480c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004810:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	fab3 f383 	clz	r3, r3
 800481a:	b2db      	uxtb	r3, r3
 800481c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004820:	b2db      	uxtb	r3, r3
 8004822:	f003 031f 	and.w	r3, r3, #31
 8004826:	2101      	movs	r1, #1
 8004828:	fa01 f303 	lsl.w	r3, r1, r3
 800482c:	4013      	ands	r3, r2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0a0      	beq.n	8004774 <HAL_RCC_OscConfig+0x6a0>
 8004832:	e08d      	b.n	8004950 <HAL_RCC_OscConfig+0x87c>
 8004834:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004838:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800483c:	2201      	movs	r2, #1
 800483e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004844:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	fa93 f2a3 	rbit	r2, r3
 800484e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004852:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004856:	601a      	str	r2, [r3, #0]
  return result;
 8004858:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800485c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004860:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004862:	fab3 f383 	clz	r3, r3
 8004866:	b2db      	uxtb	r3, r3
 8004868:	461a      	mov	r2, r3
 800486a:	4b68      	ldr	r3, [pc, #416]	@ (8004a0c <HAL_RCC_OscConfig+0x938>)
 800486c:	4413      	add	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	461a      	mov	r2, r3
 8004872:	2300      	movs	r3, #0
 8004874:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004876:	f7fd fc17 	bl	80020a8 <HAL_GetTick>
 800487a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800487e:	e00a      	b.n	8004896 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004880:	f7fd fc12 	bl	80020a8 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d902      	bls.n	8004896 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	f000 bc55 	b.w	8005140 <HAL_RCC_OscConfig+0x106c>
 8004896:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800489a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800489e:	2202      	movs	r2, #2
 80048a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048a6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	fa93 f2a3 	rbit	r2, r3
 80048b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048b4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048be:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80048c2:	2202      	movs	r2, #2
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048ca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	fa93 f2a3 	rbit	r2, r3
 80048d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048d8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80048dc:	601a      	str	r2, [r3, #0]
 80048de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048e2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80048e6:	2202      	movs	r2, #2
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048ee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	fa93 f2a3 	rbit	r2, r3
 80048f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048fc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004900:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004902:	4b41      	ldr	r3, [pc, #260]	@ (8004a08 <HAL_RCC_OscConfig+0x934>)
 8004904:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004906:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800490a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800490e:	2102      	movs	r1, #2
 8004910:	6019      	str	r1, [r3, #0]
 8004912:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004916:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	fa93 f1a3 	rbit	r1, r3
 8004920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004924:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004928:	6019      	str	r1, [r3, #0]
  return result;
 800492a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800492e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	fab3 f383 	clz	r3, r3
 8004938:	b2db      	uxtb	r3, r3
 800493a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800493e:	b2db      	uxtb	r3, r3
 8004940:	f003 031f 	and.w	r3, r3, #31
 8004944:	2101      	movs	r1, #1
 8004946:	fa01 f303 	lsl.w	r3, r1, r3
 800494a:	4013      	ands	r3, r2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d197      	bne.n	8004880 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004954:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 81a1 	beq.w	8004ca8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004966:	2300      	movs	r3, #0
 8004968:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800496c:	4b26      	ldr	r3, [pc, #152]	@ (8004a08 <HAL_RCC_OscConfig+0x934>)
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d116      	bne.n	80049a6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004978:	4b23      	ldr	r3, [pc, #140]	@ (8004a08 <HAL_RCC_OscConfig+0x934>)
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	4a22      	ldr	r2, [pc, #136]	@ (8004a08 <HAL_RCC_OscConfig+0x934>)
 800497e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004982:	61d3      	str	r3, [r2, #28]
 8004984:	4b20      	ldr	r3, [pc, #128]	@ (8004a08 <HAL_RCC_OscConfig+0x934>)
 8004986:	69db      	ldr	r3, [r3, #28]
 8004988:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800498c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004990:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800499a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800499e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80049a0:	2301      	movs	r3, #1
 80049a2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004a10 <HAL_RCC_OscConfig+0x93c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d11a      	bne.n	80049e8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049b2:	4b17      	ldr	r3, [pc, #92]	@ (8004a10 <HAL_RCC_OscConfig+0x93c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a16      	ldr	r2, [pc, #88]	@ (8004a10 <HAL_RCC_OscConfig+0x93c>)
 80049b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049be:	f7fd fb73 	bl	80020a8 <HAL_GetTick>
 80049c2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c6:	e009      	b.n	80049dc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049c8:	f7fd fb6e 	bl	80020a8 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b64      	cmp	r3, #100	@ 0x64
 80049d6:	d901      	bls.n	80049dc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e3b1      	b.n	8005140 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a10 <HAL_RCC_OscConfig+0x93c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0ef      	beq.n	80049c8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d10d      	bne.n	8004a14 <HAL_RCC_OscConfig+0x940>
 80049f8:	4b03      	ldr	r3, [pc, #12]	@ (8004a08 <HAL_RCC_OscConfig+0x934>)
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	4a02      	ldr	r2, [pc, #8]	@ (8004a08 <HAL_RCC_OscConfig+0x934>)
 80049fe:	f043 0301 	orr.w	r3, r3, #1
 8004a02:	6213      	str	r3, [r2, #32]
 8004a04:	e03c      	b.n	8004a80 <HAL_RCC_OscConfig+0x9ac>
 8004a06:	bf00      	nop
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	10908120 	.word	0x10908120
 8004a10:	40007000 	.word	0x40007000
 8004a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10c      	bne.n	8004a3e <HAL_RCC_OscConfig+0x96a>
 8004a24:	4bc1      	ldr	r3, [pc, #772]	@ (8004d2c <HAL_RCC_OscConfig+0xc58>)
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	4ac0      	ldr	r2, [pc, #768]	@ (8004d2c <HAL_RCC_OscConfig+0xc58>)
 8004a2a:	f023 0301 	bic.w	r3, r3, #1
 8004a2e:	6213      	str	r3, [r2, #32]
 8004a30:	4bbe      	ldr	r3, [pc, #760]	@ (8004d2c <HAL_RCC_OscConfig+0xc58>)
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	4abd      	ldr	r2, [pc, #756]	@ (8004d2c <HAL_RCC_OscConfig+0xc58>)
 8004a36:	f023 0304 	bic.w	r3, r3, #4
 8004a3a:	6213      	str	r3, [r2, #32]
 8004a3c:	e020      	b.n	8004a80 <HAL_RCC_OscConfig+0x9ac>
 8004a3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	2b05      	cmp	r3, #5
 8004a4c:	d10c      	bne.n	8004a68 <HAL_RCC_OscConfig+0x994>
 8004a4e:	4bb7      	ldr	r3, [pc, #732]	@ (8004d2c <HAL_RCC_OscConfig+0xc58>)
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	4ab6      	ldr	r2, [pc, #728]	@ (8004d2c <HAL_RCC_OscConfig+0xc58>)
 8004a54:	f043 0304 	orr.w	r3, r3, #4
 8004a58:	6213      	str	r3, [r2, #32]
 8004a5a:	4bb4      	ldr	r3, [pc, #720]	@ (8004d2c <HAL_RCC_OscConfig+0xc58>)
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	4ab3      	ldr	r2, [pc, #716]	@ (8004d2c <HAL_RCC_OscConfig+0xc58>)
 8004a60:	f043 0301 	orr.w	r3, r3, #1
 8004a64:	6213      	str	r3, [r2, #32]
 8004a66:	e00b      	b.n	8004a80 <HAL_RCC_OscConfig+0x9ac>
 8004a68:	4bb0      	ldr	r3, [pc, #704]	@ (8004d2c <HAL_RCC_OscConfig+0xc58>)
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	4aaf      	ldr	r2, [pc, #700]	@ (8004d2c <HAL_RCC_OscConfig+0xc58>)
 8004a6e:	f023 0301 	bic.w	r3, r3, #1
 8004a72:	6213      	str	r3, [r2, #32]
 8004a74:	4bad      	ldr	r3, [pc, #692]	@ (8004d2c <HAL_RCC_OscConfig+0xc58>)
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	4aac      	ldr	r2, [pc, #688]	@ (8004d2c <HAL_RCC_OscConfig+0xc58>)
 8004a7a:	f023 0304 	bic.w	r3, r3, #4
 8004a7e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 8081 	beq.w	8004b94 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a92:	f7fd fb09 	bl	80020a8 <HAL_GetTick>
 8004a96:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a9a:	e00b      	b.n	8004ab4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a9c:	f7fd fb04 	bl	80020a8 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e345      	b.n	8005140 <HAL_RCC_OscConfig+0x106c>
 8004ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ab8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004abc:	2202      	movs	r2, #2
 8004abe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ac4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	fa93 f2a3 	rbit	r2, r3
 8004ace:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ad2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004adc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ae8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	fa93 f2a3 	rbit	r2, r3
 8004af2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004af6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004afa:	601a      	str	r2, [r3, #0]
  return result;
 8004afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b00:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004b04:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b06:	fab3 f383 	clz	r3, r3
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	095b      	lsrs	r3, r3, #5
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	f043 0302 	orr.w	r3, r3, #2
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d102      	bne.n	8004b20 <HAL_RCC_OscConfig+0xa4c>
 8004b1a:	4b84      	ldr	r3, [pc, #528]	@ (8004d2c <HAL_RCC_OscConfig+0xc58>)
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	e013      	b.n	8004b48 <HAL_RCC_OscConfig+0xa74>
 8004b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b24:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004b28:	2202      	movs	r2, #2
 8004b2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b30:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	fa93 f2a3 	rbit	r2, r3
 8004b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b3e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	4b79      	ldr	r3, [pc, #484]	@ (8004d2c <HAL_RCC_OscConfig+0xc58>)
 8004b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b48:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b4c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004b50:	2102      	movs	r1, #2
 8004b52:	6011      	str	r1, [r2, #0]
 8004b54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b58:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004b5c:	6812      	ldr	r2, [r2, #0]
 8004b5e:	fa92 f1a2 	rbit	r1, r2
 8004b62:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b66:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004b6a:	6011      	str	r1, [r2, #0]
  return result;
 8004b6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004b70:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004b74:	6812      	ldr	r2, [r2, #0]
 8004b76:	fab2 f282 	clz	r2, r2
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	f002 021f 	and.w	r2, r2, #31
 8004b86:	2101      	movs	r1, #1
 8004b88:	fa01 f202 	lsl.w	r2, r1, r2
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d084      	beq.n	8004a9c <HAL_RCC_OscConfig+0x9c8>
 8004b92:	e07f      	b.n	8004c94 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b94:	f7fd fa88 	bl	80020a8 <HAL_GetTick>
 8004b98:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b9c:	e00b      	b.n	8004bb6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b9e:	f7fd fa83 	bl	80020a8 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e2c4      	b.n	8005140 <HAL_RCC_OscConfig+0x106c>
 8004bb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bba:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bc6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	fa93 f2a3 	rbit	r2, r3
 8004bd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bd4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bde:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004be2:	2202      	movs	r2, #2
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bea:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	fa93 f2a3 	rbit	r2, r3
 8004bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bf8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004bfc:	601a      	str	r2, [r3, #0]
  return result;
 8004bfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c02:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004c06:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c08:	fab3 f383 	clz	r3, r3
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	f043 0302 	orr.w	r3, r3, #2
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d102      	bne.n	8004c22 <HAL_RCC_OscConfig+0xb4e>
 8004c1c:	4b43      	ldr	r3, [pc, #268]	@ (8004d2c <HAL_RCC_OscConfig+0xc58>)
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	e013      	b.n	8004c4a <HAL_RCC_OscConfig+0xb76>
 8004c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c26:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c32:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	fa93 f2a3 	rbit	r2, r3
 8004c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c40:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	4b39      	ldr	r3, [pc, #228]	@ (8004d2c <HAL_RCC_OscConfig+0xc58>)
 8004c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c4e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004c52:	2102      	movs	r1, #2
 8004c54:	6011      	str	r1, [r2, #0]
 8004c56:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c5a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004c5e:	6812      	ldr	r2, [r2, #0]
 8004c60:	fa92 f1a2 	rbit	r1, r2
 8004c64:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c68:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004c6c:	6011      	str	r1, [r2, #0]
  return result;
 8004c6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004c72:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	fab2 f282 	clz	r2, r2
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c82:	b2d2      	uxtb	r2, r2
 8004c84:	f002 021f 	and.w	r2, r2, #31
 8004c88:	2101      	movs	r1, #1
 8004c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c8e:	4013      	ands	r3, r2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d184      	bne.n	8004b9e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c94:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d105      	bne.n	8004ca8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c9c:	4b23      	ldr	r3, [pc, #140]	@ (8004d2c <HAL_RCC_OscConfig+0xc58>)
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	4a22      	ldr	r2, [pc, #136]	@ (8004d2c <HAL_RCC_OscConfig+0xc58>)
 8004ca2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ca6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ca8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 8242 	beq.w	800513e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cba:	4b1c      	ldr	r3, [pc, #112]	@ (8004d2c <HAL_RCC_OscConfig+0xc58>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f003 030c 	and.w	r3, r3, #12
 8004cc2:	2b08      	cmp	r3, #8
 8004cc4:	f000 8213 	beq.w	80050ee <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ccc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	f040 8162 	bne.w	8004f9e <HAL_RCC_OscConfig+0xeca>
 8004cda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cde:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004ce2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ce6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cec:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	fa93 f2a3 	rbit	r2, r3
 8004cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cfa:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004cfe:	601a      	str	r2, [r3, #0]
  return result;
 8004d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d04:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004d08:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d0a:	fab3 f383 	clz	r3, r3
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004d14:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d20:	f7fd f9c2 	bl	80020a8 <HAL_GetTick>
 8004d24:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d28:	e00c      	b.n	8004d44 <HAL_RCC_OscConfig+0xc70>
 8004d2a:	bf00      	nop
 8004d2c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d30:	f7fd f9ba 	bl	80020a8 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e1fd      	b.n	8005140 <HAL_RCC_OscConfig+0x106c>
 8004d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d48:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004d4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d56:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	fa93 f2a3 	rbit	r2, r3
 8004d60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d64:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004d68:	601a      	str	r2, [r3, #0]
  return result;
 8004d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d6e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004d72:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d74:	fab3 f383 	clz	r3, r3
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	095b      	lsrs	r3, r3, #5
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	f043 0301 	orr.w	r3, r3, #1
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d102      	bne.n	8004d8e <HAL_RCC_OscConfig+0xcba>
 8004d88:	4bb0      	ldr	r3, [pc, #704]	@ (800504c <HAL_RCC_OscConfig+0xf78>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	e027      	b.n	8004dde <HAL_RCC_OscConfig+0xd0a>
 8004d8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d92:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004d96:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004d9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004da0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	fa93 f2a3 	rbit	r2, r3
 8004daa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dae:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004db8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004dbc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dc6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	fa93 f2a3 	rbit	r2, r3
 8004dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dd4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	4b9c      	ldr	r3, [pc, #624]	@ (800504c <HAL_RCC_OscConfig+0xf78>)
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dde:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004de2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004de6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004dea:	6011      	str	r1, [r2, #0]
 8004dec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004df0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004df4:	6812      	ldr	r2, [r2, #0]
 8004df6:	fa92 f1a2 	rbit	r1, r2
 8004dfa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004dfe:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004e02:	6011      	str	r1, [r2, #0]
  return result;
 8004e04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e08:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004e0c:	6812      	ldr	r2, [r2, #0]
 8004e0e:	fab2 f282 	clz	r2, r2
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	f042 0220 	orr.w	r2, r2, #32
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	f002 021f 	and.w	r2, r2, #31
 8004e1e:	2101      	movs	r1, #1
 8004e20:	fa01 f202 	lsl.w	r2, r1, r2
 8004e24:	4013      	ands	r3, r2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d182      	bne.n	8004d30 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e2a:	4b88      	ldr	r3, [pc, #544]	@ (800504c <HAL_RCC_OscConfig+0xf78>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004e32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004e3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	430b      	orrs	r3, r1
 8004e4c:	497f      	ldr	r1, [pc, #508]	@ (800504c <HAL_RCC_OscConfig+0xf78>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	604b      	str	r3, [r1, #4]
 8004e52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e56:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004e5a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e64:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	fa93 f2a3 	rbit	r2, r3
 8004e6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e72:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004e76:	601a      	str	r2, [r3, #0]
  return result;
 8004e78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e7c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8004e80:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e82:	fab3 f383 	clz	r3, r3
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004e8c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	461a      	mov	r2, r3
 8004e94:	2301      	movs	r3, #1
 8004e96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e98:	f7fd f906 	bl	80020a8 <HAL_GetTick>
 8004e9c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ea0:	e009      	b.n	8004eb6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea2:	f7fd f901 	bl	80020a8 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e144      	b.n	8005140 <HAL_RCC_OscConfig+0x106c>
 8004eb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eba:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004ebe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ec2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ec8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	fa93 f2a3 	rbit	r2, r3
 8004ed2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ed6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004eda:	601a      	str	r2, [r3, #0]
  return result;
 8004edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ee0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004ee4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ee6:	fab3 f383 	clz	r3, r3
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	095b      	lsrs	r3, r3, #5
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	f043 0301 	orr.w	r3, r3, #1
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d102      	bne.n	8004f00 <HAL_RCC_OscConfig+0xe2c>
 8004efa:	4b54      	ldr	r3, [pc, #336]	@ (800504c <HAL_RCC_OscConfig+0xf78>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	e027      	b.n	8004f50 <HAL_RCC_OscConfig+0xe7c>
 8004f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f04:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004f08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f12:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	fa93 f2a3 	rbit	r2, r3
 8004f1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f20:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f2a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004f2e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f38:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	fa93 f2a3 	rbit	r2, r3
 8004f42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f46:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	4b3f      	ldr	r3, [pc, #252]	@ (800504c <HAL_RCC_OscConfig+0xf78>)
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f50:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f54:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004f58:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004f5c:	6011      	str	r1, [r2, #0]
 8004f5e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f62:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8004f66:	6812      	ldr	r2, [r2, #0]
 8004f68:	fa92 f1a2 	rbit	r1, r2
 8004f6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f70:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004f74:	6011      	str	r1, [r2, #0]
  return result;
 8004f76:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f7a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004f7e:	6812      	ldr	r2, [r2, #0]
 8004f80:	fab2 f282 	clz	r2, r2
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	f042 0220 	orr.w	r2, r2, #32
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	f002 021f 	and.w	r2, r2, #31
 8004f90:	2101      	movs	r1, #1
 8004f92:	fa01 f202 	lsl.w	r2, r1, r2
 8004f96:	4013      	ands	r3, r2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d082      	beq.n	8004ea2 <HAL_RCC_OscConfig+0xdce>
 8004f9c:	e0cf      	b.n	800513e <HAL_RCC_OscConfig+0x106a>
 8004f9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fa2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004fa6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004faa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fb0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	fa93 f2a3 	rbit	r2, r3
 8004fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fbe:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004fc2:	601a      	str	r2, [r3, #0]
  return result;
 8004fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fc8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004fcc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fce:	fab3 f383 	clz	r3, r3
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004fd8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	461a      	mov	r2, r3
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe4:	f7fd f860 	bl	80020a8 <HAL_GetTick>
 8004fe8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fec:	e009      	b.n	8005002 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fee:	f7fd f85b 	bl	80020a8 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e09e      	b.n	8005140 <HAL_RCC_OscConfig+0x106c>
 8005002:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005006:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800500a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800500e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005010:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005014:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	fa93 f2a3 	rbit	r2, r3
 800501e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005022:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005026:	601a      	str	r2, [r3, #0]
  return result;
 8005028:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800502c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005030:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005032:	fab3 f383 	clz	r3, r3
 8005036:	b2db      	uxtb	r3, r3
 8005038:	095b      	lsrs	r3, r3, #5
 800503a:	b2db      	uxtb	r3, r3
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b01      	cmp	r3, #1
 8005044:	d104      	bne.n	8005050 <HAL_RCC_OscConfig+0xf7c>
 8005046:	4b01      	ldr	r3, [pc, #4]	@ (800504c <HAL_RCC_OscConfig+0xf78>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	e029      	b.n	80050a0 <HAL_RCC_OscConfig+0xfcc>
 800504c:	40021000 	.word	0x40021000
 8005050:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005054:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005058:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800505c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800505e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005062:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	fa93 f2a3 	rbit	r2, r3
 800506c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005070:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800507a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800507e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005088:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	fa93 f2a3 	rbit	r2, r3
 8005092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005096:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	4b2b      	ldr	r3, [pc, #172]	@ (800514c <HAL_RCC_OscConfig+0x1078>)
 800509e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80050a4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80050a8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80050ac:	6011      	str	r1, [r2, #0]
 80050ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80050b2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80050b6:	6812      	ldr	r2, [r2, #0]
 80050b8:	fa92 f1a2 	rbit	r1, r2
 80050bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80050c0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80050c4:	6011      	str	r1, [r2, #0]
  return result;
 80050c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80050ca:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	fab2 f282 	clz	r2, r2
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	f042 0220 	orr.w	r2, r2, #32
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	f002 021f 	and.w	r2, r2, #31
 80050e0:	2101      	movs	r1, #1
 80050e2:	fa01 f202 	lsl.w	r2, r1, r2
 80050e6:	4013      	ands	r3, r2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d180      	bne.n	8004fee <HAL_RCC_OscConfig+0xf1a>
 80050ec:	e027      	b.n	800513e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d101      	bne.n	8005102 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e01e      	b.n	8005140 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005102:	4b12      	ldr	r3, [pc, #72]	@ (800514c <HAL_RCC_OscConfig+0x1078>)
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800510a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800510e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005116:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	429a      	cmp	r2, r3
 8005120:	d10b      	bne.n	800513a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005122:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005126:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800512a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800512e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005136:	429a      	cmp	r2, r3
 8005138:	d001      	beq.n	800513e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e000      	b.n	8005140 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	40021000 	.word	0x40021000

08005150 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b09e      	sub	sp, #120	@ 0x78
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e162      	b.n	800542e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005168:	4b90      	ldr	r3, [pc, #576]	@ (80053ac <HAL_RCC_ClockConfig+0x25c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d910      	bls.n	8005198 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005176:	4b8d      	ldr	r3, [pc, #564]	@ (80053ac <HAL_RCC_ClockConfig+0x25c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f023 0207 	bic.w	r2, r3, #7
 800517e:	498b      	ldr	r1, [pc, #556]	@ (80053ac <HAL_RCC_ClockConfig+0x25c>)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	4313      	orrs	r3, r2
 8005184:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005186:	4b89      	ldr	r3, [pc, #548]	@ (80053ac <HAL_RCC_ClockConfig+0x25c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d001      	beq.n	8005198 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e14a      	b.n	800542e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d008      	beq.n	80051b6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051a4:	4b82      	ldr	r3, [pc, #520]	@ (80053b0 <HAL_RCC_ClockConfig+0x260>)
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	497f      	ldr	r1, [pc, #508]	@ (80053b0 <HAL_RCC_ClockConfig+0x260>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 80dc 	beq.w	800537c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d13c      	bne.n	8005246 <HAL_RCC_ClockConfig+0xf6>
 80051cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80051d0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80051d4:	fa93 f3a3 	rbit	r3, r3
 80051d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80051da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051dc:	fab3 f383 	clz	r3, r3
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	095b      	lsrs	r3, r3, #5
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	f043 0301 	orr.w	r3, r3, #1
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d102      	bne.n	80051f6 <HAL_RCC_ClockConfig+0xa6>
 80051f0:	4b6f      	ldr	r3, [pc, #444]	@ (80053b0 <HAL_RCC_ClockConfig+0x260>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	e00f      	b.n	8005216 <HAL_RCC_ClockConfig+0xc6>
 80051f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80051fa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80051fe:	fa93 f3a3 	rbit	r3, r3
 8005202:	667b      	str	r3, [r7, #100]	@ 0x64
 8005204:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005208:	663b      	str	r3, [r7, #96]	@ 0x60
 800520a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800520c:	fa93 f3a3 	rbit	r3, r3
 8005210:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005212:	4b67      	ldr	r3, [pc, #412]	@ (80053b0 <HAL_RCC_ClockConfig+0x260>)
 8005214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005216:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800521a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800521c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800521e:	fa92 f2a2 	rbit	r2, r2
 8005222:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8005224:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005226:	fab2 f282 	clz	r2, r2
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	f042 0220 	orr.w	r2, r2, #32
 8005230:	b2d2      	uxtb	r2, r2
 8005232:	f002 021f 	and.w	r2, r2, #31
 8005236:	2101      	movs	r1, #1
 8005238:	fa01 f202 	lsl.w	r2, r1, r2
 800523c:	4013      	ands	r3, r2
 800523e:	2b00      	cmp	r3, #0
 8005240:	d17b      	bne.n	800533a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e0f3      	b.n	800542e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2b02      	cmp	r3, #2
 800524c:	d13c      	bne.n	80052c8 <HAL_RCC_ClockConfig+0x178>
 800524e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005252:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005254:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005256:	fa93 f3a3 	rbit	r3, r3
 800525a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800525c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800525e:	fab3 f383 	clz	r3, r3
 8005262:	b2db      	uxtb	r3, r3
 8005264:	095b      	lsrs	r3, r3, #5
 8005266:	b2db      	uxtb	r3, r3
 8005268:	f043 0301 	orr.w	r3, r3, #1
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b01      	cmp	r3, #1
 8005270:	d102      	bne.n	8005278 <HAL_RCC_ClockConfig+0x128>
 8005272:	4b4f      	ldr	r3, [pc, #316]	@ (80053b0 <HAL_RCC_ClockConfig+0x260>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	e00f      	b.n	8005298 <HAL_RCC_ClockConfig+0x148>
 8005278:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800527c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800527e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005280:	fa93 f3a3 	rbit	r3, r3
 8005284:	647b      	str	r3, [r7, #68]	@ 0x44
 8005286:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800528a:	643b      	str	r3, [r7, #64]	@ 0x40
 800528c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800528e:	fa93 f3a3 	rbit	r3, r3
 8005292:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005294:	4b46      	ldr	r3, [pc, #280]	@ (80053b0 <HAL_RCC_ClockConfig+0x260>)
 8005296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005298:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800529c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800529e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80052a0:	fa92 f2a2 	rbit	r2, r2
 80052a4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80052a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052a8:	fab2 f282 	clz	r2, r2
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	f042 0220 	orr.w	r2, r2, #32
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	f002 021f 	and.w	r2, r2, #31
 80052b8:	2101      	movs	r1, #1
 80052ba:	fa01 f202 	lsl.w	r2, r1, r2
 80052be:	4013      	ands	r3, r2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d13a      	bne.n	800533a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e0b2      	b.n	800542e <HAL_RCC_ClockConfig+0x2de>
 80052c8:	2302      	movs	r3, #2
 80052ca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ce:	fa93 f3a3 	rbit	r3, r3
 80052d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80052d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052d6:	fab3 f383 	clz	r3, r3
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	095b      	lsrs	r3, r3, #5
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	f043 0301 	orr.w	r3, r3, #1
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d102      	bne.n	80052f0 <HAL_RCC_ClockConfig+0x1a0>
 80052ea:	4b31      	ldr	r3, [pc, #196]	@ (80053b0 <HAL_RCC_ClockConfig+0x260>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	e00d      	b.n	800530c <HAL_RCC_ClockConfig+0x1bc>
 80052f0:	2302      	movs	r3, #2
 80052f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f6:	fa93 f3a3 	rbit	r3, r3
 80052fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80052fc:	2302      	movs	r3, #2
 80052fe:	623b      	str	r3, [r7, #32]
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	fa93 f3a3 	rbit	r3, r3
 8005306:	61fb      	str	r3, [r7, #28]
 8005308:	4b29      	ldr	r3, [pc, #164]	@ (80053b0 <HAL_RCC_ClockConfig+0x260>)
 800530a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530c:	2202      	movs	r2, #2
 800530e:	61ba      	str	r2, [r7, #24]
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	fa92 f2a2 	rbit	r2, r2
 8005316:	617a      	str	r2, [r7, #20]
  return result;
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	fab2 f282 	clz	r2, r2
 800531e:	b2d2      	uxtb	r2, r2
 8005320:	f042 0220 	orr.w	r2, r2, #32
 8005324:	b2d2      	uxtb	r2, r2
 8005326:	f002 021f 	and.w	r2, r2, #31
 800532a:	2101      	movs	r1, #1
 800532c:	fa01 f202 	lsl.w	r2, r1, r2
 8005330:	4013      	ands	r3, r2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e079      	b.n	800542e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800533a:	4b1d      	ldr	r3, [pc, #116]	@ (80053b0 <HAL_RCC_ClockConfig+0x260>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f023 0203 	bic.w	r2, r3, #3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	491a      	ldr	r1, [pc, #104]	@ (80053b0 <HAL_RCC_ClockConfig+0x260>)
 8005348:	4313      	orrs	r3, r2
 800534a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800534c:	f7fc feac 	bl	80020a8 <HAL_GetTick>
 8005350:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005352:	e00a      	b.n	800536a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005354:	f7fc fea8 	bl	80020a8 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005362:	4293      	cmp	r3, r2
 8005364:	d901      	bls.n	800536a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e061      	b.n	800542e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800536a:	4b11      	ldr	r3, [pc, #68]	@ (80053b0 <HAL_RCC_ClockConfig+0x260>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f003 020c 	and.w	r2, r3, #12
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	429a      	cmp	r2, r3
 800537a:	d1eb      	bne.n	8005354 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800537c:	4b0b      	ldr	r3, [pc, #44]	@ (80053ac <HAL_RCC_ClockConfig+0x25c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	429a      	cmp	r2, r3
 8005388:	d214      	bcs.n	80053b4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800538a:	4b08      	ldr	r3, [pc, #32]	@ (80053ac <HAL_RCC_ClockConfig+0x25c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f023 0207 	bic.w	r2, r3, #7
 8005392:	4906      	ldr	r1, [pc, #24]	@ (80053ac <HAL_RCC_ClockConfig+0x25c>)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	4313      	orrs	r3, r2
 8005398:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800539a:	4b04      	ldr	r3, [pc, #16]	@ (80053ac <HAL_RCC_ClockConfig+0x25c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d005      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e040      	b.n	800542e <HAL_RCC_ClockConfig+0x2de>
 80053ac:	40022000 	.word	0x40022000
 80053b0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d008      	beq.n	80053d2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005438 <HAL_RCC_ClockConfig+0x2e8>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	491a      	ldr	r1, [pc, #104]	@ (8005438 <HAL_RCC_ClockConfig+0x2e8>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0308 	and.w	r3, r3, #8
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d009      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053de:	4b16      	ldr	r3, [pc, #88]	@ (8005438 <HAL_RCC_ClockConfig+0x2e8>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	4912      	ldr	r1, [pc, #72]	@ (8005438 <HAL_RCC_ClockConfig+0x2e8>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80053f2:	f000 f829 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 80053f6:	4601      	mov	r1, r0
 80053f8:	4b0f      	ldr	r3, [pc, #60]	@ (8005438 <HAL_RCC_ClockConfig+0x2e8>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005400:	22f0      	movs	r2, #240	@ 0xf0
 8005402:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	fa92 f2a2 	rbit	r2, r2
 800540a:	60fa      	str	r2, [r7, #12]
  return result;
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	fab2 f282 	clz	r2, r2
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	40d3      	lsrs	r3, r2
 8005416:	4a09      	ldr	r2, [pc, #36]	@ (800543c <HAL_RCC_ClockConfig+0x2ec>)
 8005418:	5cd3      	ldrb	r3, [r2, r3]
 800541a:	fa21 f303 	lsr.w	r3, r1, r3
 800541e:	4a08      	ldr	r2, [pc, #32]	@ (8005440 <HAL_RCC_ClockConfig+0x2f0>)
 8005420:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005422:	4b08      	ldr	r3, [pc, #32]	@ (8005444 <HAL_RCC_ClockConfig+0x2f4>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4618      	mov	r0, r3
 8005428:	f7fc fdfa 	bl	8002020 <HAL_InitTick>
  
  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3778      	adds	r7, #120	@ 0x78
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	40021000 	.word	0x40021000
 800543c:	08007828 	.word	0x08007828
 8005440:	20000040 	.word	0x20000040
 8005444:	20000044 	.word	0x20000044

08005448 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	60fb      	str	r3, [r7, #12]
 8005452:	2300      	movs	r3, #0
 8005454:	60bb      	str	r3, [r7, #8]
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]
 800545a:	2300      	movs	r3, #0
 800545c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800545e:	2300      	movs	r3, #0
 8005460:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005462:	4b1e      	ldr	r3, [pc, #120]	@ (80054dc <HAL_RCC_GetSysClockFreq+0x94>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f003 030c 	and.w	r3, r3, #12
 800546e:	2b04      	cmp	r3, #4
 8005470:	d002      	beq.n	8005478 <HAL_RCC_GetSysClockFreq+0x30>
 8005472:	2b08      	cmp	r3, #8
 8005474:	d003      	beq.n	800547e <HAL_RCC_GetSysClockFreq+0x36>
 8005476:	e026      	b.n	80054c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005478:	4b19      	ldr	r3, [pc, #100]	@ (80054e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800547a:	613b      	str	r3, [r7, #16]
      break;
 800547c:	e026      	b.n	80054cc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	0c9b      	lsrs	r3, r3, #18
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	4a17      	ldr	r2, [pc, #92]	@ (80054e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005488:	5cd3      	ldrb	r3, [r2, r3]
 800548a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800548c:	4b13      	ldr	r3, [pc, #76]	@ (80054dc <HAL_RCC_GetSysClockFreq+0x94>)
 800548e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005490:	f003 030f 	and.w	r3, r3, #15
 8005494:	4a14      	ldr	r2, [pc, #80]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005496:	5cd3      	ldrb	r3, [r2, r3]
 8005498:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d008      	beq.n	80054b6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80054a4:	4a0e      	ldr	r2, [pc, #56]	@ (80054e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	fb02 f303 	mul.w	r3, r2, r3
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	e004      	b.n	80054c0 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a0c      	ldr	r2, [pc, #48]	@ (80054ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80054ba:	fb02 f303 	mul.w	r3, r2, r3
 80054be:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	613b      	str	r3, [r7, #16]
      break;
 80054c4:	e002      	b.n	80054cc <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054c6:	4b06      	ldr	r3, [pc, #24]	@ (80054e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80054c8:	613b      	str	r3, [r7, #16]
      break;
 80054ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054cc:	693b      	ldr	r3, [r7, #16]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	40021000 	.word	0x40021000
 80054e0:	007a1200 	.word	0x007a1200
 80054e4:	08007840 	.word	0x08007840
 80054e8:	08007850 	.word	0x08007850
 80054ec:	003d0900 	.word	0x003d0900

080054f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054f4:	4b03      	ldr	r3, [pc, #12]	@ (8005504 <HAL_RCC_GetHCLKFreq+0x14>)
 80054f6:	681b      	ldr	r3, [r3, #0]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	20000040 	.word	0x20000040

08005508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800550e:	f7ff ffef 	bl	80054f0 <HAL_RCC_GetHCLKFreq>
 8005512:	4601      	mov	r1, r0
 8005514:	4b0b      	ldr	r3, [pc, #44]	@ (8005544 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800551c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005520:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	fa92 f2a2 	rbit	r2, r2
 8005528:	603a      	str	r2, [r7, #0]
  return result;
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	fab2 f282 	clz	r2, r2
 8005530:	b2d2      	uxtb	r2, r2
 8005532:	40d3      	lsrs	r3, r2
 8005534:	4a04      	ldr	r2, [pc, #16]	@ (8005548 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005536:	5cd3      	ldrb	r3, [r2, r3]
 8005538:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800553c:	4618      	mov	r0, r3
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	40021000 	.word	0x40021000
 8005548:	08007838 	.word	0x08007838

0800554c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005552:	f7ff ffcd 	bl	80054f0 <HAL_RCC_GetHCLKFreq>
 8005556:	4601      	mov	r1, r0
 8005558:	4b0b      	ldr	r3, [pc, #44]	@ (8005588 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8005560:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8005564:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	fa92 f2a2 	rbit	r2, r2
 800556c:	603a      	str	r2, [r7, #0]
  return result;
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	fab2 f282 	clz	r2, r2
 8005574:	b2d2      	uxtb	r2, r2
 8005576:	40d3      	lsrs	r3, r2
 8005578:	4a04      	ldr	r2, [pc, #16]	@ (800558c <HAL_RCC_GetPCLK2Freq+0x40>)
 800557a:	5cd3      	ldrb	r3, [r2, r3]
 800557c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005580:	4618      	mov	r0, r3
 8005582:	3708      	adds	r7, #8
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	40021000 	.word	0x40021000
 800558c:	08007838 	.word	0x08007838

08005590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e049      	b.n	8005636 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fc fb80 	bl	8001cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3304      	adds	r3, #4
 80055cc:	4619      	mov	r1, r3
 80055ce:	4610      	mov	r0, r2
 80055d0:	f000 fcf2 	bl	8005fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
	...

08005640 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b01      	cmp	r3, #1
 8005652:	d001      	beq.n	8005658 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e040      	b.n	80056da <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0201 	orr.w	r2, r2, #1
 800566e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a1c      	ldr	r2, [pc, #112]	@ (80056e8 <HAL_TIM_Base_Start_IT+0xa8>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00e      	beq.n	8005698 <HAL_TIM_Base_Start_IT+0x58>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005682:	d009      	beq.n	8005698 <HAL_TIM_Base_Start_IT+0x58>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a18      	ldr	r2, [pc, #96]	@ (80056ec <HAL_TIM_Base_Start_IT+0xac>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d004      	beq.n	8005698 <HAL_TIM_Base_Start_IT+0x58>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a17      	ldr	r2, [pc, #92]	@ (80056f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d115      	bne.n	80056c4 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689a      	ldr	r2, [r3, #8]
 800569e:	4b15      	ldr	r3, [pc, #84]	@ (80056f4 <HAL_TIM_Base_Start_IT+0xb4>)
 80056a0:	4013      	ands	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2b06      	cmp	r3, #6
 80056a8:	d015      	beq.n	80056d6 <HAL_TIM_Base_Start_IT+0x96>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056b0:	d011      	beq.n	80056d6 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f042 0201 	orr.w	r2, r2, #1
 80056c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c2:	e008      	b.n	80056d6 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0201 	orr.w	r2, r2, #1
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	e000      	b.n	80056d8 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40012c00 	.word	0x40012c00
 80056ec:	40000400 	.word	0x40000400
 80056f0:	40014000 	.word	0x40014000
 80056f4:	00010007 	.word	0x00010007

080056f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e049      	b.n	800579e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d106      	bne.n	8005724 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f841 	bl	80057a6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3304      	adds	r3, #4
 8005734:	4619      	mov	r1, r3
 8005736:	4610      	mov	r0, r2
 8005738:	f000 fc3e 	bl	8005fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
	...

080057bc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d104      	bne.n	80057da <HAL_TIM_IC_Start_IT+0x1e>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	e023      	b.n	8005822 <HAL_TIM_IC_Start_IT+0x66>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d104      	bne.n	80057ea <HAL_TIM_IC_Start_IT+0x2e>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	e01b      	b.n	8005822 <HAL_TIM_IC_Start_IT+0x66>
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b08      	cmp	r3, #8
 80057ee:	d104      	bne.n	80057fa <HAL_TIM_IC_Start_IT+0x3e>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	e013      	b.n	8005822 <HAL_TIM_IC_Start_IT+0x66>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b0c      	cmp	r3, #12
 80057fe:	d104      	bne.n	800580a <HAL_TIM_IC_Start_IT+0x4e>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005806:	b2db      	uxtb	r3, r3
 8005808:	e00b      	b.n	8005822 <HAL_TIM_IC_Start_IT+0x66>
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2b10      	cmp	r3, #16
 800580e:	d104      	bne.n	800581a <HAL_TIM_IC_Start_IT+0x5e>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005816:	b2db      	uxtb	r3, r3
 8005818:	e003      	b.n	8005822 <HAL_TIM_IC_Start_IT+0x66>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005820:	b2db      	uxtb	r3, r3
 8005822:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d104      	bne.n	8005834 <HAL_TIM_IC_Start_IT+0x78>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005830:	b2db      	uxtb	r3, r3
 8005832:	e013      	b.n	800585c <HAL_TIM_IC_Start_IT+0xa0>
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	2b04      	cmp	r3, #4
 8005838:	d104      	bne.n	8005844 <HAL_TIM_IC_Start_IT+0x88>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005840:	b2db      	uxtb	r3, r3
 8005842:	e00b      	b.n	800585c <HAL_TIM_IC_Start_IT+0xa0>
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	2b08      	cmp	r3, #8
 8005848:	d104      	bne.n	8005854 <HAL_TIM_IC_Start_IT+0x98>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005850:	b2db      	uxtb	r3, r3
 8005852:	e003      	b.n	800585c <HAL_TIM_IC_Start_IT+0xa0>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800585a:	b2db      	uxtb	r3, r3
 800585c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800585e:	7bbb      	ldrb	r3, [r7, #14]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d102      	bne.n	800586a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005864:	7b7b      	ldrb	r3, [r7, #13]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d001      	beq.n	800586e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e0ce      	b.n	8005a0c <HAL_TIM_IC_Start_IT+0x250>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d104      	bne.n	800587e <HAL_TIM_IC_Start_IT+0xc2>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800587c:	e023      	b.n	80058c6 <HAL_TIM_IC_Start_IT+0x10a>
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	2b04      	cmp	r3, #4
 8005882:	d104      	bne.n	800588e <HAL_TIM_IC_Start_IT+0xd2>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800588c:	e01b      	b.n	80058c6 <HAL_TIM_IC_Start_IT+0x10a>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b08      	cmp	r3, #8
 8005892:	d104      	bne.n	800589e <HAL_TIM_IC_Start_IT+0xe2>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800589c:	e013      	b.n	80058c6 <HAL_TIM_IC_Start_IT+0x10a>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b0c      	cmp	r3, #12
 80058a2:	d104      	bne.n	80058ae <HAL_TIM_IC_Start_IT+0xf2>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058ac:	e00b      	b.n	80058c6 <HAL_TIM_IC_Start_IT+0x10a>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b10      	cmp	r3, #16
 80058b2:	d104      	bne.n	80058be <HAL_TIM_IC_Start_IT+0x102>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058bc:	e003      	b.n	80058c6 <HAL_TIM_IC_Start_IT+0x10a>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2202      	movs	r2, #2
 80058c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d104      	bne.n	80058d6 <HAL_TIM_IC_Start_IT+0x11a>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058d4:	e013      	b.n	80058fe <HAL_TIM_IC_Start_IT+0x142>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b04      	cmp	r3, #4
 80058da:	d104      	bne.n	80058e6 <HAL_TIM_IC_Start_IT+0x12a>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058e4:	e00b      	b.n	80058fe <HAL_TIM_IC_Start_IT+0x142>
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d104      	bne.n	80058f6 <HAL_TIM_IC_Start_IT+0x13a>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058f4:	e003      	b.n	80058fe <HAL_TIM_IC_Start_IT+0x142>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2202      	movs	r2, #2
 80058fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b0c      	cmp	r3, #12
 8005902:	d841      	bhi.n	8005988 <HAL_TIM_IC_Start_IT+0x1cc>
 8005904:	a201      	add	r2, pc, #4	@ (adr r2, 800590c <HAL_TIM_IC_Start_IT+0x150>)
 8005906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590a:	bf00      	nop
 800590c:	08005941 	.word	0x08005941
 8005910:	08005989 	.word	0x08005989
 8005914:	08005989 	.word	0x08005989
 8005918:	08005989 	.word	0x08005989
 800591c:	08005953 	.word	0x08005953
 8005920:	08005989 	.word	0x08005989
 8005924:	08005989 	.word	0x08005989
 8005928:	08005989 	.word	0x08005989
 800592c:	08005965 	.word	0x08005965
 8005930:	08005989 	.word	0x08005989
 8005934:	08005989 	.word	0x08005989
 8005938:	08005989 	.word	0x08005989
 800593c:	08005977 	.word	0x08005977
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68da      	ldr	r2, [r3, #12]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0202 	orr.w	r2, r2, #2
 800594e:	60da      	str	r2, [r3, #12]
      break;
 8005950:	e01d      	b.n	800598e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68da      	ldr	r2, [r3, #12]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f042 0204 	orr.w	r2, r2, #4
 8005960:	60da      	str	r2, [r3, #12]
      break;
 8005962:	e014      	b.n	800598e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0208 	orr.w	r2, r2, #8
 8005972:	60da      	str	r2, [r3, #12]
      break;
 8005974:	e00b      	b.n	800598e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68da      	ldr	r2, [r3, #12]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f042 0210 	orr.w	r2, r2, #16
 8005984:	60da      	str	r2, [r3, #12]
      break;
 8005986:	e002      	b.n	800598e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	73fb      	strb	r3, [r7, #15]
      break;
 800598c:	bf00      	nop
  }

  if (status == HAL_OK)
 800598e:	7bfb      	ldrb	r3, [r7, #15]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d13a      	bne.n	8005a0a <HAL_TIM_IC_Start_IT+0x24e>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2201      	movs	r2, #1
 800599a:	6839      	ldr	r1, [r7, #0]
 800599c:	4618      	mov	r0, r3
 800599e:	f000 fd3b 	bl	8006418 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a1b      	ldr	r2, [pc, #108]	@ (8005a14 <HAL_TIM_IC_Start_IT+0x258>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00e      	beq.n	80059ca <HAL_TIM_IC_Start_IT+0x20e>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059b4:	d009      	beq.n	80059ca <HAL_TIM_IC_Start_IT+0x20e>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a17      	ldr	r2, [pc, #92]	@ (8005a18 <HAL_TIM_IC_Start_IT+0x25c>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d004      	beq.n	80059ca <HAL_TIM_IC_Start_IT+0x20e>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a15      	ldr	r2, [pc, #84]	@ (8005a1c <HAL_TIM_IC_Start_IT+0x260>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d115      	bne.n	80059f6 <HAL_TIM_IC_Start_IT+0x23a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	4b13      	ldr	r3, [pc, #76]	@ (8005a20 <HAL_TIM_IC_Start_IT+0x264>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2b06      	cmp	r3, #6
 80059da:	d015      	beq.n	8005a08 <HAL_TIM_IC_Start_IT+0x24c>
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059e2:	d011      	beq.n	8005a08 <HAL_TIM_IC_Start_IT+0x24c>
      {
        __HAL_TIM_ENABLE(htim);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0201 	orr.w	r2, r2, #1
 80059f2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f4:	e008      	b.n	8005a08 <HAL_TIM_IC_Start_IT+0x24c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f042 0201 	orr.w	r2, r2, #1
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	e000      	b.n	8005a0a <HAL_TIM_IC_Start_IT+0x24e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a08:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40012c00 	.word	0x40012c00
 8005a18:	40000400 	.word	0x40000400
 8005a1c:	40014000 	.word	0x40014000
 8005a20:	00010007 	.word	0x00010007

08005a24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d020      	beq.n	8005a88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01b      	beq.n	8005a88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f06f 0202 	mvn.w	r2, #2
 8005a58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	f003 0303 	and.w	r3, r3, #3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7fb ff06 	bl	8001880 <HAL_TIM_IC_CaptureCallback>
 8005a74:	e005      	b.n	8005a82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fa80 	bl	8005f7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 fa87 	bl	8005f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f003 0304 	and.w	r3, r3, #4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d020      	beq.n	8005ad4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d01b      	beq.n	8005ad4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f06f 0204 	mvn.w	r2, #4
 8005aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f7fb fee0 	bl	8001880 <HAL_TIM_IC_CaptureCallback>
 8005ac0:	e005      	b.n	8005ace <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fa5a 	bl	8005f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fa61 	bl	8005f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d020      	beq.n	8005b20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01b      	beq.n	8005b20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f06f 0208 	mvn.w	r2, #8
 8005af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2204      	movs	r2, #4
 8005af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	f003 0303 	and.w	r3, r3, #3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7fb feba 	bl	8001880 <HAL_TIM_IC_CaptureCallback>
 8005b0c:	e005      	b.n	8005b1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fa34 	bl	8005f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fa3b 	bl	8005f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f003 0310 	and.w	r3, r3, #16
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d020      	beq.n	8005b6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f003 0310 	and.w	r3, r3, #16
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d01b      	beq.n	8005b6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f06f 0210 	mvn.w	r2, #16
 8005b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2208      	movs	r2, #8
 8005b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7fb fe94 	bl	8001880 <HAL_TIM_IC_CaptureCallback>
 8005b58:	e005      	b.n	8005b66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fa0e 	bl	8005f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fa15 	bl	8005f90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00c      	beq.n	8005b90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d007      	beq.n	8005b90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0201 	mvn.w	r2, #1
 8005b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7fb fef4 	bl	8001978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00c      	beq.n	8005bb4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d007      	beq.n	8005bb4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fcd0 	bl	8006554 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00c      	beq.n	8005bd8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d007      	beq.n	8005bd8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 fcc8 	bl	8006568 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00c      	beq.n	8005bfc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d007      	beq.n	8005bfc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f9d4 	bl	8005fa4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f003 0320 	and.w	r3, r3, #32
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00c      	beq.n	8005c20 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f003 0320 	and.w	r3, r3, #32
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d007      	beq.n	8005c20 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f06f 0220 	mvn.w	r2, #32
 8005c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 fc90 	bl	8006540 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c20:	bf00      	nop
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d101      	bne.n	8005c46 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005c42:	2302      	movs	r3, #2
 8005c44:	e088      	b.n	8005d58 <HAL_TIM_IC_ConfigChannel+0x130>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d11b      	bne.n	8005c8c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005c64:	f000 fa2c 	bl	80060c0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699a      	ldr	r2, [r3, #24]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 020c 	bic.w	r2, r2, #12
 8005c76:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6999      	ldr	r1, [r3, #24]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	619a      	str	r2, [r3, #24]
 8005c8a:	e060      	b.n	8005d4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d11c      	bne.n	8005ccc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005ca2:	f000 fa98 	bl	80061d6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	699a      	ldr	r2, [r3, #24]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005cb4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6999      	ldr	r1, [r3, #24]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	021a      	lsls	r2, r3, #8
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	619a      	str	r2, [r3, #24]
 8005cca:	e040      	b.n	8005d4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b08      	cmp	r3, #8
 8005cd0:	d11b      	bne.n	8005d0a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005ce2:	f000 fae5 	bl	80062b0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69da      	ldr	r2, [r3, #28]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 020c 	bic.w	r2, r2, #12
 8005cf4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69d9      	ldr	r1, [r3, #28]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	61da      	str	r2, [r3, #28]
 8005d08:	e021      	b.n	8005d4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b0c      	cmp	r3, #12
 8005d0e:	d11c      	bne.n	8005d4a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005d20:	f000 fb02 	bl	8006328 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	69da      	ldr	r2, [r3, #28]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005d32:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	69d9      	ldr	r1, [r3, #28]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	021a      	lsls	r2, r3, #8
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	61da      	str	r2, [r3, #28]
 8005d48:	e001      	b.n	8005d4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d101      	bne.n	8005d7c <HAL_TIM_ConfigClockSource+0x1c>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	e0b6      	b.n	8005eea <HAL_TIM_ConfigClockSource+0x18a>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d9a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005da6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005db8:	d03e      	beq.n	8005e38 <HAL_TIM_ConfigClockSource+0xd8>
 8005dba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005dbe:	f200 8087 	bhi.w	8005ed0 <HAL_TIM_ConfigClockSource+0x170>
 8005dc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dc6:	f000 8086 	beq.w	8005ed6 <HAL_TIM_ConfigClockSource+0x176>
 8005dca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dce:	d87f      	bhi.n	8005ed0 <HAL_TIM_ConfigClockSource+0x170>
 8005dd0:	2b70      	cmp	r3, #112	@ 0x70
 8005dd2:	d01a      	beq.n	8005e0a <HAL_TIM_ConfigClockSource+0xaa>
 8005dd4:	2b70      	cmp	r3, #112	@ 0x70
 8005dd6:	d87b      	bhi.n	8005ed0 <HAL_TIM_ConfigClockSource+0x170>
 8005dd8:	2b60      	cmp	r3, #96	@ 0x60
 8005dda:	d050      	beq.n	8005e7e <HAL_TIM_ConfigClockSource+0x11e>
 8005ddc:	2b60      	cmp	r3, #96	@ 0x60
 8005dde:	d877      	bhi.n	8005ed0 <HAL_TIM_ConfigClockSource+0x170>
 8005de0:	2b50      	cmp	r3, #80	@ 0x50
 8005de2:	d03c      	beq.n	8005e5e <HAL_TIM_ConfigClockSource+0xfe>
 8005de4:	2b50      	cmp	r3, #80	@ 0x50
 8005de6:	d873      	bhi.n	8005ed0 <HAL_TIM_ConfigClockSource+0x170>
 8005de8:	2b40      	cmp	r3, #64	@ 0x40
 8005dea:	d058      	beq.n	8005e9e <HAL_TIM_ConfigClockSource+0x13e>
 8005dec:	2b40      	cmp	r3, #64	@ 0x40
 8005dee:	d86f      	bhi.n	8005ed0 <HAL_TIM_ConfigClockSource+0x170>
 8005df0:	2b30      	cmp	r3, #48	@ 0x30
 8005df2:	d064      	beq.n	8005ebe <HAL_TIM_ConfigClockSource+0x15e>
 8005df4:	2b30      	cmp	r3, #48	@ 0x30
 8005df6:	d86b      	bhi.n	8005ed0 <HAL_TIM_ConfigClockSource+0x170>
 8005df8:	2b20      	cmp	r3, #32
 8005dfa:	d060      	beq.n	8005ebe <HAL_TIM_ConfigClockSource+0x15e>
 8005dfc:	2b20      	cmp	r3, #32
 8005dfe:	d867      	bhi.n	8005ed0 <HAL_TIM_ConfigClockSource+0x170>
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d05c      	beq.n	8005ebe <HAL_TIM_ConfigClockSource+0x15e>
 8005e04:	2b10      	cmp	r3, #16
 8005e06:	d05a      	beq.n	8005ebe <HAL_TIM_ConfigClockSource+0x15e>
 8005e08:	e062      	b.n	8005ed0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e1a:	f000 fadd 	bl	80063d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	609a      	str	r2, [r3, #8]
      break;
 8005e36:	e04f      	b.n	8005ed8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e48:	f000 fac6 	bl	80063d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689a      	ldr	r2, [r3, #8]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e5a:	609a      	str	r2, [r3, #8]
      break;
 8005e5c:	e03c      	b.n	8005ed8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f000 f984 	bl	8006178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2150      	movs	r1, #80	@ 0x50
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 fa93 	bl	80063a2 <TIM_ITRx_SetConfig>
      break;
 8005e7c:	e02c      	b.n	8005ed8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	f000 f9e0 	bl	8006250 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2160      	movs	r1, #96	@ 0x60
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 fa83 	bl	80063a2 <TIM_ITRx_SetConfig>
      break;
 8005e9c:	e01c      	b.n	8005ed8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f000 f964 	bl	8006178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2140      	movs	r1, #64	@ 0x40
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 fa73 	bl	80063a2 <TIM_ITRx_SetConfig>
      break;
 8005ebc:	e00c      	b.n	8005ed8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	4610      	mov	r0, r2
 8005eca:	f000 fa6a 	bl	80063a2 <TIM_ITRx_SetConfig>
      break;
 8005ece:	e003      	b.n	8005ed8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ed4:	e000      	b.n	8005ed8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005ed6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
	...

08005ef4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b0c      	cmp	r3, #12
 8005f06:	d831      	bhi.n	8005f6c <HAL_TIM_ReadCapturedValue+0x78>
 8005f08:	a201      	add	r2, pc, #4	@ (adr r2, 8005f10 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0e:	bf00      	nop
 8005f10:	08005f45 	.word	0x08005f45
 8005f14:	08005f6d 	.word	0x08005f6d
 8005f18:	08005f6d 	.word	0x08005f6d
 8005f1c:	08005f6d 	.word	0x08005f6d
 8005f20:	08005f4f 	.word	0x08005f4f
 8005f24:	08005f6d 	.word	0x08005f6d
 8005f28:	08005f6d 	.word	0x08005f6d
 8005f2c:	08005f6d 	.word	0x08005f6d
 8005f30:	08005f59 	.word	0x08005f59
 8005f34:	08005f6d 	.word	0x08005f6d
 8005f38:	08005f6d 	.word	0x08005f6d
 8005f3c:	08005f6d 	.word	0x08005f6d
 8005f40:	08005f63 	.word	0x08005f63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f4a:	60fb      	str	r3, [r7, #12]

      break;
 8005f4c:	e00f      	b.n	8005f6e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f54:	60fb      	str	r3, [r7, #12]

      break;
 8005f56:	e00a      	b.n	8005f6e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f5e:	60fb      	str	r3, [r7, #12]

      break;
 8005f60:	e005      	b.n	8005f6e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f68:	60fb      	str	r3, [r7, #12]

      break;
 8005f6a:	e000      	b.n	8005f6e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005f6c:	bf00      	nop
  }

  return tmpreg;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a38      	ldr	r2, [pc, #224]	@ (80060ac <TIM_Base_SetConfig+0xf4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d007      	beq.n	8005fe0 <TIM_Base_SetConfig+0x28>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fd6:	d003      	beq.n	8005fe0 <TIM_Base_SetConfig+0x28>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a35      	ldr	r2, [pc, #212]	@ (80060b0 <TIM_Base_SetConfig+0xf8>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d108      	bne.n	8005ff2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a2d      	ldr	r2, [pc, #180]	@ (80060ac <TIM_Base_SetConfig+0xf4>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d013      	beq.n	8006022 <TIM_Base_SetConfig+0x6a>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006000:	d00f      	beq.n	8006022 <TIM_Base_SetConfig+0x6a>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a2a      	ldr	r2, [pc, #168]	@ (80060b0 <TIM_Base_SetConfig+0xf8>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d00b      	beq.n	8006022 <TIM_Base_SetConfig+0x6a>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a29      	ldr	r2, [pc, #164]	@ (80060b4 <TIM_Base_SetConfig+0xfc>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d007      	beq.n	8006022 <TIM_Base_SetConfig+0x6a>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a28      	ldr	r2, [pc, #160]	@ (80060b8 <TIM_Base_SetConfig+0x100>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d003      	beq.n	8006022 <TIM_Base_SetConfig+0x6a>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a27      	ldr	r2, [pc, #156]	@ (80060bc <TIM_Base_SetConfig+0x104>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d108      	bne.n	8006034 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	4313      	orrs	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a14      	ldr	r2, [pc, #80]	@ (80060ac <TIM_Base_SetConfig+0xf4>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d00b      	beq.n	8006078 <TIM_Base_SetConfig+0xc0>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a14      	ldr	r2, [pc, #80]	@ (80060b4 <TIM_Base_SetConfig+0xfc>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d007      	beq.n	8006078 <TIM_Base_SetConfig+0xc0>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a13      	ldr	r2, [pc, #76]	@ (80060b8 <TIM_Base_SetConfig+0x100>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d003      	beq.n	8006078 <TIM_Base_SetConfig+0xc0>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a12      	ldr	r2, [pc, #72]	@ (80060bc <TIM_Base_SetConfig+0x104>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d103      	bne.n	8006080 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	691a      	ldr	r2, [r3, #16]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b01      	cmp	r3, #1
 8006090:	d105      	bne.n	800609e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f023 0201 	bic.w	r2, r3, #1
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	611a      	str	r2, [r3, #16]
  }
}
 800609e:	bf00      	nop
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	40012c00 	.word	0x40012c00
 80060b0:	40000400 	.word	0x40000400
 80060b4:	40014000 	.word	0x40014000
 80060b8:	40014400 	.word	0x40014400
 80060bc:	40014800 	.word	0x40014800

080060c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	f023 0201 	bic.w	r2, r3, #1
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	4a20      	ldr	r2, [pc, #128]	@ (800616c <TIM_TI1_SetConfig+0xac>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d00b      	beq.n	8006106 <TIM_TI1_SetConfig+0x46>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060f4:	d007      	beq.n	8006106 <TIM_TI1_SetConfig+0x46>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	4a1d      	ldr	r2, [pc, #116]	@ (8006170 <TIM_TI1_SetConfig+0xb0>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d003      	beq.n	8006106 <TIM_TI1_SetConfig+0x46>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	4a1c      	ldr	r2, [pc, #112]	@ (8006174 <TIM_TI1_SetConfig+0xb4>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d101      	bne.n	800610a <TIM_TI1_SetConfig+0x4a>
 8006106:	2301      	movs	r3, #1
 8006108:	e000      	b.n	800610c <TIM_TI1_SetConfig+0x4c>
 800610a:	2300      	movs	r3, #0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d008      	beq.n	8006122 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f023 0303 	bic.w	r3, r3, #3
 8006116:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4313      	orrs	r3, r2
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	e003      	b.n	800612a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f043 0301 	orr.w	r3, r3, #1
 8006128:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006130:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	011b      	lsls	r3, r3, #4
 8006136:	b2db      	uxtb	r3, r3
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f023 030a 	bic.w	r3, r3, #10
 8006144:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	f003 030a 	and.w	r3, r3, #10
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	4313      	orrs	r3, r2
 8006150:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	621a      	str	r2, [r3, #32]
}
 800615e:	bf00      	nop
 8006160:	371c      	adds	r7, #28
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	40012c00 	.word	0x40012c00
 8006170:	40000400 	.word	0x40000400
 8006174:	40014000 	.word	0x40014000

08006178 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a1b      	ldr	r3, [r3, #32]
 8006188:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	f023 0201 	bic.w	r2, r3, #1
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	011b      	lsls	r3, r3, #4
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f023 030a 	bic.w	r3, r3, #10
 80061b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	621a      	str	r2, [r3, #32]
}
 80061ca:	bf00      	nop
 80061cc:	371c      	adds	r7, #28
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b087      	sub	sp, #28
 80061da:	af00      	add	r7, sp, #0
 80061dc:	60f8      	str	r0, [r7, #12]
 80061de:	60b9      	str	r1, [r7, #8]
 80061e0:	607a      	str	r2, [r7, #4]
 80061e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	f023 0210 	bic.w	r2, r3, #16
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006202:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	021b      	lsls	r3, r3, #8
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	4313      	orrs	r3, r2
 800620c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006214:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	031b      	lsls	r3, r3, #12
 800621a:	b29b      	uxth	r3, r3
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	4313      	orrs	r3, r2
 8006220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006228:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	011b      	lsls	r3, r3, #4
 800622e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	4313      	orrs	r3, r2
 8006236:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	621a      	str	r2, [r3, #32]
}
 8006244:	bf00      	nop
 8006246:	371c      	adds	r7, #28
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	f023 0210 	bic.w	r2, r3, #16
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800627a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	031b      	lsls	r3, r3, #12
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	4313      	orrs	r3, r2
 8006284:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800628c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	011b      	lsls	r3, r3, #4
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	4313      	orrs	r3, r2
 8006296:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	693a      	ldr	r2, [r7, #16]
 800629c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	621a      	str	r2, [r3, #32]
}
 80062a4:	bf00      	nop
 80062a6:	371c      	adds	r7, #28
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
 80062bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f023 0303 	bic.w	r3, r3, #3
 80062dc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	011b      	lsls	r3, r3, #4
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006300:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	021b      	lsls	r3, r3, #8
 8006306:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	4313      	orrs	r3, r2
 800630e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	621a      	str	r2, [r3, #32]
}
 800631c:	bf00      	nop
 800631e:	371c      	adds	r7, #28
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006328:	b480      	push	{r7}
 800632a:	b087      	sub	sp, #28
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6a1b      	ldr	r3, [r3, #32]
 8006340:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006354:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	021b      	lsls	r3, r3, #8
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	4313      	orrs	r3, r2
 800635e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006366:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	031b      	lsls	r3, r3, #12
 800636c:	b29b      	uxth	r3, r3
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	4313      	orrs	r3, r2
 8006372:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800637a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	031b      	lsls	r3, r3, #12
 8006380:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	4313      	orrs	r3, r2
 8006388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	621a      	str	r2, [r3, #32]
}
 8006396:	bf00      	nop
 8006398:	371c      	adds	r7, #28
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b085      	sub	sp, #20
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	4313      	orrs	r3, r2
 80063c0:	f043 0307 	orr.w	r3, r3, #7
 80063c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	609a      	str	r2, [r3, #8]
}
 80063cc:	bf00      	nop
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063d8:	b480      	push	{r7}
 80063da:	b087      	sub	sp, #28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	021a      	lsls	r2, r3, #8
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	431a      	orrs	r2, r3
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	4313      	orrs	r3, r2
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	4313      	orrs	r3, r2
 8006404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	697a      	ldr	r2, [r7, #20]
 800640a:	609a      	str	r2, [r3, #8]
}
 800640c:	bf00      	nop
 800640e:	371c      	adds	r7, #28
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006418:	b480      	push	{r7}
 800641a:	b087      	sub	sp, #28
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	f003 031f 	and.w	r3, r3, #31
 800642a:	2201      	movs	r2, #1
 800642c:	fa02 f303 	lsl.w	r3, r2, r3
 8006430:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6a1a      	ldr	r2, [r3, #32]
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	43db      	mvns	r3, r3
 800643a:	401a      	ands	r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a1a      	ldr	r2, [r3, #32]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	f003 031f 	and.w	r3, r3, #31
 800644a:	6879      	ldr	r1, [r7, #4]
 800644c:	fa01 f303 	lsl.w	r3, r1, r3
 8006450:	431a      	orrs	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	621a      	str	r2, [r3, #32]
}
 8006456:	bf00      	nop
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
	...

08006464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006478:	2302      	movs	r3, #2
 800647a:	e054      	b.n	8006526 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2202      	movs	r2, #2
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a24      	ldr	r2, [pc, #144]	@ (8006534 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d108      	bne.n	80064b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80064ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a17      	ldr	r2, [pc, #92]	@ (8006534 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d00e      	beq.n	80064fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064e4:	d009      	beq.n	80064fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a13      	ldr	r2, [pc, #76]	@ (8006538 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d004      	beq.n	80064fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a11      	ldr	r2, [pc, #68]	@ (800653c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d10c      	bne.n	8006514 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006500:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	4313      	orrs	r3, r2
 800650a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	40012c00 	.word	0x40012c00
 8006538:	40000400 	.word	0x40000400
 800653c:	40014000 	.word	0x40014000

08006540 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e040      	b.n	8006610 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006592:	2b00      	cmp	r3, #0
 8006594:	d106      	bne.n	80065a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7fb fc2a 	bl	8001df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2224      	movs	r2, #36	@ 0x24
 80065a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 0201 	bic.w	r2, r2, #1
 80065b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d002      	beq.n	80065c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f95e 	bl	8006884 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f825 	bl	8006618 <UART_SetConfig>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d101      	bne.n	80065d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e01b      	b.n	8006610 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689a      	ldr	r2, [r3, #8]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80065f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f042 0201 	orr.w	r2, r2, #1
 8006606:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 f9dd 	bl	80069c8 <UART_CheckIdleState>
 800660e:	4603      	mov	r3, r0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b088      	sub	sp, #32
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	431a      	orrs	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	431a      	orrs	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	69db      	ldr	r3, [r3, #28]
 8006638:	4313      	orrs	r3, r2
 800663a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	4b8a      	ldr	r3, [pc, #552]	@ (800686c <UART_SetConfig+0x254>)
 8006644:	4013      	ands	r3, r2
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	6812      	ldr	r2, [r2, #0]
 800664a:	6979      	ldr	r1, [r7, #20]
 800664c:	430b      	orrs	r3, r1
 800664e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	4313      	orrs	r3, r2
 8006674:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	430a      	orrs	r2, r1
 8006688:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a78      	ldr	r2, [pc, #480]	@ (8006870 <UART_SetConfig+0x258>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d120      	bne.n	80066d6 <UART_SetConfig+0xbe>
 8006694:	4b77      	ldr	r3, [pc, #476]	@ (8006874 <UART_SetConfig+0x25c>)
 8006696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006698:	f003 0303 	and.w	r3, r3, #3
 800669c:	2b03      	cmp	r3, #3
 800669e:	d817      	bhi.n	80066d0 <UART_SetConfig+0xb8>
 80066a0:	a201      	add	r2, pc, #4	@ (adr r2, 80066a8 <UART_SetConfig+0x90>)
 80066a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a6:	bf00      	nop
 80066a8:	080066b9 	.word	0x080066b9
 80066ac:	080066c5 	.word	0x080066c5
 80066b0:	080066cb 	.word	0x080066cb
 80066b4:	080066bf 	.word	0x080066bf
 80066b8:	2300      	movs	r3, #0
 80066ba:	77fb      	strb	r3, [r7, #31]
 80066bc:	e01d      	b.n	80066fa <UART_SetConfig+0xe2>
 80066be:	2302      	movs	r3, #2
 80066c0:	77fb      	strb	r3, [r7, #31]
 80066c2:	e01a      	b.n	80066fa <UART_SetConfig+0xe2>
 80066c4:	2304      	movs	r3, #4
 80066c6:	77fb      	strb	r3, [r7, #31]
 80066c8:	e017      	b.n	80066fa <UART_SetConfig+0xe2>
 80066ca:	2308      	movs	r3, #8
 80066cc:	77fb      	strb	r3, [r7, #31]
 80066ce:	e014      	b.n	80066fa <UART_SetConfig+0xe2>
 80066d0:	2310      	movs	r3, #16
 80066d2:	77fb      	strb	r3, [r7, #31]
 80066d4:	e011      	b.n	80066fa <UART_SetConfig+0xe2>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a67      	ldr	r2, [pc, #412]	@ (8006878 <UART_SetConfig+0x260>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d102      	bne.n	80066e6 <UART_SetConfig+0xce>
 80066e0:	2300      	movs	r3, #0
 80066e2:	77fb      	strb	r3, [r7, #31]
 80066e4:	e009      	b.n	80066fa <UART_SetConfig+0xe2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a64      	ldr	r2, [pc, #400]	@ (800687c <UART_SetConfig+0x264>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d102      	bne.n	80066f6 <UART_SetConfig+0xde>
 80066f0:	2300      	movs	r3, #0
 80066f2:	77fb      	strb	r3, [r7, #31]
 80066f4:	e001      	b.n	80066fa <UART_SetConfig+0xe2>
 80066f6:	2310      	movs	r3, #16
 80066f8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006702:	d15a      	bne.n	80067ba <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8006704:	7ffb      	ldrb	r3, [r7, #31]
 8006706:	2b08      	cmp	r3, #8
 8006708:	d827      	bhi.n	800675a <UART_SetConfig+0x142>
 800670a:	a201      	add	r2, pc, #4	@ (adr r2, 8006710 <UART_SetConfig+0xf8>)
 800670c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006710:	08006735 	.word	0x08006735
 8006714:	0800673d 	.word	0x0800673d
 8006718:	08006745 	.word	0x08006745
 800671c:	0800675b 	.word	0x0800675b
 8006720:	0800674b 	.word	0x0800674b
 8006724:	0800675b 	.word	0x0800675b
 8006728:	0800675b 	.word	0x0800675b
 800672c:	0800675b 	.word	0x0800675b
 8006730:	08006753 	.word	0x08006753
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006734:	f7fe fee8 	bl	8005508 <HAL_RCC_GetPCLK1Freq>
 8006738:	61b8      	str	r0, [r7, #24]
        break;
 800673a:	e013      	b.n	8006764 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800673c:	f7fe ff06 	bl	800554c <HAL_RCC_GetPCLK2Freq>
 8006740:	61b8      	str	r0, [r7, #24]
        break;
 8006742:	e00f      	b.n	8006764 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006744:	4b4e      	ldr	r3, [pc, #312]	@ (8006880 <UART_SetConfig+0x268>)
 8006746:	61bb      	str	r3, [r7, #24]
        break;
 8006748:	e00c      	b.n	8006764 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800674a:	f7fe fe7d 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 800674e:	61b8      	str	r0, [r7, #24]
        break;
 8006750:	e008      	b.n	8006764 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006756:	61bb      	str	r3, [r7, #24]
        break;
 8006758:	e004      	b.n	8006764 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800675a:	2300      	movs	r3, #0
 800675c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	77bb      	strb	r3, [r7, #30]
        break;
 8006762:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d074      	beq.n	8006854 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	005a      	lsls	r2, r3, #1
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	085b      	lsrs	r3, r3, #1
 8006774:	441a      	add	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	fbb2 f3f3 	udiv	r3, r2, r3
 800677e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	2b0f      	cmp	r3, #15
 8006784:	d916      	bls.n	80067b4 <UART_SetConfig+0x19c>
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800678c:	d212      	bcs.n	80067b4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	b29b      	uxth	r3, r3
 8006792:	f023 030f 	bic.w	r3, r3, #15
 8006796:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	085b      	lsrs	r3, r3, #1
 800679c:	b29b      	uxth	r3, r3
 800679e:	f003 0307 	and.w	r3, r3, #7
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	89fb      	ldrh	r3, [r7, #14]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	89fa      	ldrh	r2, [r7, #14]
 80067b0:	60da      	str	r2, [r3, #12]
 80067b2:	e04f      	b.n	8006854 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	77bb      	strb	r3, [r7, #30]
 80067b8:	e04c      	b.n	8006854 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067ba:	7ffb      	ldrb	r3, [r7, #31]
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d828      	bhi.n	8006812 <UART_SetConfig+0x1fa>
 80067c0:	a201      	add	r2, pc, #4	@ (adr r2, 80067c8 <UART_SetConfig+0x1b0>)
 80067c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c6:	bf00      	nop
 80067c8:	080067ed 	.word	0x080067ed
 80067cc:	080067f5 	.word	0x080067f5
 80067d0:	080067fd 	.word	0x080067fd
 80067d4:	08006813 	.word	0x08006813
 80067d8:	08006803 	.word	0x08006803
 80067dc:	08006813 	.word	0x08006813
 80067e0:	08006813 	.word	0x08006813
 80067e4:	08006813 	.word	0x08006813
 80067e8:	0800680b 	.word	0x0800680b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067ec:	f7fe fe8c 	bl	8005508 <HAL_RCC_GetPCLK1Freq>
 80067f0:	61b8      	str	r0, [r7, #24]
        break;
 80067f2:	e013      	b.n	800681c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067f4:	f7fe feaa 	bl	800554c <HAL_RCC_GetPCLK2Freq>
 80067f8:	61b8      	str	r0, [r7, #24]
        break;
 80067fa:	e00f      	b.n	800681c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067fc:	4b20      	ldr	r3, [pc, #128]	@ (8006880 <UART_SetConfig+0x268>)
 80067fe:	61bb      	str	r3, [r7, #24]
        break;
 8006800:	e00c      	b.n	800681c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006802:	f7fe fe21 	bl	8005448 <HAL_RCC_GetSysClockFreq>
 8006806:	61b8      	str	r0, [r7, #24]
        break;
 8006808:	e008      	b.n	800681c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800680a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800680e:	61bb      	str	r3, [r7, #24]
        break;
 8006810:	e004      	b.n	800681c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	77bb      	strb	r3, [r7, #30]
        break;
 800681a:	bf00      	nop
    }

    if (pclk != 0U)
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d018      	beq.n	8006854 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	085a      	lsrs	r2, r3, #1
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	441a      	add	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	fbb2 f3f3 	udiv	r3, r2, r3
 8006834:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	2b0f      	cmp	r3, #15
 800683a:	d909      	bls.n	8006850 <UART_SetConfig+0x238>
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006842:	d205      	bcs.n	8006850 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	b29a      	uxth	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	60da      	str	r2, [r3, #12]
 800684e:	e001      	b.n	8006854 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006860:	7fbb      	ldrb	r3, [r7, #30]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3720      	adds	r7, #32
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	efff69f3 	.word	0xefff69f3
 8006870:	40013800 	.word	0x40013800
 8006874:	40021000 	.word	0x40021000
 8006878:	40004400 	.word	0x40004400
 800687c:	40004800 	.word	0x40004800
 8006880:	007a1200 	.word	0x007a1200

08006884 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006890:	f003 0308 	and.w	r3, r3, #8
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00a      	beq.n	80068ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00a      	beq.n	80068d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d4:	f003 0302 	and.w	r3, r3, #2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00a      	beq.n	80068f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	430a      	orrs	r2, r1
 80068f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f6:	f003 0304 	and.w	r3, r3, #4
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00a      	beq.n	8006914 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006918:	f003 0310 	and.w	r3, r3, #16
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00a      	beq.n	8006936 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00a      	beq.n	8006958 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	430a      	orrs	r2, r1
 8006956:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800695c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006960:	2b00      	cmp	r3, #0
 8006962:	d01a      	beq.n	800699a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800697e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006982:	d10a      	bne.n	800699a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00a      	beq.n	80069bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	605a      	str	r2, [r3, #4]
  }
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b098      	sub	sp, #96	@ 0x60
 80069cc:	af02      	add	r7, sp, #8
 80069ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069d8:	f7fb fb66 	bl	80020a8 <HAL_GetTick>
 80069dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0308 	and.w	r3, r3, #8
 80069e8:	2b08      	cmp	r3, #8
 80069ea:	d12e      	bne.n	8006a4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069f4:	2200      	movs	r2, #0
 80069f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f88c 	bl	8006b18 <UART_WaitOnFlagUntilTimeout>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d021      	beq.n	8006a4a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0e:	e853 3f00 	ldrex	r3, [r3]
 8006a12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	461a      	mov	r2, r3
 8006a22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a24:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a26:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a2c:	e841 2300 	strex	r3, r2, [r1]
 8006a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1e6      	bne.n	8006a06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e062      	b.n	8006b10 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0304 	and.w	r3, r3, #4
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	d149      	bne.n	8006aec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a60:	2200      	movs	r2, #0
 8006a62:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f856 	bl	8006b18 <UART_WaitOnFlagUntilTimeout>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d03c      	beq.n	8006aec <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7a:	e853 3f00 	ldrex	r3, [r3]
 8006a7e:	623b      	str	r3, [r7, #32]
   return(result);
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a90:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a92:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a98:	e841 2300 	strex	r3, r2, [r1]
 8006a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d1e6      	bne.n	8006a72 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	3308      	adds	r3, #8
 8006aaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	e853 3f00 	ldrex	r3, [r3]
 8006ab2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0301 	bic.w	r3, r3, #1
 8006aba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ac4:	61fa      	str	r2, [r7, #28]
 8006ac6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac8:	69b9      	ldr	r1, [r7, #24]
 8006aca:	69fa      	ldr	r2, [r7, #28]
 8006acc:	e841 2300 	strex	r3, r2, [r1]
 8006ad0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e5      	bne.n	8006aa4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2220      	movs	r2, #32
 8006adc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	e011      	b.n	8006b10 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2220      	movs	r2, #32
 8006af0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2220      	movs	r2, #32
 8006af6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3758      	adds	r7, #88	@ 0x58
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	603b      	str	r3, [r7, #0]
 8006b24:	4613      	mov	r3, r2
 8006b26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b28:	e04f      	b.n	8006bca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b30:	d04b      	beq.n	8006bca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b32:	f7fb fab9 	bl	80020a8 <HAL_GetTick>
 8006b36:	4602      	mov	r2, r0
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d302      	bcc.n	8006b48 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e04e      	b.n	8006bea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0304 	and.w	r3, r3, #4
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d037      	beq.n	8006bca <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	2b80      	cmp	r3, #128	@ 0x80
 8006b5e:	d034      	beq.n	8006bca <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2b40      	cmp	r3, #64	@ 0x40
 8006b64:	d031      	beq.n	8006bca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	f003 0308 	and.w	r3, r3, #8
 8006b70:	2b08      	cmp	r3, #8
 8006b72:	d110      	bne.n	8006b96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2208      	movs	r2, #8
 8006b7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 f838 	bl	8006bf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2208      	movs	r2, #8
 8006b86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e029      	b.n	8006bea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	69db      	ldr	r3, [r3, #28]
 8006b9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ba0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ba4:	d111      	bne.n	8006bca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006bae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 f81e 	bl	8006bf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2220      	movs	r2, #32
 8006bba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e00f      	b.n	8006bea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69da      	ldr	r2, [r3, #28]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	bf0c      	ite	eq
 8006bda:	2301      	moveq	r3, #1
 8006bdc:	2300      	movne	r3, #0
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	461a      	mov	r2, r3
 8006be2:	79fb      	ldrb	r3, [r7, #7]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d0a0      	beq.n	8006b2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b095      	sub	sp, #84	@ 0x54
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c02:	e853 3f00 	ldrex	r3, [r3]
 8006c06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	461a      	mov	r2, r3
 8006c16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c18:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c1a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c20:	e841 2300 	strex	r3, r2, [r1]
 8006c24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1e6      	bne.n	8006bfa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	3308      	adds	r3, #8
 8006c32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c34:	6a3b      	ldr	r3, [r7, #32]
 8006c36:	e853 3f00 	ldrex	r3, [r3]
 8006c3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	f023 0301 	bic.w	r3, r3, #1
 8006c42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3308      	adds	r3, #8
 8006c4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c54:	e841 2300 	strex	r3, r2, [r1]
 8006c58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1e5      	bne.n	8006c2c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d118      	bne.n	8006c9a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	f023 0310 	bic.w	r3, r3, #16
 8006c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	461a      	mov	r2, r3
 8006c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c86:	61bb      	str	r3, [r7, #24]
 8006c88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8a:	6979      	ldr	r1, [r7, #20]
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	e841 2300 	strex	r3, r2, [r1]
 8006c92:	613b      	str	r3, [r7, #16]
   return(result);
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1e6      	bne.n	8006c68 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006cae:	bf00      	nop
 8006cb0:	3754      	adds	r7, #84	@ 0x54
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <memset>:
 8006cba:	4402      	add	r2, r0
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d100      	bne.n	8006cc4 <memset+0xa>
 8006cc2:	4770      	bx	lr
 8006cc4:	f803 1b01 	strb.w	r1, [r3], #1
 8006cc8:	e7f9      	b.n	8006cbe <memset+0x4>
	...

08006ccc <__libc_init_array>:
 8006ccc:	b570      	push	{r4, r5, r6, lr}
 8006cce:	4d0d      	ldr	r5, [pc, #52]	@ (8006d04 <__libc_init_array+0x38>)
 8006cd0:	4c0d      	ldr	r4, [pc, #52]	@ (8006d08 <__libc_init_array+0x3c>)
 8006cd2:	1b64      	subs	r4, r4, r5
 8006cd4:	10a4      	asrs	r4, r4, #2
 8006cd6:	2600      	movs	r6, #0
 8006cd8:	42a6      	cmp	r6, r4
 8006cda:	d109      	bne.n	8006cf0 <__libc_init_array+0x24>
 8006cdc:	4d0b      	ldr	r5, [pc, #44]	@ (8006d0c <__libc_init_array+0x40>)
 8006cde:	4c0c      	ldr	r4, [pc, #48]	@ (8006d10 <__libc_init_array+0x44>)
 8006ce0:	f000 fd96 	bl	8007810 <_init>
 8006ce4:	1b64      	subs	r4, r4, r5
 8006ce6:	10a4      	asrs	r4, r4, #2
 8006ce8:	2600      	movs	r6, #0
 8006cea:	42a6      	cmp	r6, r4
 8006cec:	d105      	bne.n	8006cfa <__libc_init_array+0x2e>
 8006cee:	bd70      	pop	{r4, r5, r6, pc}
 8006cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cf4:	4798      	blx	r3
 8006cf6:	3601      	adds	r6, #1
 8006cf8:	e7ee      	b.n	8006cd8 <__libc_init_array+0xc>
 8006cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cfe:	4798      	blx	r3
 8006d00:	3601      	adds	r6, #1
 8006d02:	e7f2      	b.n	8006cea <__libc_init_array+0x1e>
 8006d04:	08007c30 	.word	0x08007c30
 8006d08:	08007c30 	.word	0x08007c30
 8006d0c:	08007c30 	.word	0x08007c30
 8006d10:	08007c34 	.word	0x08007c34

08006d14 <cosf>:
 8006d14:	ee10 3a10 	vmov	r3, s0
 8006d18:	b507      	push	{r0, r1, r2, lr}
 8006d1a:	4a1e      	ldr	r2, [pc, #120]	@ (8006d94 <cosf+0x80>)
 8006d1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d806      	bhi.n	8006d32 <cosf+0x1e>
 8006d24:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8006d98 <cosf+0x84>
 8006d28:	b003      	add	sp, #12
 8006d2a:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d2e:	f000 b87b 	b.w	8006e28 <__kernel_cosf>
 8006d32:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006d36:	d304      	bcc.n	8006d42 <cosf+0x2e>
 8006d38:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006d3c:	b003      	add	sp, #12
 8006d3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d42:	4668      	mov	r0, sp
 8006d44:	f000 f910 	bl	8006f68 <__ieee754_rem_pio2f>
 8006d48:	f000 0003 	and.w	r0, r0, #3
 8006d4c:	2801      	cmp	r0, #1
 8006d4e:	d009      	beq.n	8006d64 <cosf+0x50>
 8006d50:	2802      	cmp	r0, #2
 8006d52:	d010      	beq.n	8006d76 <cosf+0x62>
 8006d54:	b9b0      	cbnz	r0, 8006d84 <cosf+0x70>
 8006d56:	eddd 0a01 	vldr	s1, [sp, #4]
 8006d5a:	ed9d 0a00 	vldr	s0, [sp]
 8006d5e:	f000 f863 	bl	8006e28 <__kernel_cosf>
 8006d62:	e7eb      	b.n	8006d3c <cosf+0x28>
 8006d64:	eddd 0a01 	vldr	s1, [sp, #4]
 8006d68:	ed9d 0a00 	vldr	s0, [sp]
 8006d6c:	f000 f8b4 	bl	8006ed8 <__kernel_sinf>
 8006d70:	eeb1 0a40 	vneg.f32	s0, s0
 8006d74:	e7e2      	b.n	8006d3c <cosf+0x28>
 8006d76:	eddd 0a01 	vldr	s1, [sp, #4]
 8006d7a:	ed9d 0a00 	vldr	s0, [sp]
 8006d7e:	f000 f853 	bl	8006e28 <__kernel_cosf>
 8006d82:	e7f5      	b.n	8006d70 <cosf+0x5c>
 8006d84:	eddd 0a01 	vldr	s1, [sp, #4]
 8006d88:	ed9d 0a00 	vldr	s0, [sp]
 8006d8c:	2001      	movs	r0, #1
 8006d8e:	f000 f8a3 	bl	8006ed8 <__kernel_sinf>
 8006d92:	e7d3      	b.n	8006d3c <cosf+0x28>
 8006d94:	3f490fd8 	.word	0x3f490fd8
 8006d98:	00000000 	.word	0x00000000

08006d9c <sinf>:
 8006d9c:	ee10 3a10 	vmov	r3, s0
 8006da0:	b507      	push	{r0, r1, r2, lr}
 8006da2:	4a1f      	ldr	r2, [pc, #124]	@ (8006e20 <sinf+0x84>)
 8006da4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d807      	bhi.n	8006dbc <sinf+0x20>
 8006dac:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8006e24 <sinf+0x88>
 8006db0:	2000      	movs	r0, #0
 8006db2:	b003      	add	sp, #12
 8006db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006db8:	f000 b88e 	b.w	8006ed8 <__kernel_sinf>
 8006dbc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006dc0:	d304      	bcc.n	8006dcc <sinf+0x30>
 8006dc2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006dc6:	b003      	add	sp, #12
 8006dc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8006dcc:	4668      	mov	r0, sp
 8006dce:	f000 f8cb 	bl	8006f68 <__ieee754_rem_pio2f>
 8006dd2:	f000 0003 	and.w	r0, r0, #3
 8006dd6:	2801      	cmp	r0, #1
 8006dd8:	d00a      	beq.n	8006df0 <sinf+0x54>
 8006dda:	2802      	cmp	r0, #2
 8006ddc:	d00f      	beq.n	8006dfe <sinf+0x62>
 8006dde:	b9c0      	cbnz	r0, 8006e12 <sinf+0x76>
 8006de0:	eddd 0a01 	vldr	s1, [sp, #4]
 8006de4:	ed9d 0a00 	vldr	s0, [sp]
 8006de8:	2001      	movs	r0, #1
 8006dea:	f000 f875 	bl	8006ed8 <__kernel_sinf>
 8006dee:	e7ea      	b.n	8006dc6 <sinf+0x2a>
 8006df0:	eddd 0a01 	vldr	s1, [sp, #4]
 8006df4:	ed9d 0a00 	vldr	s0, [sp]
 8006df8:	f000 f816 	bl	8006e28 <__kernel_cosf>
 8006dfc:	e7e3      	b.n	8006dc6 <sinf+0x2a>
 8006dfe:	eddd 0a01 	vldr	s1, [sp, #4]
 8006e02:	ed9d 0a00 	vldr	s0, [sp]
 8006e06:	2001      	movs	r0, #1
 8006e08:	f000 f866 	bl	8006ed8 <__kernel_sinf>
 8006e0c:	eeb1 0a40 	vneg.f32	s0, s0
 8006e10:	e7d9      	b.n	8006dc6 <sinf+0x2a>
 8006e12:	eddd 0a01 	vldr	s1, [sp, #4]
 8006e16:	ed9d 0a00 	vldr	s0, [sp]
 8006e1a:	f000 f805 	bl	8006e28 <__kernel_cosf>
 8006e1e:	e7f5      	b.n	8006e0c <sinf+0x70>
 8006e20:	3f490fd8 	.word	0x3f490fd8
 8006e24:	00000000 	.word	0x00000000

08006e28 <__kernel_cosf>:
 8006e28:	ee10 3a10 	vmov	r3, s0
 8006e2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e30:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8006e34:	eef0 6a40 	vmov.f32	s13, s0
 8006e38:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006e3c:	d204      	bcs.n	8006e48 <__kernel_cosf+0x20>
 8006e3e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8006e42:	ee17 2a90 	vmov	r2, s15
 8006e46:	b342      	cbz	r2, 8006e9a <__kernel_cosf+0x72>
 8006e48:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8006e4c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8006eb8 <__kernel_cosf+0x90>
 8006e50:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8006ebc <__kernel_cosf+0x94>
 8006e54:	4a1a      	ldr	r2, [pc, #104]	@ (8006ec0 <__kernel_cosf+0x98>)
 8006e56:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8006ec4 <__kernel_cosf+0x9c>
 8006e60:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006e64:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8006ec8 <__kernel_cosf+0xa0>
 8006e68:	eea7 6a87 	vfma.f32	s12, s15, s14
 8006e6c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8006ecc <__kernel_cosf+0xa4>
 8006e70:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006e74:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8006ed0 <__kernel_cosf+0xa8>
 8006e78:	eea7 6a87 	vfma.f32	s12, s15, s14
 8006e7c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8006e80:	ee26 6a07 	vmul.f32	s12, s12, s14
 8006e84:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8006e88:	eee7 0a06 	vfma.f32	s1, s14, s12
 8006e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e90:	d804      	bhi.n	8006e9c <__kernel_cosf+0x74>
 8006e92:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006e96:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006e9a:	4770      	bx	lr
 8006e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8006ed4 <__kernel_cosf+0xac>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	bf9a      	itte	ls
 8006ea2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8006ea6:	ee07 3a10 	vmovls	s14, r3
 8006eaa:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8006eae:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006eb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006eb6:	e7ec      	b.n	8006e92 <__kernel_cosf+0x6a>
 8006eb8:	ad47d74e 	.word	0xad47d74e
 8006ebc:	310f74f6 	.word	0x310f74f6
 8006ec0:	3e999999 	.word	0x3e999999
 8006ec4:	b493f27c 	.word	0xb493f27c
 8006ec8:	37d00d01 	.word	0x37d00d01
 8006ecc:	bab60b61 	.word	0xbab60b61
 8006ed0:	3d2aaaab 	.word	0x3d2aaaab
 8006ed4:	3f480000 	.word	0x3f480000

08006ed8 <__kernel_sinf>:
 8006ed8:	ee10 3a10 	vmov	r3, s0
 8006edc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006ee0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8006ee4:	d204      	bcs.n	8006ef0 <__kernel_sinf+0x18>
 8006ee6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006eea:	ee17 3a90 	vmov	r3, s15
 8006eee:	b35b      	cbz	r3, 8006f48 <__kernel_sinf+0x70>
 8006ef0:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006ef4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8006f4c <__kernel_sinf+0x74>
 8006ef8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8006f50 <__kernel_sinf+0x78>
 8006efc:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006f00:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8006f54 <__kernel_sinf+0x7c>
 8006f04:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006f08:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8006f58 <__kernel_sinf+0x80>
 8006f0c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8006f10:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8006f5c <__kernel_sinf+0x84>
 8006f14:	ee60 6a07 	vmul.f32	s13, s0, s14
 8006f18:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006f1c:	b930      	cbnz	r0, 8006f2c <__kernel_sinf+0x54>
 8006f1e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8006f60 <__kernel_sinf+0x88>
 8006f22:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006f26:	eea6 0a26 	vfma.f32	s0, s12, s13
 8006f2a:	4770      	bx	lr
 8006f2c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006f30:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8006f34:	eee0 7a86 	vfma.f32	s15, s1, s12
 8006f38:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8006f3c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8006f64 <__kernel_sinf+0x8c>
 8006f40:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8006f44:	ee30 0a60 	vsub.f32	s0, s0, s1
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	2f2ec9d3 	.word	0x2f2ec9d3
 8006f50:	b2d72f34 	.word	0xb2d72f34
 8006f54:	3638ef1b 	.word	0x3638ef1b
 8006f58:	b9500d01 	.word	0xb9500d01
 8006f5c:	3c088889 	.word	0x3c088889
 8006f60:	be2aaaab 	.word	0xbe2aaaab
 8006f64:	3e2aaaab 	.word	0x3e2aaaab

08006f68 <__ieee754_rem_pio2f>:
 8006f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f6a:	ee10 6a10 	vmov	r6, s0
 8006f6e:	4b88      	ldr	r3, [pc, #544]	@ (8007190 <__ieee754_rem_pio2f+0x228>)
 8006f70:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8006f74:	429d      	cmp	r5, r3
 8006f76:	b087      	sub	sp, #28
 8006f78:	4604      	mov	r4, r0
 8006f7a:	d805      	bhi.n	8006f88 <__ieee754_rem_pio2f+0x20>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	ed80 0a00 	vstr	s0, [r0]
 8006f82:	6043      	str	r3, [r0, #4]
 8006f84:	2000      	movs	r0, #0
 8006f86:	e022      	b.n	8006fce <__ieee754_rem_pio2f+0x66>
 8006f88:	4b82      	ldr	r3, [pc, #520]	@ (8007194 <__ieee754_rem_pio2f+0x22c>)
 8006f8a:	429d      	cmp	r5, r3
 8006f8c:	d83a      	bhi.n	8007004 <__ieee754_rem_pio2f+0x9c>
 8006f8e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8006f92:	2e00      	cmp	r6, #0
 8006f94:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8007198 <__ieee754_rem_pio2f+0x230>
 8006f98:	4a80      	ldr	r2, [pc, #512]	@ (800719c <__ieee754_rem_pio2f+0x234>)
 8006f9a:	f023 030f 	bic.w	r3, r3, #15
 8006f9e:	dd18      	ble.n	8006fd2 <__ieee754_rem_pio2f+0x6a>
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	ee70 7a47 	vsub.f32	s15, s0, s14
 8006fa6:	bf09      	itett	eq
 8006fa8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80071a0 <__ieee754_rem_pio2f+0x238>
 8006fac:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80071a4 <__ieee754_rem_pio2f+0x23c>
 8006fb0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80071a8 <__ieee754_rem_pio2f+0x240>
 8006fb4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8006fb8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8006fbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006fc0:	ed80 7a00 	vstr	s14, [r0]
 8006fc4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006fc8:	edc0 7a01 	vstr	s15, [r0, #4]
 8006fcc:	2001      	movs	r0, #1
 8006fce:	b007      	add	sp, #28
 8006fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	ee70 7a07 	vadd.f32	s15, s0, s14
 8006fd8:	bf09      	itett	eq
 8006fda:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80071a0 <__ieee754_rem_pio2f+0x238>
 8006fde:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80071a4 <__ieee754_rem_pio2f+0x23c>
 8006fe2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80071a8 <__ieee754_rem_pio2f+0x240>
 8006fe6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8006fea:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006fee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ff2:	ed80 7a00 	vstr	s14, [r0]
 8006ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ffa:	edc0 7a01 	vstr	s15, [r0, #4]
 8006ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8007002:	e7e4      	b.n	8006fce <__ieee754_rem_pio2f+0x66>
 8007004:	4b69      	ldr	r3, [pc, #420]	@ (80071ac <__ieee754_rem_pio2f+0x244>)
 8007006:	429d      	cmp	r5, r3
 8007008:	d873      	bhi.n	80070f2 <__ieee754_rem_pio2f+0x18a>
 800700a:	f000 f8dd 	bl	80071c8 <fabsf>
 800700e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80071b0 <__ieee754_rem_pio2f+0x248>
 8007012:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007016:	eee0 7a07 	vfma.f32	s15, s0, s14
 800701a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800701e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007022:	ee17 0a90 	vmov	r0, s15
 8007026:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8007198 <__ieee754_rem_pio2f+0x230>
 800702a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800702e:	281f      	cmp	r0, #31
 8007030:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80071a4 <__ieee754_rem_pio2f+0x23c>
 8007034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007038:	eeb1 6a47 	vneg.f32	s12, s14
 800703c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007040:	ee16 1a90 	vmov	r1, s13
 8007044:	dc09      	bgt.n	800705a <__ieee754_rem_pio2f+0xf2>
 8007046:	4a5b      	ldr	r2, [pc, #364]	@ (80071b4 <__ieee754_rem_pio2f+0x24c>)
 8007048:	1e47      	subs	r7, r0, #1
 800704a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800704e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8007052:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007056:	4293      	cmp	r3, r2
 8007058:	d107      	bne.n	800706a <__ieee754_rem_pio2f+0x102>
 800705a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800705e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8007062:	2a08      	cmp	r2, #8
 8007064:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8007068:	dc14      	bgt.n	8007094 <__ieee754_rem_pio2f+0x12c>
 800706a:	6021      	str	r1, [r4, #0]
 800706c:	ed94 7a00 	vldr	s14, [r4]
 8007070:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007074:	2e00      	cmp	r6, #0
 8007076:	ee30 0a67 	vsub.f32	s0, s0, s15
 800707a:	ed84 0a01 	vstr	s0, [r4, #4]
 800707e:	daa6      	bge.n	8006fce <__ieee754_rem_pio2f+0x66>
 8007080:	eeb1 7a47 	vneg.f32	s14, s14
 8007084:	eeb1 0a40 	vneg.f32	s0, s0
 8007088:	ed84 7a00 	vstr	s14, [r4]
 800708c:	ed84 0a01 	vstr	s0, [r4, #4]
 8007090:	4240      	negs	r0, r0
 8007092:	e79c      	b.n	8006fce <__ieee754_rem_pio2f+0x66>
 8007094:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80071a0 <__ieee754_rem_pio2f+0x238>
 8007098:	eef0 6a40 	vmov.f32	s13, s0
 800709c:	eee6 6a25 	vfma.f32	s13, s12, s11
 80070a0:	ee70 7a66 	vsub.f32	s15, s0, s13
 80070a4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80070a8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80071a8 <__ieee754_rem_pio2f+0x240>
 80070ac:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80070b0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80070b4:	ee15 2a90 	vmov	r2, s11
 80070b8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80070bc:	1a5b      	subs	r3, r3, r1
 80070be:	2b19      	cmp	r3, #25
 80070c0:	dc04      	bgt.n	80070cc <__ieee754_rem_pio2f+0x164>
 80070c2:	edc4 5a00 	vstr	s11, [r4]
 80070c6:	eeb0 0a66 	vmov.f32	s0, s13
 80070ca:	e7cf      	b.n	800706c <__ieee754_rem_pio2f+0x104>
 80070cc:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80071b8 <__ieee754_rem_pio2f+0x250>
 80070d0:	eeb0 0a66 	vmov.f32	s0, s13
 80070d4:	eea6 0a25 	vfma.f32	s0, s12, s11
 80070d8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80070dc:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80071bc <__ieee754_rem_pio2f+0x254>
 80070e0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80070e4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80070e8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80070ec:	ed84 7a00 	vstr	s14, [r4]
 80070f0:	e7bc      	b.n	800706c <__ieee754_rem_pio2f+0x104>
 80070f2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80070f6:	d306      	bcc.n	8007106 <__ieee754_rem_pio2f+0x19e>
 80070f8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80070fc:	edc0 7a01 	vstr	s15, [r0, #4]
 8007100:	edc0 7a00 	vstr	s15, [r0]
 8007104:	e73e      	b.n	8006f84 <__ieee754_rem_pio2f+0x1c>
 8007106:	15ea      	asrs	r2, r5, #23
 8007108:	3a86      	subs	r2, #134	@ 0x86
 800710a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800710e:	ee07 3a90 	vmov	s15, r3
 8007112:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007116:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80071c0 <__ieee754_rem_pio2f+0x258>
 800711a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800711e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007122:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007126:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800712a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800712e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007132:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007136:	ed8d 7a04 	vstr	s14, [sp, #16]
 800713a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800713e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007146:	edcd 7a05 	vstr	s15, [sp, #20]
 800714a:	d11e      	bne.n	800718a <__ieee754_rem_pio2f+0x222>
 800714c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007154:	bf0c      	ite	eq
 8007156:	2301      	moveq	r3, #1
 8007158:	2302      	movne	r3, #2
 800715a:	491a      	ldr	r1, [pc, #104]	@ (80071c4 <__ieee754_rem_pio2f+0x25c>)
 800715c:	9101      	str	r1, [sp, #4]
 800715e:	2102      	movs	r1, #2
 8007160:	9100      	str	r1, [sp, #0]
 8007162:	a803      	add	r0, sp, #12
 8007164:	4621      	mov	r1, r4
 8007166:	f000 f837 	bl	80071d8 <__kernel_rem_pio2f>
 800716a:	2e00      	cmp	r6, #0
 800716c:	f6bf af2f 	bge.w	8006fce <__ieee754_rem_pio2f+0x66>
 8007170:	edd4 7a00 	vldr	s15, [r4]
 8007174:	eef1 7a67 	vneg.f32	s15, s15
 8007178:	edc4 7a00 	vstr	s15, [r4]
 800717c:	edd4 7a01 	vldr	s15, [r4, #4]
 8007180:	eef1 7a67 	vneg.f32	s15, s15
 8007184:	edc4 7a01 	vstr	s15, [r4, #4]
 8007188:	e782      	b.n	8007090 <__ieee754_rem_pio2f+0x128>
 800718a:	2303      	movs	r3, #3
 800718c:	e7e5      	b.n	800715a <__ieee754_rem_pio2f+0x1f2>
 800718e:	bf00      	nop
 8007190:	3f490fd8 	.word	0x3f490fd8
 8007194:	4016cbe3 	.word	0x4016cbe3
 8007198:	3fc90f80 	.word	0x3fc90f80
 800719c:	3fc90fd0 	.word	0x3fc90fd0
 80071a0:	37354400 	.word	0x37354400
 80071a4:	37354443 	.word	0x37354443
 80071a8:	2e85a308 	.word	0x2e85a308
 80071ac:	43490f80 	.word	0x43490f80
 80071b0:	3f22f984 	.word	0x3f22f984
 80071b4:	08007860 	.word	0x08007860
 80071b8:	2e85a300 	.word	0x2e85a300
 80071bc:	248d3132 	.word	0x248d3132
 80071c0:	43800000 	.word	0x43800000
 80071c4:	080078e0 	.word	0x080078e0

080071c8 <fabsf>:
 80071c8:	ee10 3a10 	vmov	r3, s0
 80071cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071d0:	ee00 3a10 	vmov	s0, r3
 80071d4:	4770      	bx	lr
	...

080071d8 <__kernel_rem_pio2f>:
 80071d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071dc:	ed2d 8b04 	vpush	{d8-d9}
 80071e0:	b0d9      	sub	sp, #356	@ 0x164
 80071e2:	4690      	mov	r8, r2
 80071e4:	9001      	str	r0, [sp, #4]
 80071e6:	4ab9      	ldr	r2, [pc, #740]	@ (80074cc <__kernel_rem_pio2f+0x2f4>)
 80071e8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80071ea:	f118 0f04 	cmn.w	r8, #4
 80071ee:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80071f2:	460f      	mov	r7, r1
 80071f4:	f103 3bff 	add.w	fp, r3, #4294967295
 80071f8:	db27      	blt.n	800724a <__kernel_rem_pio2f+0x72>
 80071fa:	f1b8 0203 	subs.w	r2, r8, #3
 80071fe:	bf48      	it	mi
 8007200:	f108 0204 	addmi.w	r2, r8, #4
 8007204:	10d2      	asrs	r2, r2, #3
 8007206:	1c55      	adds	r5, r2, #1
 8007208:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800720a:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80074dc <__kernel_rem_pio2f+0x304>
 800720e:	00e8      	lsls	r0, r5, #3
 8007210:	eba2 060b 	sub.w	r6, r2, fp
 8007214:	9002      	str	r0, [sp, #8]
 8007216:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800721a:	eb0a 0c0b 	add.w	ip, sl, fp
 800721e:	ac1c      	add	r4, sp, #112	@ 0x70
 8007220:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8007224:	2000      	movs	r0, #0
 8007226:	4560      	cmp	r0, ip
 8007228:	dd11      	ble.n	800724e <__kernel_rem_pio2f+0x76>
 800722a:	a91c      	add	r1, sp, #112	@ 0x70
 800722c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8007230:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8007234:	f04f 0c00 	mov.w	ip, #0
 8007238:	45d4      	cmp	ip, sl
 800723a:	dc27      	bgt.n	800728c <__kernel_rem_pio2f+0xb4>
 800723c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007240:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80074dc <__kernel_rem_pio2f+0x304>
 8007244:	4606      	mov	r6, r0
 8007246:	2400      	movs	r4, #0
 8007248:	e016      	b.n	8007278 <__kernel_rem_pio2f+0xa0>
 800724a:	2200      	movs	r2, #0
 800724c:	e7db      	b.n	8007206 <__kernel_rem_pio2f+0x2e>
 800724e:	42c6      	cmn	r6, r0
 8007250:	bf5d      	ittte	pl
 8007252:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8007256:	ee07 1a90 	vmovpl	s15, r1
 800725a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800725e:	eef0 7a47 	vmovmi.f32	s15, s14
 8007262:	ece4 7a01 	vstmia	r4!, {s15}
 8007266:	3001      	adds	r0, #1
 8007268:	e7dd      	b.n	8007226 <__kernel_rem_pio2f+0x4e>
 800726a:	ecfe 6a01 	vldmia	lr!, {s13}
 800726e:	ed96 7a00 	vldr	s14, [r6]
 8007272:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007276:	3401      	adds	r4, #1
 8007278:	455c      	cmp	r4, fp
 800727a:	f1a6 0604 	sub.w	r6, r6, #4
 800727e:	ddf4      	ble.n	800726a <__kernel_rem_pio2f+0x92>
 8007280:	ece9 7a01 	vstmia	r9!, {s15}
 8007284:	f10c 0c01 	add.w	ip, ip, #1
 8007288:	3004      	adds	r0, #4
 800728a:	e7d5      	b.n	8007238 <__kernel_rem_pio2f+0x60>
 800728c:	a908      	add	r1, sp, #32
 800728e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007292:	9104      	str	r1, [sp, #16]
 8007294:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8007296:	eddf 8a90 	vldr	s17, [pc, #576]	@ 80074d8 <__kernel_rem_pio2f+0x300>
 800729a:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 80074d4 <__kernel_rem_pio2f+0x2fc>
 800729e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80072a2:	9203      	str	r2, [sp, #12]
 80072a4:	4654      	mov	r4, sl
 80072a6:	00a2      	lsls	r2, r4, #2
 80072a8:	9205      	str	r2, [sp, #20]
 80072aa:	aa58      	add	r2, sp, #352	@ 0x160
 80072ac:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80072b0:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80072b4:	a944      	add	r1, sp, #272	@ 0x110
 80072b6:	aa08      	add	r2, sp, #32
 80072b8:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80072bc:	4694      	mov	ip, r2
 80072be:	4626      	mov	r6, r4
 80072c0:	2e00      	cmp	r6, #0
 80072c2:	f1a0 0004 	sub.w	r0, r0, #4
 80072c6:	dc4c      	bgt.n	8007362 <__kernel_rem_pio2f+0x18a>
 80072c8:	4628      	mov	r0, r5
 80072ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80072ce:	f000 f9f5 	bl	80076bc <scalbnf>
 80072d2:	eeb0 8a40 	vmov.f32	s16, s0
 80072d6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80072da:	ee28 0a00 	vmul.f32	s0, s16, s0
 80072de:	f000 fa53 	bl	8007788 <floorf>
 80072e2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80072e6:	eea0 8a67 	vfms.f32	s16, s0, s15
 80072ea:	2d00      	cmp	r5, #0
 80072ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072f0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80072f4:	ee17 9a90 	vmov	r9, s15
 80072f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072fc:	ee38 8a67 	vsub.f32	s16, s16, s15
 8007300:	dd41      	ble.n	8007386 <__kernel_rem_pio2f+0x1ae>
 8007302:	f104 3cff 	add.w	ip, r4, #4294967295
 8007306:	a908      	add	r1, sp, #32
 8007308:	f1c5 0e08 	rsb	lr, r5, #8
 800730c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8007310:	fa46 f00e 	asr.w	r0, r6, lr
 8007314:	4481      	add	r9, r0
 8007316:	fa00 f00e 	lsl.w	r0, r0, lr
 800731a:	1a36      	subs	r6, r6, r0
 800731c:	f1c5 0007 	rsb	r0, r5, #7
 8007320:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8007324:	4106      	asrs	r6, r0
 8007326:	2e00      	cmp	r6, #0
 8007328:	dd3c      	ble.n	80073a4 <__kernel_rem_pio2f+0x1cc>
 800732a:	f04f 0e00 	mov.w	lr, #0
 800732e:	f109 0901 	add.w	r9, r9, #1
 8007332:	4670      	mov	r0, lr
 8007334:	4574      	cmp	r4, lr
 8007336:	dc68      	bgt.n	800740a <__kernel_rem_pio2f+0x232>
 8007338:	2d00      	cmp	r5, #0
 800733a:	dd03      	ble.n	8007344 <__kernel_rem_pio2f+0x16c>
 800733c:	2d01      	cmp	r5, #1
 800733e:	d074      	beq.n	800742a <__kernel_rem_pio2f+0x252>
 8007340:	2d02      	cmp	r5, #2
 8007342:	d07d      	beq.n	8007440 <__kernel_rem_pio2f+0x268>
 8007344:	2e02      	cmp	r6, #2
 8007346:	d12d      	bne.n	80073a4 <__kernel_rem_pio2f+0x1cc>
 8007348:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800734c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007350:	b340      	cbz	r0, 80073a4 <__kernel_rem_pio2f+0x1cc>
 8007352:	4628      	mov	r0, r5
 8007354:	9306      	str	r3, [sp, #24]
 8007356:	f000 f9b1 	bl	80076bc <scalbnf>
 800735a:	9b06      	ldr	r3, [sp, #24]
 800735c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007360:	e020      	b.n	80073a4 <__kernel_rem_pio2f+0x1cc>
 8007362:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007366:	3e01      	subs	r6, #1
 8007368:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800736c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007370:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007374:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007378:	ecac 0a01 	vstmia	ip!, {s0}
 800737c:	ed90 0a00 	vldr	s0, [r0]
 8007380:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007384:	e79c      	b.n	80072c0 <__kernel_rem_pio2f+0xe8>
 8007386:	d105      	bne.n	8007394 <__kernel_rem_pio2f+0x1bc>
 8007388:	1e60      	subs	r0, r4, #1
 800738a:	a908      	add	r1, sp, #32
 800738c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8007390:	11f6      	asrs	r6, r6, #7
 8007392:	e7c8      	b.n	8007326 <__kernel_rem_pio2f+0x14e>
 8007394:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007398:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800739c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a0:	da31      	bge.n	8007406 <__kernel_rem_pio2f+0x22e>
 80073a2:	2600      	movs	r6, #0
 80073a4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80073a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ac:	f040 8098 	bne.w	80074e0 <__kernel_rem_pio2f+0x308>
 80073b0:	1e60      	subs	r0, r4, #1
 80073b2:	2200      	movs	r2, #0
 80073b4:	4550      	cmp	r0, sl
 80073b6:	da4b      	bge.n	8007450 <__kernel_rem_pio2f+0x278>
 80073b8:	2a00      	cmp	r2, #0
 80073ba:	d065      	beq.n	8007488 <__kernel_rem_pio2f+0x2b0>
 80073bc:	3c01      	subs	r4, #1
 80073be:	ab08      	add	r3, sp, #32
 80073c0:	3d08      	subs	r5, #8
 80073c2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d0f8      	beq.n	80073bc <__kernel_rem_pio2f+0x1e4>
 80073ca:	4628      	mov	r0, r5
 80073cc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80073d0:	f000 f974 	bl	80076bc <scalbnf>
 80073d4:	1c63      	adds	r3, r4, #1
 80073d6:	aa44      	add	r2, sp, #272	@ 0x110
 80073d8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80074d8 <__kernel_rem_pio2f+0x300>
 80073dc:	0099      	lsls	r1, r3, #2
 80073de:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80073e2:	4623      	mov	r3, r4
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f280 80a9 	bge.w	800753c <__kernel_rem_pio2f+0x364>
 80073ea:	4623      	mov	r3, r4
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f2c0 80c7 	blt.w	8007580 <__kernel_rem_pio2f+0x3a8>
 80073f2:	aa44      	add	r2, sp, #272	@ 0x110
 80073f4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80073f8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80074d0 <__kernel_rem_pio2f+0x2f8>
 80073fc:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80074dc <__kernel_rem_pio2f+0x304>
 8007400:	2000      	movs	r0, #0
 8007402:	1ae2      	subs	r2, r4, r3
 8007404:	e0b1      	b.n	800756a <__kernel_rem_pio2f+0x392>
 8007406:	2602      	movs	r6, #2
 8007408:	e78f      	b.n	800732a <__kernel_rem_pio2f+0x152>
 800740a:	f852 1b04 	ldr.w	r1, [r2], #4
 800740e:	b948      	cbnz	r0, 8007424 <__kernel_rem_pio2f+0x24c>
 8007410:	b121      	cbz	r1, 800741c <__kernel_rem_pio2f+0x244>
 8007412:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8007416:	f842 1c04 	str.w	r1, [r2, #-4]
 800741a:	2101      	movs	r1, #1
 800741c:	f10e 0e01 	add.w	lr, lr, #1
 8007420:	4608      	mov	r0, r1
 8007422:	e787      	b.n	8007334 <__kernel_rem_pio2f+0x15c>
 8007424:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8007428:	e7f5      	b.n	8007416 <__kernel_rem_pio2f+0x23e>
 800742a:	f104 3cff 	add.w	ip, r4, #4294967295
 800742e:	aa08      	add	r2, sp, #32
 8007430:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8007434:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007438:	a908      	add	r1, sp, #32
 800743a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800743e:	e781      	b.n	8007344 <__kernel_rem_pio2f+0x16c>
 8007440:	f104 3cff 	add.w	ip, r4, #4294967295
 8007444:	aa08      	add	r2, sp, #32
 8007446:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800744a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800744e:	e7f3      	b.n	8007438 <__kernel_rem_pio2f+0x260>
 8007450:	a908      	add	r1, sp, #32
 8007452:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007456:	3801      	subs	r0, #1
 8007458:	430a      	orrs	r2, r1
 800745a:	e7ab      	b.n	80073b4 <__kernel_rem_pio2f+0x1dc>
 800745c:	3201      	adds	r2, #1
 800745e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8007462:	2e00      	cmp	r6, #0
 8007464:	d0fa      	beq.n	800745c <__kernel_rem_pio2f+0x284>
 8007466:	9905      	ldr	r1, [sp, #20]
 8007468:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800746c:	eb0d 0001 	add.w	r0, sp, r1
 8007470:	18e6      	adds	r6, r4, r3
 8007472:	a91c      	add	r1, sp, #112	@ 0x70
 8007474:	f104 0c01 	add.w	ip, r4, #1
 8007478:	384c      	subs	r0, #76	@ 0x4c
 800747a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800747e:	4422      	add	r2, r4
 8007480:	4562      	cmp	r2, ip
 8007482:	da04      	bge.n	800748e <__kernel_rem_pio2f+0x2b6>
 8007484:	4614      	mov	r4, r2
 8007486:	e70e      	b.n	80072a6 <__kernel_rem_pio2f+0xce>
 8007488:	9804      	ldr	r0, [sp, #16]
 800748a:	2201      	movs	r2, #1
 800748c:	e7e7      	b.n	800745e <__kernel_rem_pio2f+0x286>
 800748e:	9903      	ldr	r1, [sp, #12]
 8007490:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007494:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8007498:	9105      	str	r1, [sp, #20]
 800749a:	ee07 1a90 	vmov	s15, r1
 800749e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074a2:	2400      	movs	r4, #0
 80074a4:	ece6 7a01 	vstmia	r6!, {s15}
 80074a8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80074dc <__kernel_rem_pio2f+0x304>
 80074ac:	46b1      	mov	r9, r6
 80074ae:	455c      	cmp	r4, fp
 80074b0:	dd04      	ble.n	80074bc <__kernel_rem_pio2f+0x2e4>
 80074b2:	ece0 7a01 	vstmia	r0!, {s15}
 80074b6:	f10c 0c01 	add.w	ip, ip, #1
 80074ba:	e7e1      	b.n	8007480 <__kernel_rem_pio2f+0x2a8>
 80074bc:	ecfe 6a01 	vldmia	lr!, {s13}
 80074c0:	ed39 7a01 	vldmdb	r9!, {s14}
 80074c4:	3401      	adds	r4, #1
 80074c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80074ca:	e7f0      	b.n	80074ae <__kernel_rem_pio2f+0x2d6>
 80074cc:	08007c24 	.word	0x08007c24
 80074d0:	08007bf8 	.word	0x08007bf8
 80074d4:	43800000 	.word	0x43800000
 80074d8:	3b800000 	.word	0x3b800000
 80074dc:	00000000 	.word	0x00000000
 80074e0:	9b02      	ldr	r3, [sp, #8]
 80074e2:	eeb0 0a48 	vmov.f32	s0, s16
 80074e6:	eba3 0008 	sub.w	r0, r3, r8
 80074ea:	f000 f8e7 	bl	80076bc <scalbnf>
 80074ee:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80074d4 <__kernel_rem_pio2f+0x2fc>
 80074f2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80074f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074fa:	db19      	blt.n	8007530 <__kernel_rem_pio2f+0x358>
 80074fc:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80074d8 <__kernel_rem_pio2f+0x300>
 8007500:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007504:	aa08      	add	r2, sp, #32
 8007506:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800750a:	3508      	adds	r5, #8
 800750c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007510:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007514:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007518:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800751c:	ee10 3a10 	vmov	r3, s0
 8007520:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007524:	ee17 3a90 	vmov	r3, s15
 8007528:	3401      	adds	r4, #1
 800752a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800752e:	e74c      	b.n	80073ca <__kernel_rem_pio2f+0x1f2>
 8007530:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007534:	aa08      	add	r2, sp, #32
 8007536:	ee10 3a10 	vmov	r3, s0
 800753a:	e7f6      	b.n	800752a <__kernel_rem_pio2f+0x352>
 800753c:	a808      	add	r0, sp, #32
 800753e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8007542:	9001      	str	r0, [sp, #4]
 8007544:	ee07 0a90 	vmov	s15, r0
 8007548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800754c:	3b01      	subs	r3, #1
 800754e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007552:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007556:	ed62 7a01 	vstmdb	r2!, {s15}
 800755a:	e743      	b.n	80073e4 <__kernel_rem_pio2f+0x20c>
 800755c:	ecfc 6a01 	vldmia	ip!, {s13}
 8007560:	ecb5 7a01 	vldmia	r5!, {s14}
 8007564:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007568:	3001      	adds	r0, #1
 800756a:	4550      	cmp	r0, sl
 800756c:	dc01      	bgt.n	8007572 <__kernel_rem_pio2f+0x39a>
 800756e:	4282      	cmp	r2, r0
 8007570:	daf4      	bge.n	800755c <__kernel_rem_pio2f+0x384>
 8007572:	a858      	add	r0, sp, #352	@ 0x160
 8007574:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007578:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800757c:	3b01      	subs	r3, #1
 800757e:	e735      	b.n	80073ec <__kernel_rem_pio2f+0x214>
 8007580:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8007582:	2b02      	cmp	r3, #2
 8007584:	dc09      	bgt.n	800759a <__kernel_rem_pio2f+0x3c2>
 8007586:	2b00      	cmp	r3, #0
 8007588:	dc2b      	bgt.n	80075e2 <__kernel_rem_pio2f+0x40a>
 800758a:	d044      	beq.n	8007616 <__kernel_rem_pio2f+0x43e>
 800758c:	f009 0007 	and.w	r0, r9, #7
 8007590:	b059      	add	sp, #356	@ 0x164
 8007592:	ecbd 8b04 	vpop	{d8-d9}
 8007596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800759c:	2b03      	cmp	r3, #3
 800759e:	d1f5      	bne.n	800758c <__kernel_rem_pio2f+0x3b4>
 80075a0:	aa30      	add	r2, sp, #192	@ 0xc0
 80075a2:	1f0b      	subs	r3, r1, #4
 80075a4:	4413      	add	r3, r2
 80075a6:	461a      	mov	r2, r3
 80075a8:	4620      	mov	r0, r4
 80075aa:	2800      	cmp	r0, #0
 80075ac:	f1a2 0204 	sub.w	r2, r2, #4
 80075b0:	dc52      	bgt.n	8007658 <__kernel_rem_pio2f+0x480>
 80075b2:	4622      	mov	r2, r4
 80075b4:	2a01      	cmp	r2, #1
 80075b6:	f1a3 0304 	sub.w	r3, r3, #4
 80075ba:	dc5d      	bgt.n	8007678 <__kernel_rem_pio2f+0x4a0>
 80075bc:	ab30      	add	r3, sp, #192	@ 0xc0
 80075be:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 80074dc <__kernel_rem_pio2f+0x304>
 80075c2:	440b      	add	r3, r1
 80075c4:	2c01      	cmp	r4, #1
 80075c6:	dc67      	bgt.n	8007698 <__kernel_rem_pio2f+0x4c0>
 80075c8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80075cc:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80075d0:	2e00      	cmp	r6, #0
 80075d2:	d167      	bne.n	80076a4 <__kernel_rem_pio2f+0x4cc>
 80075d4:	edc7 6a00 	vstr	s13, [r7]
 80075d8:	ed87 7a01 	vstr	s14, [r7, #4]
 80075dc:	edc7 7a02 	vstr	s15, [r7, #8]
 80075e0:	e7d4      	b.n	800758c <__kernel_rem_pio2f+0x3b4>
 80075e2:	ab30      	add	r3, sp, #192	@ 0xc0
 80075e4:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80074dc <__kernel_rem_pio2f+0x304>
 80075e8:	440b      	add	r3, r1
 80075ea:	4622      	mov	r2, r4
 80075ec:	2a00      	cmp	r2, #0
 80075ee:	da24      	bge.n	800763a <__kernel_rem_pio2f+0x462>
 80075f0:	b34e      	cbz	r6, 8007646 <__kernel_rem_pio2f+0x46e>
 80075f2:	eef1 7a47 	vneg.f32	s15, s14
 80075f6:	edc7 7a00 	vstr	s15, [r7]
 80075fa:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80075fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007602:	aa31      	add	r2, sp, #196	@ 0xc4
 8007604:	2301      	movs	r3, #1
 8007606:	429c      	cmp	r4, r3
 8007608:	da20      	bge.n	800764c <__kernel_rem_pio2f+0x474>
 800760a:	b10e      	cbz	r6, 8007610 <__kernel_rem_pio2f+0x438>
 800760c:	eef1 7a67 	vneg.f32	s15, s15
 8007610:	edc7 7a01 	vstr	s15, [r7, #4]
 8007614:	e7ba      	b.n	800758c <__kernel_rem_pio2f+0x3b4>
 8007616:	ab30      	add	r3, sp, #192	@ 0xc0
 8007618:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 80074dc <__kernel_rem_pio2f+0x304>
 800761c:	440b      	add	r3, r1
 800761e:	2c00      	cmp	r4, #0
 8007620:	da05      	bge.n	800762e <__kernel_rem_pio2f+0x456>
 8007622:	b10e      	cbz	r6, 8007628 <__kernel_rem_pio2f+0x450>
 8007624:	eef1 7a67 	vneg.f32	s15, s15
 8007628:	edc7 7a00 	vstr	s15, [r7]
 800762c:	e7ae      	b.n	800758c <__kernel_rem_pio2f+0x3b4>
 800762e:	ed33 7a01 	vldmdb	r3!, {s14}
 8007632:	3c01      	subs	r4, #1
 8007634:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007638:	e7f1      	b.n	800761e <__kernel_rem_pio2f+0x446>
 800763a:	ed73 7a01 	vldmdb	r3!, {s15}
 800763e:	3a01      	subs	r2, #1
 8007640:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007644:	e7d2      	b.n	80075ec <__kernel_rem_pio2f+0x414>
 8007646:	eef0 7a47 	vmov.f32	s15, s14
 800764a:	e7d4      	b.n	80075f6 <__kernel_rem_pio2f+0x41e>
 800764c:	ecb2 7a01 	vldmia	r2!, {s14}
 8007650:	3301      	adds	r3, #1
 8007652:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007656:	e7d6      	b.n	8007606 <__kernel_rem_pio2f+0x42e>
 8007658:	edd2 7a00 	vldr	s15, [r2]
 800765c:	edd2 6a01 	vldr	s13, [r2, #4]
 8007660:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007664:	3801      	subs	r0, #1
 8007666:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800766a:	ed82 7a00 	vstr	s14, [r2]
 800766e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007672:	edc2 7a01 	vstr	s15, [r2, #4]
 8007676:	e798      	b.n	80075aa <__kernel_rem_pio2f+0x3d2>
 8007678:	edd3 7a00 	vldr	s15, [r3]
 800767c:	edd3 6a01 	vldr	s13, [r3, #4]
 8007680:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007684:	3a01      	subs	r2, #1
 8007686:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800768a:	ed83 7a00 	vstr	s14, [r3]
 800768e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007692:	edc3 7a01 	vstr	s15, [r3, #4]
 8007696:	e78d      	b.n	80075b4 <__kernel_rem_pio2f+0x3dc>
 8007698:	ed33 7a01 	vldmdb	r3!, {s14}
 800769c:	3c01      	subs	r4, #1
 800769e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076a2:	e78f      	b.n	80075c4 <__kernel_rem_pio2f+0x3ec>
 80076a4:	eef1 6a66 	vneg.f32	s13, s13
 80076a8:	eeb1 7a47 	vneg.f32	s14, s14
 80076ac:	edc7 6a00 	vstr	s13, [r7]
 80076b0:	ed87 7a01 	vstr	s14, [r7, #4]
 80076b4:	eef1 7a67 	vneg.f32	s15, s15
 80076b8:	e790      	b.n	80075dc <__kernel_rem_pio2f+0x404>
 80076ba:	bf00      	nop

080076bc <scalbnf>:
 80076bc:	ee10 3a10 	vmov	r3, s0
 80076c0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80076c4:	d02b      	beq.n	800771e <scalbnf+0x62>
 80076c6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80076ca:	d302      	bcc.n	80076d2 <scalbnf+0x16>
 80076cc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80076d0:	4770      	bx	lr
 80076d2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80076d6:	d123      	bne.n	8007720 <scalbnf+0x64>
 80076d8:	4b24      	ldr	r3, [pc, #144]	@ (800776c <scalbnf+0xb0>)
 80076da:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8007770 <scalbnf+0xb4>
 80076de:	4298      	cmp	r0, r3
 80076e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80076e4:	db17      	blt.n	8007716 <scalbnf+0x5a>
 80076e6:	ee10 3a10 	vmov	r3, s0
 80076ea:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80076ee:	3a19      	subs	r2, #25
 80076f0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80076f4:	4288      	cmp	r0, r1
 80076f6:	dd15      	ble.n	8007724 <scalbnf+0x68>
 80076f8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8007774 <scalbnf+0xb8>
 80076fc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8007778 <scalbnf+0xbc>
 8007700:	ee10 3a10 	vmov	r3, s0
 8007704:	eeb0 7a67 	vmov.f32	s14, s15
 8007708:	2b00      	cmp	r3, #0
 800770a:	bfb8      	it	lt
 800770c:	eef0 7a66 	vmovlt.f32	s15, s13
 8007710:	ee27 0a87 	vmul.f32	s0, s15, s14
 8007714:	4770      	bx	lr
 8007716:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800777c <scalbnf+0xc0>
 800771a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800771e:	4770      	bx	lr
 8007720:	0dd2      	lsrs	r2, r2, #23
 8007722:	e7e5      	b.n	80076f0 <scalbnf+0x34>
 8007724:	4410      	add	r0, r2
 8007726:	28fe      	cmp	r0, #254	@ 0xfe
 8007728:	dce6      	bgt.n	80076f8 <scalbnf+0x3c>
 800772a:	2800      	cmp	r0, #0
 800772c:	dd06      	ble.n	800773c <scalbnf+0x80>
 800772e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007732:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007736:	ee00 3a10 	vmov	s0, r3
 800773a:	4770      	bx	lr
 800773c:	f110 0f16 	cmn.w	r0, #22
 8007740:	da09      	bge.n	8007756 <scalbnf+0x9a>
 8007742:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800777c <scalbnf+0xc0>
 8007746:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8007780 <scalbnf+0xc4>
 800774a:	ee10 3a10 	vmov	r3, s0
 800774e:	eeb0 7a67 	vmov.f32	s14, s15
 8007752:	2b00      	cmp	r3, #0
 8007754:	e7d9      	b.n	800770a <scalbnf+0x4e>
 8007756:	3019      	adds	r0, #25
 8007758:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800775c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8007760:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8007784 <scalbnf+0xc8>
 8007764:	ee07 3a90 	vmov	s15, r3
 8007768:	e7d7      	b.n	800771a <scalbnf+0x5e>
 800776a:	bf00      	nop
 800776c:	ffff3cb0 	.word	0xffff3cb0
 8007770:	4c000000 	.word	0x4c000000
 8007774:	7149f2ca 	.word	0x7149f2ca
 8007778:	f149f2ca 	.word	0xf149f2ca
 800777c:	0da24260 	.word	0x0da24260
 8007780:	8da24260 	.word	0x8da24260
 8007784:	33000000 	.word	0x33000000

08007788 <floorf>:
 8007788:	ee10 3a10 	vmov	r3, s0
 800778c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007790:	3a7f      	subs	r2, #127	@ 0x7f
 8007792:	2a16      	cmp	r2, #22
 8007794:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007798:	dc2b      	bgt.n	80077f2 <floorf+0x6a>
 800779a:	2a00      	cmp	r2, #0
 800779c:	da12      	bge.n	80077c4 <floorf+0x3c>
 800779e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8007804 <floorf+0x7c>
 80077a2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80077a6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80077aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077ae:	dd06      	ble.n	80077be <floorf+0x36>
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	da24      	bge.n	80077fe <floorf+0x76>
 80077b4:	2900      	cmp	r1, #0
 80077b6:	4b14      	ldr	r3, [pc, #80]	@ (8007808 <floorf+0x80>)
 80077b8:	bf08      	it	eq
 80077ba:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80077be:	ee00 3a10 	vmov	s0, r3
 80077c2:	4770      	bx	lr
 80077c4:	4911      	ldr	r1, [pc, #68]	@ (800780c <floorf+0x84>)
 80077c6:	4111      	asrs	r1, r2
 80077c8:	420b      	tst	r3, r1
 80077ca:	d0fa      	beq.n	80077c2 <floorf+0x3a>
 80077cc:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8007804 <floorf+0x7c>
 80077d0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80077d4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80077d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077dc:	ddef      	ble.n	80077be <floorf+0x36>
 80077de:	2b00      	cmp	r3, #0
 80077e0:	bfbe      	ittt	lt
 80077e2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80077e6:	fa40 f202 	asrlt.w	r2, r0, r2
 80077ea:	189b      	addlt	r3, r3, r2
 80077ec:	ea23 0301 	bic.w	r3, r3, r1
 80077f0:	e7e5      	b.n	80077be <floorf+0x36>
 80077f2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80077f6:	d3e4      	bcc.n	80077c2 <floorf+0x3a>
 80077f8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80077fc:	4770      	bx	lr
 80077fe:	2300      	movs	r3, #0
 8007800:	e7dd      	b.n	80077be <floorf+0x36>
 8007802:	bf00      	nop
 8007804:	7149f2ca 	.word	0x7149f2ca
 8007808:	bf800000 	.word	0xbf800000
 800780c:	007fffff 	.word	0x007fffff

08007810 <_init>:
 8007810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007812:	bf00      	nop
 8007814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007816:	bc08      	pop	{r3}
 8007818:	469e      	mov	lr, r3
 800781a:	4770      	bx	lr

0800781c <_fini>:
 800781c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781e:	bf00      	nop
 8007820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007822:	bc08      	pop	{r3}
 8007824:	469e      	mov	lr, r3
 8007826:	4770      	bx	lr
